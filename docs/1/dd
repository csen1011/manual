<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>dd - convert and copy a file</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<p><strong>dd</strong> [<code>OPERAND</code>]...<br/>
<strong>dd</strong> <code>OPTION</code></p>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>Copy a file, converting and formatting according to the operands.</p>
<dl>
<dt>bs=BYTES</dt>
<dd><p>read and write up to BYTES bytes at a time (default: 512); overrides ibs and obs</p>
</dd>
<dt>cbs=BYTES</dt>
<dd><p>convert BYTES bytes at a time</p>
</dd>
<dt>conv=CONVS</dt>
<dd><p>convert the file as per the comma separated symbol list</p>
</dd>
<dt>count=N</dt>
<dd><p>copy only N input blocks</p>
</dd>
<dt>ibs=BYTES</dt>
<dd><p>read up to BYTES bytes at a time (default: 512)</p>
</dd>
<dt>if=FILE</dt>
<dd><p>read from FILE instead of stdin</p>
</dd>
<dt>iflag=FLAGS</dt>
<dd><p>read as per the comma separated symbol list</p>
</dd>
<dt>obs=BYTES</dt>
<dd><p>write BYTES bytes at a time (default: 512)</p>
</dd>
<dt>of=FILE</dt>
<dd><p>write to FILE instead of stdout</p>
</dd>
<dt>oflag=FLAGS</dt>
<dd><p>write as per the comma separated symbol list</p>
</dd>
<dt>seek=N</dt>
<dd><p>skip N obs-sized blocks at start of output</p>
</dd>
<dt>skip=N</dt>
<dd><p>skip N ibs-sized blocks at start of input</p>
</dd>
<dt>status=LEVEL</dt>
<dd><p>The LEVEL of information to print to stderr; 'none' suppresses everything but error messages, 'noxfer' suppresses the final transfer statistics, 'progress' shows periodic transfer statistics</p>
</dd>
</dl>
<p>N and BYTES may be followed by the following multiplicative suffixes: c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000, M=1024*1024, xM=M, GB=1000*1000*1000, G=1024*1024*1024, and so on for T, P, E, Z, Y. Binary prefixes can be used, too: KiB=K, MiB=M, and so on.</p>
<p>Each CONV symbol may be:</p>
<dl>
<dt>ascii</dt>
<dd><p>from EBCDIC to ASCII</p>
</dd>
<dt>ebcdic</dt>
<dd><p>from ASCII to EBCDIC</p>
</dd>
<dt>ibm</dt>
<dd><p>from ASCII to alternate EBCDIC</p>
</dd>
<dt>block</dt>
<dd><p>pad newline-terminated records with spaces to cbs-size</p>
</dd>
<dt>unblock</dt>
<dd><p>replace trailing spaces in cbs-size records with newline</p>
</dd>
<dt>lcase</dt>
<dd><p>change upper case to lower case</p>
</dd>
<dt>ucase</dt>
<dd><p>change lower case to upper case</p>
</dd>
<dt>sparse</dt>
<dd><p>try to seek rather than write all-NUL output blocks</p>
</dd>
<dt>swab</dt>
<dd><p>swap every pair of input bytes</p>
</dd>
<dt>sync</dt>
<dd><p>pad every input block with NULs to ibs-size; when used with block or unblock, pad with spaces rather than NULs</p>
</dd>
<dt>excl</dt>
<dd><p>fail if the output file already exists</p>
</dd>
<dt>nocreat</dt>
<dd><p>do not create the output file</p>
</dd>
<dt>notrunc</dt>
<dd><p>do not truncate the output file</p>
</dd>
<dt>noerror</dt>
<dd><p>continue after read errors</p>
</dd>
<dt>fdatasync</dt>
<dd><p>physically write output file data before finishing</p>
</dd>
<dt>fsync</dt>
<dd><p>likewise, but also write metadata</p>
</dd>
</dl>
<p>Each FLAG symbol may be:</p>
<dl>
<dt>append</dt>
<dd><p>append mode (makes sense only for output; conv=notrunc suggested)</p>
</dd>
<dt>direct</dt>
<dd><p>use direct I/O for data</p>
</dd>
<dt>directory</dt>
<dd><p>fail unless a directory</p>
</dd>
<dt>dsync</dt>
<dd><p>use synchronized I/O for data</p>
</dd>
<dt>sync</dt>
<dd><p>likewise, but also for metadata</p>
</dd>
<dt>fullblock</dt>
<dd><p>accumulate full blocks of input (iflag only)</p>
</dd>
<dt>nonblock</dt>
<dd><p>use non-blocking I/O</p>
</dd>
<dt>noatime</dt>
<dd><p>do not update access time</p>
</dd>
<dt>nocache</dt>
<dd><p>Request to drop cache. See also oflag=sync</p>
</dd>
<dt>noctty</dt>
<dd><p>do not assign controlling terminal from file</p>
</dd>
<dt>nofollow</dt>
<dd><p>do not follow symlinks</p>
</dd>
<dt>count_bytes</dt>
<dd><p>treat 'count=N' as a byte count (iflag only)</p>
</dd>
<dt>skip_bytes</dt>
<dd><p>treat 'skip=N' as a byte count (iflag only)</p>
</dd>
<dt>seek_bytes</dt>
<dd><p>treat 'seek=N' as a byte count (oflag only)</p>
</dd>
</dl>
<p>Sending a USR1 signal to a running 'dd' process makes it print I/O statistics to standard error and then resume copying.</p>
<p>Options are:</p>
<dl>
<dt><strong>--help</strong></dt>
<dd><p>display this help and exit</p>
</dd>
<dt><strong>--version</strong></dt>
<dd><p>output version information and exit</p>
</dd>
</dl>
</div></div><h1 id='author'><a href='#author'>AUTHOR</a></h1><div data-for='author' data-hide><div class='section' data-for='author'><div data-more>
<p>Written by Paul Rubin, David MacKenzie, and Stuart Kemp.</p>
</div></div></div><h1 id='reporting-bugs'><a href='#reporting-bugs'>REPORTING BUGS</a></h1><div data-for='reporting-bugs' data-hide><div class='section' data-for='reporting-bugs'><div data-more>
<p>GNU coreutils online help: &lt;<a href="https://www.gnu.org/software/coreutils/&amp;gt;">https://www.gnu.org/software/coreutils/&gt;</a><br/>
Report any translation bugs to &lt;<a href="https://translationproject.org/team/&amp;gt;">https://translationproject.org/team/&gt;</a></p>
</div></div></div><h1 id='copyright'><a href='#copyright'>COPYRIGHT</a></h1><div data-for='copyright' data-hide><div class='section' data-for='copyright'><div data-more>
<p>Copyright © 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;<a href="https://gnu.org/licenses/gpl.html&amp;gt;">https://gnu.org/licenses/gpl.html&gt;</a>.<br/>
This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.</p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p>Full documentation &lt;<a href="https://www.gnu.org/software/coreutils/dd&amp;gt;">https://www.gnu.org/software/coreutils/dd&gt;</a><br/>
or available locally via: info '(coreutils) dd invocation'</p></div></div>


        </div>

    </body>

</html>