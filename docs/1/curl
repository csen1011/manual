<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>curl - transfer a URL</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<p><strong>curl [options / URLs]</strong></p>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p><strong>curl</strong> is a tool for transferring data from or to a server. It supports these protocols: DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET or TFTP. The command is designed to work without user interaction.</p>
<p>curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume and more. As you will see below, the number of features will make your head spin.</p>
<p>curl is powered by libcurl for all transfer-related features. See <code>libcurl(3)</code> for details.</p>
</div></div><h1 id='url'><a href='#url'>URL</a></h1><div data-for='url' data-hide><div class='section' data-for='url'><div data-more>
<p>The URL syntax is protocol-dependent. You find a detailed description in RFC 3986.</p>
<p>You can specify multiple URLs or parts of URLs by writing part sets within braces and quoting the URL as in:</p>
<pre><code>  "http://site.{one,two,three}.com"</code></pre>
<p>or you can get sequences of alphanumeric series by using [] as in:</p>
<pre><code>  "<a href="ftp://ftp.example.com/file">ftp://ftp.example.com/file</a>[1-100].txt"</code></pre>
<pre><code>  "<a href="ftp://ftp.example.com/file">ftp://ftp.example.com/file</a>[001-100].txt"    (with leading zeros)</code></pre>
<pre><code>  "<a href="ftp://ftp.example.com/file">ftp://ftp.example.com/file</a>[a-z].txt"</code></pre>
<p>Nested sequences are not supported, but you can use several ones next to each other:</p>
<pre><code>  "<a href="http://example.com/archive">http://example.com/archive</a>[1996-1999]/vol[1-4]/part{a,b,c}.html"</code></pre>
<p>You can specify any amount of URLs on the command line. They will be fetched in a sequential manner in the specified order. You can specify command line options and URLs mixed and in any order on the command line.</p>
<p>You can specify a step counter for the ranges to get every Nth number or letter:</p>
<pre><code>  "<a href="http://example.com/file">http://example.com/file</a>[1-100:10].txt"</code></pre>
<pre><code>  "<a href="http://example.com/file">http://example.com/file</a>[a-z:2].txt"</code></pre>
<p>When using [] or {} sequences when invoked from a command line prompt, you probably have to put the full URL within double quotes to avoid the shell from interfering with it. This also goes for other characters treated special, like for example '&amp;', '?' and '*'.</p>
<p>Provide the IPv6 zone index in the URL with an escaped percentage sign and the interface name. Like in</p>
<pre><code>  "http://[fe80::3%25eth0]/"</code></pre>
<p>If you specify URL without protocol:// prefix, curl will attempt to guess what protocol you might want. It will then default to HTTP but try other protocols based on often-used host name prefixes. For example, for host names starting with "ftp." curl will assume you want to speak FTP.</p>
<p>curl will do its best to use what you pass to it as a URL. It is not trying to validate it as a syntactically correct URL by any means but is fairly liberal with what it accepts.</p>
<p>curl will attempt to re-use connections for multiple file transfers, so that getting many files from the same server will not do multiple connects / handshakes. This improves speed. Of course this is only done on files specified on a single command line and cannot be used between separate curl invocations.</p>
</div></div></div><h1 id='output'><a href='#output'>OUTPUT</a></h1><div data-for='output' data-hide><div class='section' data-for='output'><div data-more>
<p>If not told otherwise, curl writes the received data to stdout. It can be instructed to instead save that data into a local file, using the <code>-o, --output</code> or <code>-O, --remote-name</code> options. If curl is given multiple URLs to transfer on the command line, it similarly needs multiple options for where to save them.</p>
<p>curl does not parse or otherwise "understand" the content it gets or writes as output. It does no encoding or decoding, unless explicitly asked to with dedicated command line options.</p>
</div></div></div><h1 id='protocols'><a href='#protocols'>PROTOCOLS</a></h1><div data-for='protocols' data-hide><div class='section' data-for='protocols'><div data-more>
<p>curl supports numerous protocols, or put in URL terms: schemes. Your particular build may not support them all.</p>
<ul>
<li><p>Lets you lookup words using online dictionaries.</p></li>
<li><p>Read or write local files. curl does not support accessing file:// URL remotely, but when running on Microsoft Windows using the native UNC approach will work.</p></li>
<li><p>curl supports the File Transfer Protocol with a lot of tweaks and levers. With or without using TLS.</p></li>
<li><p>Retrieve files.</p></li>
<li><p>curl supports HTTP with numerous options and variations. It can speak HTTP version 0.9, 1.0, 1.1, 2 and 3 depending on build options and the correct command line options.</p></li>
<li><p>Using the mail reading protocol, curl can "download" emails for you. With or without using TLS.</p></li>
<li><p>curl can do directory lookups for you, with or without TLS.</p></li>
<li><p>curl supports MQTT version 3. Downloading over MQTT equals "subscribe" to a topic while uploading/posting equals "publish" on a topic. MQTT over TLS is not supported (yet).</p></li>
<li><p>Downloading from a pop3 server means getting a mail. With or without using TLS.</p></li>
<li><p>The Realtime Messaging Protocol is primarily used to server streaming media and curl can download it.</p></li>
<li><p>curl supports RTSP 1.0 downloads.</p></li>
<li><p>curl supports SSH version 2 scp transfers.</p></li>
<li><p>curl supports SFTP (draft 5) done over SSH version 2.</p></li>
<li><p>curl supports SMB version 1 for upload and download.</p></li>
<li><p>Uploading contents to an SMTP server means sending an email. With or without TLS.</p></li>
<li><p>Telling curl to fetch a telnet URL starts an interactive session where it sends what it reads on stdin and outputs what the server sends it.</p></li>
<li><p>curl can do TFTP downloads and uploads.</p></li>
</ul>
</div></div></div><h1 id='progress-meter'><a href='#progress-meter'>PROGRESS METER</a></h1><div data-for='progress-meter' data-hide><div class='section' data-for='progress-meter'><div data-more>
<p>curl normally displays a progress meter during operations, indicating the amount of transferred data, transfer speeds and estimated time left, etc. The progress meter displays number of bytes and the speeds are in bytes per second. The suffixes (k, M, G, T, P) are 1024 based. For example 1k is 1024 bytes. 1M is 1048576 bytes.</p>
<p>curl displays this data to the terminal by default, so if you invoke curl to do an operation and it is about to write data to the terminal, it <code>disables</code> the progress meter as otherwise it would mess up the output mixing progress meter and response data.</p>
<p>If you want a progress meter for HTTP POST or PUT requests, you need to redirect the response output to a file, using shell redirect (&gt;), <code>-o, --output</code> or similar.</p>
<p>This does not apply to FTP upload as that operation does not spit out any response data to the terminal.</p>
<p>If you prefer a progress "bar" instead of the regular meter, <code>-#, --progress-bar</code> is your friend. You can also disable the progress meter completely with the <code>-s, --silent</code> option.</p>
</div></div></div><h1 id='options'><a href='#options'>OPTIONS</a></h1><div data-for='options' data-hide><div class='section' data-for='options'><div data-more>
<p>Options start with one or two dashes. Many of the options require an additional value next to them.</p>
<p>The short "single-dash" form of the options, -d for example, may be used with or without a space between it and its value, although a space is a recommended separator. The long "double-dash" form, <code>-d, --data</code> for example, requires a space between it and its value.</p>
<p>Short version options that do not need any additional values can be used immediately next to each other, like for example you can specify all the options -O, -L and -v at once as -OLv.</p>
<p>In general, all boolean options are enabled with --<strong>option</strong> and yet again disabled with --<strong>no-</strong>option. That is, you use the same option name but prefix it with "no-". However, in this list we mostly only list and show the --option version of them.</p>
<ul>
<li><p>(HTTP) Connect through an abstract Unix domain socket, instead of using the network. Note: netstat shows the path of an abstract socket prefixed with '@', however the &lt;path&gt; argument should not have this leading character.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --abstract-unix-socket socketpath <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--unix-socket</code>. Added in 7.53.0.</p>
<ul>
<li><p>(HTTPS) This option enables the alt-svc parser in curl. If the file name points to an existing alt-svc cache file, that will be used. After a completed transfer, the cache will be saved to the file name again if it has been modified.</p></li>
</ul>
<p>Specify a "" file name (zero length) to avoid loading/saving and make curl just handle the cache in memory.</p>
<p>If this option is used several times, curl will load contents from all the files but the last one will be used for saving.</p>
<p>Example:</p>
<pre><code> curl --alt-svc svc.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--resolve</code> and <code>--connect-to</code>. Added in 7.64.1.</p>
<ul>
<li><p>(HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support. This is done by first doing a request and checking the response-headers, thus possibly inducing an extra network round-trip. This is used instead of setting a specific authentication method, which you can do with <code>--basic</code>, <code>--digest</code>, <code>--ntlm</code>, and <code>--negotiate</code>.</p></li>
</ul>
<p>Using <code>--anyauth</code> is not recommended if you do uploads from stdin, since it may require data to be sent twice and then the client must be able to rewind. If the need should arise when uploading from stdin, the upload operation will fail.</p>
<p>Used together with <code>-u, --user</code>.</p>
<p>Example:</p>
<pre><code> curl --anyauth --user me:pwd <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-anyauth</code>, <code>--basic</code> and <code>--digest</code>.</p>
<ul>
<li><p>(FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it. If the remote file does not exist, it will be created. Note that this flag is ignored by some SFTP servers (including OpenSSH).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --upload-file local --append <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>-r, --range</code> and <code>-C, --continue-at</code>.</p>
<ul>
<li><p>Use AWS V4 signature authentication in the transfer.</p></li>
</ul>
<p>The provider argument is a string that is used by the algorithm when creating outgoing authentication headers.</p>
<p>The region argument is a string that points to a geographic area of a resources collection (region-code) when the region name is omitted from the endpoint.</p>
<p>The service argument is a string that points to a function provided by a cloud (service-code) when the service name is omitted from the endpoint.</p>
<p>Example:</p>
<pre><code> curl --aws-sigv4 "aws:amz:east-2:es" --user "key:secret" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--basic</code> and <code>-u, --user</code>. Added in 7.75.0.</p>
<ul>
<li><p>(HTTP) Tells curl to use HTTP Basic authentication with the remote host. This is the default and this option is usually pointless, unless you use it to override a previously set option that sets a different authentication method (such as <code>--ntlm</code>, <code>--digest</code>, or <code>--negotiate</code>).</p></li>
</ul>
<p>Used together with <code>-u, --user</code>.</p>
<p>Example:</p>
<pre><code> curl -u name:password --basic <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-basic</code>.</p>
<ul>
<li><p>(TLS) Tells curl to use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The certificate(s) must be in PEM format. Normally curl is built to use a default file for this, so this option is typically used to alter that default file.</p></li>
</ul>
<p>curl recognizes the environment variable named 'CURL_CA_BUNDLE' if it is set, and uses the given path as a path to a CA cert bundle. This option overrides that variable.</p>
<p>The windows version of curl will automatically look for a CA certs file named 'curl-ca-bundle.crt', either in the same directory as curl.exe, or in the Current Working Directory, or in any folder along your PATH.</p>
<p>If curl is built against the NSS SSL library, the NSS PEM PKCS#11 module <a href="http://(libnsspem.so">(libnsspem.so</a>) needs to be available for this option to work properly.</p>
<p>(iOS and macOS only) If curl is built against Secure Transport, then this option is supported for backward compatibility with other SSL engines, but it should not be set. If the option is not set, then curl will use the certificates in the system and user Keychain to verify the peer, which is the preferred method of verifying the peer's certificate chain.</p>
<p>(Schannel only) This option is supported for Schannel in Windows 7 or later with libcurl 7.60 or later. This option is supported for backward compatibility with other SSL engines; instead it is recommended to use Windows' store of root certificates (the default for Schannel).</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --cacert CA-file.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--capath</code> and <code>-k, --insecure</code>.</p>
<ul>
<li><p>(TLS) Tells curl to use the specified certificate directory to verify the peer. Multiple paths can be provided by separating them with ":" (e.g. "path1:path2:path3"). The certificates must be in PEM format, and if curl is built against OpenSSL, the directory must have been processed using the c_rehash utility supplied with OpenSSL. Using <code>--capath</code> can allow OpenSSL-powered curl to make SSL-connections much more efficiently than using <code>--cacert</code> if the --cacert file contains many CA certificates.</p></li>
</ul>
<p>If this option is set, the default capath value will be ignored, and if it is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --capath /local/directory <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--cacert</code> and <code>-k, --insecure</code>.</p>
<ul>
<li><p>(TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.</p></li>
</ul>
<p>If this option is enabled and the server sends an invalid (e.g. expired) response, if the response suggests that the server certificate has been revoked, or no response at all is received, the verification fails.</p>
<p>This is currently only implemented in the OpenSSL, GnuTLS and NSS backends.</p>
<p>Example:</p>
<pre><code> curl --cert-status <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--pinnedpubkey</code>. Added in 7.41.0.</p>
<ul>
<li><p>(TLS) Tells curl what type the provided client certificate is using. PEM, DER, ENG and P12 are recognized types. If not specified, PEM is assumed.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --cert-type PEM --cert file <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-E, --cert</code>, <code>--key</code> and <code>--key-type</code>.</p>
<ul>
<li><p>(TLS) Tells curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol. The certificate must be in PKCS#12 format if using Secure Transport, or PEM format if using any other engine. If the optional password is not specified, it will be queried for on the terminal. Note that this option assumes a "certificate" file that is the private key and the client certificate concatenated! See <code>-E, --cert</code> and <code>--key</code> to specify them independently.</p></li>
</ul>
<p>If curl is built against the NSS SSL library then this option can tell curl the nickname of the certificate to use within the NSS database defined by the environment variable SSL_DIR (or by default /etc/pki/nssdb). If the NSS PEM PKCS#11 module <a href="http://(libnsspem.so">(libnsspem.so</a>) is available then PEM files may be loaded. If you want to use a file from the current directory, please precede it with "./" prefix, in order to avoid confusion with a nickname. If the nickname contains ":", it needs to be preceded by "\" so that it is not recognized as password delimiter. If the nickname contains "\", it needs to be escaped as "\\" so that it is not recognized as an escape character.</p>
<p>If curl is built against OpenSSL library, and the engine pkcs11 is available, then a PKCS#11 URI (RFC 7512) can be used to specify a certificate located in a PKCS#11 device. A string beginning with "pkcs11:" will be interpreted as a PKCS#11 URI. If a PKCS#11 URI is provided, then the <code>--engine</code> option will be set as "pkcs11" if none was provided and the <code>--cert-type</code> option will be set as "ENG" if none was provided.</p>
<p>(iOS and macOS only) If curl is built against Secure Transport, then the certificate string can either be the name of a certificate/private key in the system or user keychain, or the path to a PKCS#12-encoded certificate and private key. If you want to use a file from the current directory, please precede it with "./" prefix, in order to avoid confusion with a nickname.</p>
<p>(Schannel only) Client certificates must be specified by a path expression to a certificate store. (Loading PFX is not supported; you can import it to a store first). You can use "&lt;store location&gt;\&lt;store name&gt;\&lt;thumbprint&gt;" to refer to a certificate in the system certificates store, for example, "CurrentUser\MY\934a7ac6f8a5d579285a74fa61e19f23ddfe8d7a". Thumbprint is usually a SHA-1 hex string which you can see in certificate details. Following store locations are supported: CurrentUser, LocalMachine, CurrentService, Services, CurrentUserGroupPolicy, LocalMachineGroupPolicy, LocalMachineEnterprise.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --cert certfile --key keyfile <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--cert-type</code>, <code>--key</code> and <code>--key-type</code>.</p>
<ul>
<li><p>(TLS) Specifies which ciphers to use in the connection. The list of ciphers must specify valid ciphers. Read up on SSL cipher list details on this URL:</p></li>
</ul>
<pre><code> <a href="https://curl.se/docs/ssl-ciphers.html">https://curl.se/docs/ssl-ciphers.html</a></code></pre>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --ciphers ECDHE-ECDSA-AES256-CCM8 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsv1.3</code>.</p>
<ul>
<li><p>(SCP SFTP) Enables built-in SSH compression. This is a request, not an order; the server may or may not do it.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --compressed-ssh <a href="sftp://example.com/">sftp://example.com/</a></code></pre>
<p>See also <code>--compressed</code>. Added in 7.56.0.</p>
<ul>
<li><p>(HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content. Headers are not modified.</p></li>
</ul>
<p>If this option is used and the server sends an unsupported encoding, curl will report an error. This is a request, not an order; the server may or may not deliver data compressed.</p>
<p>Example:</p>
<pre><code> curl --compressed <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--compressed-ssh</code>.</p>
<ul>
<li><p>Specify a text file to read curl arguments from. The command line arguments found in the text file will be used as if they were provided on the command line.</p></li>
</ul>
<p>Options and their parameters must be specified on the same line in the file, separated by whitespace, colon, or the equals sign. Long option names can optionally be given in the config file without the initial double dashes and if so, the colon or equals characters can be used as separators. If the option is specified with one or two dashes, there can be no colon or equals character between the option and its parameter.</p>
<p>If the parameter contains whitespace (or starts with : or =), the parameter must be enclosed within quotes. Within double quotes, the following escape sequences are available: \\, \", \t, \n, \r and \v. A backslash preceding any other letter is ignored.</p>
<p>If the first column of a config line is a '#' character, the rest of the line will be treated as a comment.</p>
<p>Only write one option per physical line in the config file.</p>
<p>Specify the filename to <code>-K, --config</code> as '-' to make curl read the file from stdin.</p>
<p>Note that to be able to specify a URL in the config file, you need to specify it using the <code>--url</code> option, and not by simply writing the URL on its own line. So, it could look similar to this:</p>
<p>url = "<a href="https://curl.se/docs/">https://curl.se/docs/</a>"</p>
<pre><code> # --- Example file ---
 # this is a comment
 url = "<a href="http://example.com">example.com</a>"
 output = "curlhere.html"
 user-agent = "superagent/1.0"</code></pre>
<pre><code> # and fetch another URL too
 url = "<a href="http://example.com/docs/manpage.html">example.com/docs/manpage.html</a>"
 -O
 referer = "<a href="http://nowhereatall.example.com/">http://nowhereatall.example.com/</a>"
 # --- End of example file ---</code></pre>
<p>When curl is invoked, it (unless <code>-q, --disable</code> is used) checks for a default config file and uses it if found, even when <code>-K, --config</code> is used. The default config file is checked for in the following places in this order:</p>
<p>1) "$CURL_HOME/.curlrc"</p>
<p>2) "$XDG_CONFIG_HOME/.curlrc" (Added in 7.73.0)</p>
<p>3) "$HOME/.curlrc"</p>
<p>4) Windows: "%USERPROFILE%\.curlrc"</p>
<p>5) Windows: "%APPDATA%\.curlrc"</p>
<p>6) Windows: "%USERPROFILE%\Application Data\.curlrc"</p>
<p>7) Non-windows: use getpwuid to find the home directory</p>
<p>8) On windows, if it finds no .curlrc file in the sequence described above, it checks for one in the same dir the curl executable is placed.</p>
<p>This option can be used multiple times to load multiple config files.</p>
<p>Example:</p>
<pre><code> curl --config file.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-q, --disable</code>.</p>
<ul>
<li><p>Maximum time in seconds that you allow curl's connection to take. This only limits the connection phase, so if curl connects within the given period it will continue - if not it will exit. Since version 7.32.0, this option accepts decimal values.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl --connect-timeout 20 <a href="https://example.com">https://example.com</a>
 curl --connect-timeout 3.14 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-m, --max-time</code>.</p>
<ul>
<li></li>
</ul>
<p>For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead. This option is suitable to direct requests at a specific server, e.g. at a specific cluster node in a cluster of servers. This option is only used to establish the network connection. It does NOT affect the hostname/port that is used for TLS/SSL (e.g. SNI, certificate verification) or for the application protocols. "HOST1" and "PORT1" may be the empty string, meaning "any host/port". "HOST2" and "PORT2" may also be the empty string, meaning "use the request's original host/port".</p>
<p>A "host" specified to this option is compared as a string, so it needs to match the name used in request URL. It can be either numerical such as "127.0.0.1" or the full host name such as "<a href="http://example.org">example.org</a>".</p>
<p>This option can be used many times to add many connect rules.</p>
<p>Example:</p>
<pre><code> curl --connect-to <a href="http://example.com:443">example.com:443</a>:<a href="http://example.net:8443">example.net:8443</a> <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--resolve</code> and <code>-H, --header</code>. Added in 7.49.0.</p>
<ul>
<li><p>Continue/Resume a previous file transfer at the given offset. The given offset is the exact number of bytes that will be skipped, counting from the beginning of the source file before it is transferred to the destination. If used with uploads, the FTP server command SIZE will not be used by curl.</p></li>
</ul>
<p>Use "-C -" to tell curl to automatically find out where/how to resume the transfer. It then uses the given output/input files to figure that out.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl -C - <a href="https://example.com">https://example.com</a>
 curl -C 400 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-r, --range</code>.</p>
<ul>
<li><p>(HTTP) Specify to which file you want curl to write all cookies after a completed operation. Curl writes all cookies from its in-memory cookie storage to the given file at the end of operations. If no cookies are known, no data will be written. The file will be written using the Netscape cookie file format. If you set the file name to a single dash, "-", the cookies will be written to stdout.</p></li>
</ul>
<p>This command line option will activate the cookie engine that makes curl record and use cookies. Another way to activate it is to use the <code>-b, --cookie</code> option.</p>
<p>If the cookie jar cannot be created or written to, the whole curl operation will not fail or even report an error clearly. Using <code>-v, --verbose</code> will get a warning displayed, but that is the only visible feedback you get about this possibly lethal situation.</p>
<p>If this option is used several times, the last specified file name will be used.</p>
<p>Examples:</p>
<pre><code> curl -c store-here.txt <a href="https://example.com">https://example.com</a>
 curl -c store-here.txt -b read-these <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-b, --cookie</code>.</p>
<ul>
<li><p>(HTTP) Pass the data to the HTTP server in the Cookie header. It is supposedly the data previously received from the server in a "Set-Cookie:" line. The data should be in the format "NAME1=VALUE1; NAME2=VALUE2".</p></li>
</ul>
<p>If no '=' symbol is used in the argument, it is instead treated as a filename to read previously stored cookie from. This option also activates the cookie engine which will make curl record incoming cookies, which may be handy if you are using this in combination with the <code>-L, --location</code> option or do multiple URL transfers on the same invoke. If the file name is exactly a minus ("-"), curl will instead read the contents from stdin.</p>
<p>The file format of the file to read cookies from should be plain HTTP headers (Set-Cookie style) or the Netscape/Mozilla cookie file format.</p>
<p>The file specified with <code>-b, --cookie</code> is only used as input. No cookies will be written to the file. To store cookies, use the <code>-c, --cookie-jar</code> option.</p>
<p>If you use the Set-Cookie file format and do not specify a domain then the cookie is not sent since the domain will never match. To address this, set a domain in Set-Cookie line (doing that will include sub-domains) or preferably: use the Netscape format.</p>
<p>This option can be used multiple times.</p>
<p>Users often want to both read cookies from a file and write updated cookies back to a file, so using both <code>-b, --cookie</code> and <code>-c, --cookie-jar</code> in the same command line is common.</p>
<p>Examples:</p>
<pre><code> curl -b cookiefile <a href="https://example.com">https://example.com</a>
 curl -b cookiefile -c cookiefile <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-c, --cookie-jar</code> and <code>-j, --junk-session-cookies</code>.</p>
<ul>
<li><p>When used in conjunction with the <code>-o, --output</code> option, curl will create the necessary local directory hierarchy as needed. This option creates the directories mentioned with the <code>-o, --output</code> option, nothing else. If the --output file name uses no directory, or if the directories it mentions already exist, no directories will be created.</p></li>
</ul>
<p>Created dirs are made with mode 0750 on unix style file systems.</p>
<p>To create remote directories when using FTP or SFTP, try <code>--ftp-create-dirs</code>.</p>
<p>Example:</p>
<pre><code> curl --create-dirs --output local/dir/file <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ftp-create-dirs</code> and <code>--output-dir</code>.</p>
<ul>
<li><p>(SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.</p></li>
</ul>
<p>This option takes an octal number as argument.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --create-file-mode 0777 -T localfile <a href="sftp://example.com/new">sftp://example.com/new</a></code></pre>
<p>See also <code>--ftp-create-dirs</code>. Added in 7.75.0.</p>
<ul>
<li><p>(FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).</p></li>
</ul>
<p>(SMTP added in 7.40.0)</p>
<p>Example:</p>
<pre><code> curl --crlf -T file <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>-B, --use-ascii</code>.</p>
<ul>
<li><p>(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --crlfile rejects.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--cacert</code> and <code>--capath</code>.</p>
<ul>
<li><p>(TLS) Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1. Multiple algorithms can be provided by separating them with ":" (e.g. "X25519:P-521"). The parameter is available identically in the "openssl s_client/s_server" utilities.</p></li>
</ul>
<p><code>--curves</code> allows a OpenSSL powered curl to make SSL-connections with exactly the (EC) curve requested by the client, avoiding nontransparent client/server negotiations.</p>
<p>If this option is set, the default curves list built into openssl will be ignored.</p>
<p>Example:</p>
<pre><code> curl --curves X25519 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ciphers</code>. Added in 7.73.0.</p>
<ul>
<li><p>(HTTP) This is just an alias for <code>-d, --data</code>.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --data-ascii @file <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--data-binary</code>, <code>--data-raw</code> and <code>--data-urlencode</code>.</p>
<ul>
<li><p>(HTTP) This posts data exactly as specified with no extra processing whatsoever.</p></li>
</ul>
<p>If you start the data with the letter @, the rest should be a filename. Data is posted in a similar manner as <code>-d, --data</code> does, except that newlines and carriage returns are preserved and conversions are never done.</p>
<p>Like <code>-d, --data</code> the default content-type sent to the server is application/x-www-form-urlencoded. If you want the data to be treated as arbitrary binary data by the server then set the content-type to octet-stream: -H "Content-Type: application/octet-stream".</p>
<p>If this option is used several times, the ones following the first will append data as described in <code>-d, --data</code>.</p>
<p>Example:</p>
<pre><code> curl --data-binary @filename <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--data-ascii</code>.</p>
<ul>
<li><p>(HTTP) This posts data similarly to <code>-d, --data</code> but without the special interpretation of the @ character.</p></li>
</ul>
<p>Examples:</p>
<pre><code> curl --data-raw "hello" <a href="https://example.com">https://example.com</a>
 curl --data-raw "@at@at@" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-d, --data</code>. Added in 7.43.0.</p>
<ul>
<li><p>(HTTP) This posts data, similar to the other <code>-d, --data</code> options with the exception that this performs URL-encoding.</p></li>
</ul>
<p>To be CGI-compliant, the &lt;data&gt; part should begin with a <code>name</code> followed by a separator and a content specification. The &lt;data&gt; part can be passed to curl using one of the following syntaxes:</p>
<blockquote>
<ul>
<li><p>This will make curl URL-encode the content and pass that on. Just be careful so that the content does not contain any = or @ symbols, as that will then make the syntax match one of the other cases below!</p></li>
<li><p>This will make curl URL-encode the content and pass that on. The preceding = symbol is not included in the data.</p></li>
<li><p>This will make curl URL-encode the content part and pass that on. Note that the name part is expected to be URL-encoded already.</p></li>
</ul>
<ol class="example" type="1">
<li><p>This will make curl load data from the given file (including any newlines), URL-encode that data and pass it on in the POST.</p></li>
</ol>
<ul>
<li><p>This will make curl load data from the given file (including any newlines), URL-encode that data and pass it on in the POST. The name part gets an equal sign appended, resulting in <code>name=urlencoded-file-content</code>. Note that the name is expected to be URL-encoded already.</p></li>
</ul>
</blockquote>
<p>Examples:</p>
<pre><code> curl --data-urlencode name=val <a href="https://example.com">https://example.com</a>
 curl --data-urlencode =encodethis <a href="https://example.com">https://example.com</a>
 curl --data-urlencode name@file <a href="https://example.com">https://example.com</a>
 curl --data-urlencode @fileonly <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-d, --data</code> and <code>--data-raw</code>.</p>
<ul>
<li><p>(HTTP MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button. This will cause curl to pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to <code>-F, --form</code>.</p></li>
</ul>
<p><code>--data-raw</code> is almost the same but does not have a special interpretation of the @ character. To post data purely binary, you should instead use the <code>--data-binary</code> option. To URL-encode the value of a form field you may use <code>--data-urlencode</code>.</p>
<p>If any of these options is used more than once on the same command line, the data pieces specified will be merged with a separating &amp;-symbol. Thus, using '-d name=daniel -d skill=lousy' would generate a post chunk that looks like 'name=daniel&amp;skill=lousy'.</p>
<p>If you start the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to read the data from stdin. Posting data from a file named 'foobar' would thus be done with <code>-d, --data</code> @foobar. When <code>-d, --data</code> is told to read from a file like that, carriage returns and newlines will be stripped out. If you do not want the @ character to have a special interpretation use <code>--data-raw</code> instead.</p>
<p>Examples:</p>
<pre><code> curl -d "name=curl" <a href="https://example.com">https://example.com</a>
 curl -d "name=curl" -d "tool=cmdline" <a href="https://example.com">https://example.com</a>
 curl -d @filename <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--data-binary</code>, <code>--data-urlencode</code> and <code>--data-raw</code>. This option overrides <code>-F, --form</code> and <code>-I, --head</code> and <code>-T, --upload-file</code>.</p>
<ul>
<li><p>(GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.</p>
<ul>
<li><p>Do not allow any delegation.</p></li>
<li><p>Delegates if and only if the OK-AS-DELEGATE flag is set in the Kerberos service ticket, which is a matter of realm policy.</p></li>
<li><p>Unconditionally allow the server to delegate.</p></li>
</ul></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --delegation "none" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-k, --insecure</code> and <code>--ssl</code>.</p>
<ul>
<li><p>(HTTP) Enables HTTP Digest authentication. This is an authentication scheme that prevents the password from being sent over the wire in clear text. Use this in combination with the normal <code>-u, --user</code> option to set user name and password.</p></li>
</ul>
<p>If this option is used several times, only the first one is used.</p>
<p>Example:</p>
<pre><code> curl -u name:password --digest <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-u, --user</code>, <code>--proxy-digest</code> and <code>--anyauth</code>. This option overrides <code>--basic</code> and <code>--ntlm</code> and <code>--negotiate</code>.</p>
<ul>
<li><p>(FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers. Curl will normally always first attempt to use EPRT, then LPRT before using PORT, but with this option, it will use PORT right away. EPRT and LPRT are extensions to the original FTP protocol, and may not work on all servers, but they enable more functionality in a better way than the traditional PORT command.</p></li>
</ul>
<p>--eprt can be used to explicitly enable EPRT again and --no-eprt is an alias for <code>--disable-eprt</code>.</p>
<p>If the server is accessed using IPv6, this option will have no effect as EPRT is necessary then.</p>
<p>Disabling EPRT only changes the active behavior. If you want to switch to passive mode you need to not use <code>-P, --ftp-port</code> or force it with <code>--ftp-pasv</code>.</p>
<p>Example:</p>
<pre><code> curl --disable-eprt <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>--disable-epsv</code> and <code>-P, --ftp-port</code>.</p>
<ul>
<li><p>(FTP) Tell curl to disable the use of the EPSV command when doing passive FTP transfers. Curl will normally always first attempt to use EPSV before PASV, but with this option, it will not try using EPSV.</p></li>
</ul>
<p>--epsv can be used to explicitly enable EPSV again and --no-epsv is an alias for <code>--disable-epsv</code>.</p>
<p>If the server is an IPv6 host, this option will have no effect as EPSV is necessary then.</p>
<p>Disabling EPSV only changes the passive behavior. If you want to switch to active mode you need to use <code>-P, --ftp-port</code>.</p>
<p>Example:</p>
<pre><code> curl --disable-epsv <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>--disable-eprt</code> and <code>-P, --ftp-port</code>.</p>
<ul>
<li><p>If used as the first parameter on the command line, the <code>curlrc</code> config file will not be read and used. See the <code>-K, --config</code> for details on the default config file search path.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl -q <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-K, --config</code>.</p>
<ul>
<li><p>(HTTP) This tells curl to exit if passed a url containing a username. This is probably most useful when the URL is being provided at run-time or similar.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --disallow-username-in-url <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proto</code>. Added in 7.61.0.</p>
<ul>
<li><p>(DNS) Tell curl to send outgoing DNS requests through &lt;interface&gt;. This option is a counterpart to <code>--interface</code> (which does not affect DNS). The supplied string must be an interface name (not an address).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --dns-interface eth0 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--dns-ipv4-addr</code> and <code>--dns-ipv6-addr</code>. <code>--dns-interface</code> requires that the underlying libcurl was built to support c-ares. Added in 7.33.0.</p>
<ul>
<li><p>(DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv4 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv4 address.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --dns-ipv4-addr 10.1.2.3 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--dns-interface</code> and <code>--dns-ipv6-addr</code>. <code>--dns-ipv4-addr</code> requires that the underlying libcurl was built to support c-ares. Added in 7.33.0.</p>
<ul>
<li><p>(DNS) Tell curl to bind to &lt;ip-address&gt; when making IPv6 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv6 address.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --dns-ipv6-addr 2a04:4e42::561 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--dns-interface</code> and <code>--dns-ipv4-addr</code>. <code>--dns-ipv6-addr</code> requires that the underlying libcurl was built to support c-ares. Added in 7.33.0.</p>
<ul>
<li><p>Set the list of DNS servers to be used instead of the system default. The list of IP addresses should be separated with commas. Port numbers may also optionally be given as <code>:&lt;port-number&gt;</code> after each IP address.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --dns-servers 192.168.0.1,192.168.0.2 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--dns-interface</code> and <code>--dns-ipv4-addr</code>. <code>--dns-servers</code> requires that the underlying libcurl was built to support c-ares. Added in 7.33.0.</p>
<ul>
<li><p>Same as <code>--cert-status</code> but used for DoH (DNS-over-HTTPS).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --doh-cert-status --doh-url https://doh.example <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--doh-insecure</code>. Added in 7.76.0.</p>
<ul>
<li><p>Same as <code>-k, --insecure</code> but used for DoH (DNS-over-HTTPS).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --doh-insecure --doh-url https://doh.example <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--doh-url</code>. Added in 7.76.0.</p>
<ul>
<li><p>Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism. The URL must be HTTPS.</p></li>
</ul>
<p>Some SSL options that you set for your transfer will apply to DoH since the name lookups take place over SSL. However, the certificate verification settings are not inherited and can be controlled separately via <code>--doh-insecure</code> and <code>--doh-cert-status</code>.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --doh-url https://doh.example <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--doh-insecure</code>. Added in 7.62.0.</p>
<ul>
<li><p>(HTTP FTP) Write the received protocol headers to the specified file. If no headers are received, the use of this option will create an empty file.</p></li>
</ul>
<p>When used in FTP, the FTP server response lines are considered being "headers" and thus are saved there.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --dump-header store.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-o, --output</code>.</p>
<ul>
<li><p>(TLS) Specify the path name to the Entropy Gathering Daemon socket. The socket is used to seed the random engine for SSL connections.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --egd-file /random/here <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--random-file</code>.</p>
<ul>
<li><p>(TLS) Select the OpenSSL crypto engine to use for cipher operations. Use <code>--engine</code> list to print a list of build-time supported engines. Note that not all (and possibly none) of the engines may be available at run-time.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --engine flavor <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ciphers</code> and <code>--curves</code>.</p>
<ul>
<li><p>(HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.</p></li>
</ul>
<p>For correct results, make sure that the specified file contains only a single line with the desired ETag. An empty file is parsed as an empty ETag.</p>
<p>Use the option <code>--etag-save</code> to first save the ETag from a response, and then use this option to compare against the saved ETag in a subsequent request.</p>
<p>Example:</p>
<pre><code> curl --etag-compare etag.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--etag-save</code> and <code>-z, --time-cond</code>. Added in 7.68.0.</p>
<ul>
<li><p>(HTTP) This option saves an HTTP ETag to the specified file. An ETag is a caching related header, usually returned in a response.</p></li>
</ul>
<p>If no ETag is sent by the server, an empty file is created.</p>
<p>Example:</p>
<pre><code> curl --etag-save storetag.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--etag-compare</code>. Added in 7.68.0.</p>
<ul>
<li><p>(HTTP) Maximum time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request. By default curl will wait one second. This option accepts decimal values! When curl stops waiting, it will continue as if the response has been received.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --expect100-timeout 2.5 -T file <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--connect-timeout</code>. Added in 7.47.0.</p>
<ul>
<li><p>Fail and exit on the first detected transfer error.</p></li>
</ul>
<p>When curl is used to do multiple transfers on the command line, it will attempt to operate on each given URL, one by one. By default, it will ignore errors if there are more URLs given and the last URL's success will determine the error code curl returns. So early failures will be "hidden" by subsequent successful transfers.</p>
<p>Using this option, curl will instead return an error on the first transfer that fails, independent of the amount of URLs that are given on the command line. This way, no transfer failures go undetected by scripts and similar.</p>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>This option does not imply <code>-f, --fail</code>, which causes transfers to fail due to the server's HTTP status code. You can combine the two options, however note <code>-f, --fail</code> is not global and is therefore contained by <code>-:, --next</code>.</p>
<p>Example:</p>
<pre><code> curl --fail-early <a href="https://example.com">https://example.com</a> https://two.example</code></pre>
<p>See also <code>-f, --fail</code> and <code>--fail-with-body</code>. Added in 7.52.0.</p>
<ul>
<li><p>(HTTP) Return an error on server errors where the HTTP response code is 400 or greater). In normal cases when an HTTP server fails to deliver a document, it returns an HTML document stating so (which often also describes why and more). This flag will still allow curl to output and save that content but also to return error 22.</p></li>
</ul>
<p>This is an alternative option to <code>-f, --fail</code> which makes curl fail for the same circumstances but without saving the content.</p>
<p>Example:</p>
<pre><code> curl --fail-with-body <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-f, --fail</code>. Added in 7.76.0.</p>
<ul>
<li><p>(HTTP) Fail silently (no output at all) on server errors. This is mostly done to enable scripts etc to better deal with failed attempts. In normal cases when an HTTP server fails to deliver a document, it returns an HTML document stating so (which often also describes why and more). This flag will prevent curl from outputting that and return error 22.</p></li>
</ul>
<p>This method is not fail-safe and there are occasions where non-successful response codes will slip through, especially when authentication is involved (response codes 401 and 407).</p>
<p>Example:</p>
<pre><code> curl --fail <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--fail-with-body</code>.</p>
<ul>
<li><p>(TLS) Tells curl to use false start during the TLS handshake. False start is a mode where a TLS client will start sending application data before verifying the server's Finished message, thus saving a round trip when performing a full handshake.</p></li>
</ul>
<p>This is currently only implemented in the NSS and Secure Transport (on iOS 7.0 or later, or OS X 10.9 or later) backends.</p>
<p>Example:</p>
<pre><code> curl --false-start <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tcp-fastopen</code>. Added in 7.42.0.</p>
<ul>
<li><p>(HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --form-escape --form 'field\name=curl' 'file=@load"this' <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-F, --form</code>. Added in 7.81.0.</p>
<ul>
<li><p>(HTTP SMTP IMAP) Similar to <code>-F, --form</code> except that the value string for the named parameter is used literally. Leading '@' and '&lt;' characters, and the ';type=' string in the value have no special meaning. Use this in preference to <code>-F, --form</code> if there's any possibility that the string value may accidentally trigger the '@' or '&lt;' features of <code>-F, --form</code>.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --form-string "data" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-F, --form</code>.</p>
<ul>
<li><p>(HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button. This causes curl to POST data using the Content-Type multipart/form-data according to RFC 2388.</p></li>
</ul>
<p>For SMTP and IMAP protocols, this is the means to compose a multipart mail message to transmit.</p>
<p>This enables uploading of binary files etc. To force the 'content' part to be a file, prefix the file name with an @ sign. To just get the content part from a file, prefix the file name with the symbol &lt;. The difference between @ and &lt; is then that @ makes a file get attached in the post as a file upload, while the &lt; makes a text field and just get the contents for that text field from a file.</p>
<p>Tell curl to read content from stdin instead of a file by using - as filename. This goes for both @ and &lt; constructs. When stdin is used, the contents is buffered in memory first by curl to determine its size and allow a possible resend. Defining a part's data from a named non-regular file (such as a named pipe or similar) is unfortunately not subject to buffering and will be effectively read at transmission time; since the full size is unknown before the transfer starts, such data is sent as chunks by HTTP and rejected by IMAP.</p>
<p>Example: send an image to an HTTP server, where 'profile' is the name of the form-field to which the file portrait.jpg will be the input:</p>
<pre><code> curl -F <a href="mailto:profile=@portrait.jpg">profile=@portrait.jpg</a> <a href="https://example.com/upload.cgi">https://example.com/upload.cgi</a></code></pre>
<p>Example: send your name and shoe size in two text fields to the server:</p>
<pre><code> curl -F name=John -F shoesize=11 <a href="https://example.com/">https://example.com/</a></code></pre>
<p>Example: send your essay in a text field to the server. Send it as a plain text field, but get the contents for it from a local file:</p>
<pre><code> curl -F "story=&lt;hugefile.txt" <a href="https://example.com/">https://example.com/</a></code></pre>
<p>You can also tell curl what Content-Type to use by using 'type=', in a manner similar to:</p>
<pre><code> curl -F "<a href="mailto:web=@index.html">web=@index.html</a>;type=text/html" <a href="http://example.com">example.com</a></code></pre>
<p>or</p>
<pre><code> curl -F "name=daniel;type=text/foo" <a href="http://example.com">example.com</a></code></pre>
<p>You can also explicitly change the name field of a file upload part by setting filename=, like this:</p>
<pre><code> curl -F "file=@localfile;filename=nameinpost" <a href="http://example.com">example.com</a></code></pre>
<p>If filename/path contains ',' or ';', it must be quoted by double-quotes like:</p>
<pre><code> curl -F "file=@\"local,file\";filename=\"name;in;post\"" <a href="http://example.com">example.com</a></code></pre>
<p>or</p>
<pre><code> curl -F 'file=@"local,file";filename="name;in;post"' <a href="http://example.com">example.com</a></code></pre>
<p>Note that if a filename/path is quoted by double-quotes, any double-quote or backslash within the filename must be escaped by backslash.</p>
<p>Quoting must also be applied to non-file data if it contains semicolons, leading/trailing spaces or leading double quotes:</p>
<pre><code> curl -F 'colors="red; green; blue";type=text/x-myapp' <a href="http://example.com">example.com</a></code></pre>
<p>You can add custom headers to the field by setting headers=, like</p>
<pre><code>  curl -F "submit=OK;headers=\"X-submit-type: OK\"" <a href="http://example.com">example.com</a></code></pre>
<p>or</p>
<pre><code>  curl -F "submit=OK;headers=@headerfile" <a href="http://example.com">example.com</a></code></pre>
<p>The headers= keyword may appear more that once and above notes about quoting apply. When headers are read from a file, Empty lines and lines starting with '#' are comments and ignored; each header can be folded by splitting between two words and starting the continuation line with a space; embedded carriage-returns and trailing spaces are stripped. Here is an example of a header file contents:</p>
<pre><code>  # This file contain two headers.
  X-header-1: this is a header</code></pre>
<pre><code>  # The following header is folded.
  X-header-2: this is
   another header</code></pre>
<p>To support sending multipart mail messages, the syntax is extended as follows:<br/>
- name can be omitted: the equal sign is the first character of the argument,<br/>
- if data starts with '(', this signals to start a new multipart: it can be followed by a content type specification.<br/>
- a multipart can be terminated with a '=)' argument.</p>
<p>Example: the following command sends an SMTP mime email consisting in an inline part in two alternative formats: plain text and HTML. It attaches a text file:</p>
<pre><code> curl -F '=(;type=multipart/alternative'       -F '=plain text message'       -F '= &lt;body&gt;HTML message&lt;/body&gt;;type=text/html'       -F '=)' -F '=@textfile.txt' ...  smtp://<a href="http://example.com">example.com</a></code></pre>
<p>Data can be encoded for transfer using encoder=. Available encodings are <code>binary</code> and <code>8bit</code> that do nothing else than adding the corresponding Content-Transfer-Encoding header, <code>7bit</code> that only rejects 8-bit characters with a transfer error, <code>quoted-printable</code> and <code>base64</code> that encodes data according to the corresponding schemes, limiting lines length to 76 characters.</p>
<p>Example: send multipart mail with a quoted-printable text message and a base64 attached file:</p>
<pre><code> curl -F '=text message;encoder=quoted-printable'       -F '=@localfile;encoder=base64' ... smtp://<a href="http://example.com">example.com</a></code></pre>
<p>See further examples and details in the MANUAL.</p>
<p>This option can be used multiple times.</p>
<p>Example:</p>
<pre><code> curl --form "name=curl" --form "file=@loadthis" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-d, --data</code>, <code>--form-string</code> and <code>--form-escape</code>. This option overrides <code>-d, --data</code> and <code>-I, --head</code> and <code>-T, --upload-file</code>.</p>
<ul>
<li><p>(FTP) When an FTP server asks for "account data" after user name and password has been provided, this data is sent off using the ACCT command.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --ftp-account "mr.robot" <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>-u, --user</code>.</p>
<ul>
<li><p>(FTP) If authenticating with the USER and PASS commands fails, send this command. When connecting to Tumbleweed's Secure Transport server over FTPS using a client certificate, using "SITE AUTH" will tell the server to retrieve the username from the certificate.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ftp-alternative-to-user "U53r" <a href="ftp://example.com">ftp://example.com</a></code></pre>
<p>See also <code>--ftp-account</code> and <code>-u, --user</code>.</p>
<ul>
<li><p>(FTP SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail. Using this option, curl will instead attempt to create missing directories.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ftp-create-dirs -T file <a href="ftp://example.com/remote/path/file">ftp://example.com/remote/path/file</a></code></pre>
<p>See also <code>--create-dirs</code>.</p>
<ul>
<li><p>(FTP) Control what method curl should use to reach a file on an FTP(S) server. The method argument should be one of the following alternatives:</p>
<ul>
<li><p>curl does a single CWD operation for each path part in the given URL. For deep hierarchies this means many commands. This is how RFC 1738 says it should be done. This is the default but the slowest behavior.</p></li>
<li><p>curl does no CWD at all. curl will do SIZE, RETR, STOR etc and give a full path to the server for all these commands. This is the fastest behavior.</p></li>
<li><p>curl does one CWD with the full target directory and then operates on the file "normally" (like in the multicwd case). This is somewhat more standards compliant than 'nocwd' but without the full penalty of 'multicwd'.</p></li>
</ul></li>
</ul>
<p>Examples:</p>
<pre><code> curl --ftp-method multicwd <a href="ftp://example.com/dir1/dir2/file">ftp://example.com/dir1/dir2/file</a>
 curl --ftp-method nocwd <a href="ftp://example.com/dir1/dir2/file">ftp://example.com/dir1/dir2/file</a>
 curl --ftp-method singlecwd <a href="ftp://example.com/dir1/dir2/file">ftp://example.com/dir1/dir2/file</a></code></pre>
<p>See also <code>-l, --list-only</code>.</p>
<ul>
<li><p>(FTP) Use passive mode for the data connection. Passive is the internal default behavior, but using this option can be used to override a previous <code>-P, --ftp-port</code> option.</p></li>
</ul>
<p>If this option is used several times, only the first one is used. Undoing an enforced passive really is not doable but you must then instead enforce the correct <code>-P, --ftp-port</code> again.</p>
<p>Passive mode means that curl will try the EPSV command first and then PASV, unless <code>--disable-epsv</code> is used.</p>
<p>Example:</p>
<pre><code> curl --ftp-pasv <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>--disable-epsv</code>.</p>
<ul>
<li><p>(FTP) Reverses the default initiator/listener roles when connecting with FTP. This option makes curl use active mode. curl then tells the server to connect back to the client's specified address and port, while passive mode asks the server to setup an IP address and port for it to connect to. &lt;address&gt; should be one of:</p>
<ul>
<li><p>e.g. "eth0" to specify which interface's IP address you want to use (Unix only)</p></li>
<li><p>e.g. "192.168.10.1" to specify the exact IP address</p></li>
<li><p>e.g. "my.host.domain" to specify the machine</p></li>
<li><p>make curl pick the same IP address that is already used for the control connection</p></li>
</ul></li>
</ul>
<p>If this option is used several times, the last one will be used. Disable the use of PORT with <code>--ftp-pasv</code>. Disable the attempt to use the EPRT command instead of PORT by using <code>--disable-eprt</code>. EPRT is really PORT++.</p>
<p>You can also append ":[start]-[end]" to the right of the address, to tell curl what TCP port range to use. That means you specify a port range, from a lower to a higher number. A single number works as well, but do note that it increases the risk of failure since the port may not be available.</p>
<p>Examples:</p>
<pre><code> curl -P - <a href="ftp:/example.com">ftp:/example.com</a>
 curl -P eth0 <a href="ftp:/example.com">ftp:/example.com</a>
 curl -P 192.168.0.2 <a href="ftp:/example.com">ftp:/example.com</a></code></pre>
<p>See also <code>--ftp-pasv</code> and <code>--disable-eprt</code>.</p>
<ul>
<li><p>(FTP) Tell curl to send a PRET command before PASV (and EPSV). Certain FTP servers, mainly drftpd, require this non-standard command for directory listings as well as up and downloads in PASV mode.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ftp-pret <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>-P, --ftp-port</code> and <code>--ftp-pasv</code>.</p>
<ul>
<li><p>(FTP) Tell curl to not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection. Instead curl will re-use the same IP address it already uses for the control connection.</p></li>
</ul>
<p>Since curl 7.74.0 this option is enabled by default.</p>
<p>This option has no effect if PORT, EPRT or EPSV is used instead of PASV.</p>
<p>Example:</p>
<pre><code> curl --ftp-skip-pasv-ip <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>--ftp-pasv</code>.</p>
<ul>
<li><p>(FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the server. The active mode initiates the shutdown and waits for a reply from the server.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ftp-ssl-ccc-mode active --ftp-ssl-ccc ftps://<a href="http://example.com/">example.com/</a></code></pre>
<p>See also <code>--ftp-ssl-ccc</code>.</p>
<ul>
<li><p>(FTP) Use CCC (Clear Command Channel) Shuts down the SSL/TLS layer after authenticating. The rest of the control channel communication will be unencrypted. This allows NAT routers to follow the FTP transaction. The default mode is passive.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ftp-ssl-ccc ftps://<a href="http://example.com/">example.com/</a></code></pre>
<p>See also <code>--ssl</code> and <code>--ftp-ssl-ccc-mode</code>.</p>
<ul>
<li><p>(FTP) Require SSL/TLS for the FTP login, clear for transfer. Allows secure authentication, but non-encrypted data transfers for efficiency. Fails the transfer if the server does not support SSL/TLS.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ftp-ssl-control <a href="ftp://example.com">ftp://example.com</a></code></pre>
<p>See also <code>--ssl</code>.</p>
<ul>
<li><p>When used, this option will make all data specified with <code>-d, --data</code>, <code>--data-binary</code> or <code>--data-urlencode</code> to be used in an HTTP GET request instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator.</p></li>
</ul>
<p>If used in combination with <code>-I, --head</code>, the POST data will instead be appended to the URL with a HEAD request.</p>
<p>If this option is used several times, only the first one is used. This is because undoing a GET does not make sense, but you should then instead enforce the alternative method you prefer.</p>
<p>Examples:</p>
<pre><code> curl --get <a href="https://example.com">https://example.com</a>
 curl --get -d "tool=curl" -d "age=old" <a href="https://example.com">https://example.com</a>
 curl --get -I -d "tool=curl" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-d, --data</code> and <code>-X, --request</code>.</p>
<ul>
<li><p>This option switches off the "URL globbing parser". When you set this option, you can specify URLs that contain the letters {}[] without having curl itself interpret them. Note that these letters are not normal legal URL contents but they should be encoded according to the URI standard.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl -g "<a href="https://example.com/">https://example.com/</a>{[]}}}}"</code></pre>
<p>See also <code>-K, --config</code> and <code>-q, --disable</code>.</p>
<ul>
<li><p>Happy Eyeballs is an algorithm that attempts to connect to both IPv4 and IPv6 addresses for dual-stack hosts, giving IPv6 a head-start of the specified number of milliseconds. If the IPv6 address cannot be connected to within that time, then a connection attempt is made to the IPv4 address in parallel. The first connection to be established is the one that is used.</p></li>
</ul>
<p>The range of suggested useful values is limited. Happy Eyeballs RFC 6555 says "It is RECOMMENDED that connection attempts be paced 150-250 ms apart to balance human factors against network load." libcurl currently defaults to 200 ms. Firefox and Chrome currently default to 300 ms.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --happy-eyeballs-timeout-ms 500 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-m, --max-time</code> and <code>--connect-timeout</code>. Added in 7.59.0.</p>
<ul>
<li><p>(HTTP) Send a HAProxy PROXY protocol v1 header at the beginning of the connection. This is used by some load balancers and reverse proxies to indicate the client's true IP address and port.</p></li>
</ul>
<p>This option is primarily useful when sending test requests to a service that expects this header.</p>
<p>Example:</p>
<pre><code> curl --haproxy-protocol <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>. Added in 7.60.0.</p>
<ul>
<li><p>(HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing but the header of a document. When used on an FTP or FILE file, curl displays the file size and last modification time only.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl -I <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-G, --get</code>, <code>-v, --verbose</code> and <code>--trace-ascii</code>.</p>
<ul>
<li><p>(HTTP) Extra header to include in the request when sending HTTP to a server. You may specify any number of extra headers. Note that if you should add a custom header that has the same name as one of the internal ones curl would use, your externally set header will be used instead of the internal one. This allows you to make even trickier stuff than curl would normally do. You should not replace internally set headers without knowing perfectly well what you are doing. Remove an internal header by giving a replacement without content on the right side of the colon, as in: -H "Host:". If you send the custom header with no-value then its header must be terminated with a semicolon, such as -H "X-Custom-Header;" to send "X-Custom-Header:".</p></li>
</ul>
<p>curl will make sure that each header you add/replace is sent with the proper end-of-line marker, you should thus <strong>not</strong> add that as a part of the header content: do not add newlines or carriage returns, they will only mess things up for you.</p>
<p>This option can take an argument in @filename style, which then adds a header for each line in the input file. Using @- will make curl read the header file from stdin. Added in 7.55.0.</p>
<p>You need <code>--proxy-header</code> to send custom headers intended for a HTTP proxy. Added in 7.37.0.</p>
<p>Passing on a "Transfer-Encoding: chunked" header when doing a HTTP request with a request body, will make curl send the data using chunked encoding.</p>
<p><strong>WARNING</strong>: headers set with this option will be set in all requests - even after redirects are followed, like when told with <code>-L, --location</code>. This can lead to the header being sent to other hosts than the original host, so sensitive headers should be used with caution combined with following redirects.</p>
<p>This option can be used multiple times to add/replace/remove multiple headers.</p>
<p>Examples:</p>
<pre><code> curl -H "X-First-Name: Joe" <a href="https://example.com">https://example.com</a>
 curl -H "User-Agent: yes-please/2000" <a href="https://example.com">https://example.com</a>
 curl -H "Host:" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-A, --user-agent</code> and <code>-e, --referer</code>.</p>
<ul>
<li><p>Usage help. This lists all commands of the &lt;category&gt;. If no arg was provided, curl will display the most important command line arguments. If the argument "all" was provided, curl will display all options available. If the argument "category" was provided, curl will display all categories and their meanings.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --help all</code></pre>
<p>See also <code>-v, --verbose</code>.</p>
<ul>
<li><p>(SFTP SCP) Pass a string containing 32 hexadecimal digits. The string should be the 128 bit MD5 checksum of the remote host's public key, curl will refuse the connection with the host unless the md5sums match.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --hostpubmd5 e5c1c49020640a5ab0f2034854c321a8 <a href="sftp://example.com/">sftp://example.com/</a></code></pre>
<p>See also <code>--hostpubsha256</code>.</p>
<ul>
<li><p>(SFTP SCP) Pass a string containing a Base64-encoded SHA256 hash of the remote host's public key. Curl will refuse the connection with the host unless the hashes match.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --hostpubsha256 NDVkMTQxMGQ1ODdmMjQ3MjczYjAyOTY5MmRkMjVmNDQ= <a href="sftp://example.com/">sftp://example.com/</a></code></pre>
<p>See also <code>--hostpubmd5</code>. Added in 7.80.0.</p>
<ul>
<li><p>(HTTPS) This option enables HSTS for the transfer. If the file name points to an existing HSTS cache file, that will be used. After a completed transfer, the cache will be saved to the file name again if it has been modified.</p></li>
</ul>
<p>Specify a "" file name (zero length) to avoid loading/saving and make curl just handle HSTS in memory.</p>
<p>If this option is used several times, curl will load contents from all the files but the last one will be used for saving.</p>
<p>Example:</p>
<pre><code> curl --hsts cache.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proto</code>. Added in 7.74.0.</p>
<ul>
<li><p>(HTTP) Tells curl to be fine with HTTP version 0.9 response.</p></li>
</ul>
<p>HTTP/0.9 is a completely headerless response and therefore you can also connect with this to non-HTTP servers and still get a response since curl will simply transparently downgrade - if allowed.</p>
<p>Since curl 7.66.0, HTTP/0.9 is disabled by default.</p>
<p>Example:</p>
<pre><code> curl --http0.9 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code>, <code>--http2</code> and <code>--http3</code>. Added in 7.64.0.</p>
<ul>
<li><p>(HTTP) Tells curl to use HTTP version 1.0 instead of using its internally preferred HTTP version.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --http1.0 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http0.9</code> and <code>--http1.1</code>. This option overrides <code>--http1.1</code> and <code>--http2</code>.</p>
<ul>
<li><p>(HTTP) Tells curl to use HTTP version 1.1.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --http1.1 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http0.9</code>. This option overrides <code>-0, --http1.0</code> and <code>--http2</code>. Added in 7.33.0.</p>
<ul>
<li><p>(HTTP) Tells curl to issue its non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade. It requires prior knowledge that the server supports HTTP/2 straight away. HTTPS requests will still do HTTP/2 the standard way with negotiated protocol version in the TLS handshake.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --http2-prior-knowledge <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http2</code> and <code>--http3</code>. <code>--http2-prior-knowledge</code> requires that the underlying libcurl was built to support HTTP/2. This option overrides <code>--http1.1</code> and <code>-0, --http1.0</code> and <code>--http2</code>. Added in 7.49.0.</p>
<ul>
<li><p>(HTTP) Tells curl to use HTTP version 2.</p></li>
</ul>
<p>For HTTPS, this means curl will attempt to negotiate HTTP/2 in the TLS handshake. curl does this by default.</p>
<p>For HTTP, this means curl will attempt to upgrade the request to HTTP/2 using the Upgrade: request header.</p>
<p>Example:</p>
<pre><code> curl --http2 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http3</code>. <code>--http2</code> requires that the underlying libcurl was built to support HTTP/2. This option overrides <code>--http1.1</code> and <code>-0, --http1.0</code> and <code>--http2-prior-knowledge</code>. Added in 7.33.0.</p>
<ul>
<li><p>(HTTP) <strong>WARNING</strong>: this option is experimental. Do not use in production.</p></li>
</ul>
<p>Tells curl to use HTTP version 3 directly to the host and port number used in the URL. A normal HTTP/3 transaction will be done to a host and then get redirected via Alt-Svc, but this option allows a user to circumvent that when you know that the target speaks HTTP/3 on the given host and port.</p>
<p>This option will make curl fail if a QUIC connection cannot be established, it cannot fall back to a lower HTTP version on its own.</p>
<p>Example:</p>
<pre><code> curl --http3 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http2</code>. <code>--http3</code> requires that the underlying libcurl was built to support HTTP/3. This option overrides <code>--http1.1</code> and <code>-0, --http1.0</code> and <code>--http2</code> and <code>--http2-prior-knowledge</code>. Added in 7.66.0.</p>
<ul>
<li><p>(FTP HTTP) For HTTP, Ignore the Content-Length header. This is particularly useful for servers running Apache 1.x, which will report incorrect Content-Length for files larger than 2 gigabytes.</p></li>
</ul>
<p>For FTP (since 7.46.0), skip the RETR command to figure out the size before downloading a file.</p>
<p>This option does not work for HTTP if libcurl was built to use hyper.</p>
<p>Example:</p>
<pre><code> curl --ignore-content-length <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ftp-skip-pasv-ip</code>.</p>
<ul>
<li><p>Include the HTTP response headers in the output. The HTTP response headers can include things like server name, cookies, date of the document, HTTP version and more...</p></li>
</ul>
<p>To view the request headers, consider the <code>-v, --verbose</code> option.</p>
<p>Example:</p>
<pre><code> curl -i <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-v, --verbose</code>.</p>
<ul>
<li><p>(TLS SFTP SCP) By default, every secure connection curl makes is verified to be secure before the transfer takes place. This option makes curl skip the verification step and proceed without checking.</p></li>
</ul>
<p>When this option is not used for protocols using TLS, curl verifies the server's TLS certificate before it continues: that the certificate contains the right name which matches the host name used in the URL and that the certificate has been signed by a CA certificate present in the cert store. See this online resource for further details:</p>
<pre><code> <a href="https://curl.se/docs/sslcerts.html">https://curl.se/docs/sslcerts.html</a></code></pre>
<p>For SFTP and SCP, this option makes curl skip the <code>known_hosts</code> verification. <code>known_hosts</code> is a file normally stored in the user's home directory in the .ssh subdirectory, which contains host names and their public keys.</p>
<p><strong>WARNING</strong>: using this option makes the transfer insecure.</p>
<p>Example:</p>
<pre><code> curl --insecure <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-insecure</code>, <code>--cacert</code> and <code>--capath</code>.</p>
<ul>
<li><p>Perform an operation using a specified interface. You can enter interface name, IP address or host name. An example could look like:</p></li>
</ul>
<pre><code> curl --interface eth0:1 <a href="https://www.example.com/">https://www.example.com/</a></code></pre>
<p>If this option is used several times, the last one will be used.</p>
<p>On Linux it can be used to specify a VRF, but the binary needs to either have CAP_NET_RAW or to be run as root. More information about Linux VRF: <a href="https://www.kernel.org/doc/Documentation/networking/vrf.txt">https://www.kernel.org/doc/Documentation/networking/vrf.txt</a></p>
<p>Example:</p>
<pre><code> curl --interface eth0 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--dns-interface</code>.</p>
<ul>
<li><p>This option tells curl to resolve names to IPv4 addresses only, and not for example try IPv6.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ipv4 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http2</code>. This option overrides <code>-6, --ipv6</code>.</p>
<ul>
<li><p>This option tells curl to resolve names to IPv6 addresses only, and not for example try IPv4.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ipv6 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http2</code>. This option overrides <code>-4, --ipv4</code>.</p>
<ul>
<li><p>(HTTP) When curl is told to read cookies from a given file, this option will make it discard all "session cookies". This will basically have the same effect as if a new session is started. Typical browsers always discard session cookies when they are closed down.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --junk-session-cookies -b cookies.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-b, --cookie</code> and <code>-c, --cookie-jar</code>.</p>
<ul>
<li><p>This option sets the time a connection needs to remain idle before sending keepalive probes and the time between individual keepalive probes. It is currently effective on operating systems offering the TCP_KEEPIDLE and TCP_KEEPINTVL socket options (meaning Linux, recent AIX, HP-UX and more). This option has no effect if <code>--no-keepalive</code> is used.</p></li>
</ul>
<p>If this option is used several times, the last one will be used. If unspecified, the option defaults to 60 seconds.</p>
<p>Example:</p>
<pre><code> curl --keepalive-time 20 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--no-keepalive</code> and <code>-m, --max-time</code>.</p>
<ul>
<li><p>(TLS) Private key file type. Specify which type your <code>--key</code> provided private key is. DER, PEM, and ENG are supported. If not specified, PEM is assumed.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --key-type DER --key here <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--key</code>.</p>
<ul>
<li><p>(TLS SSH) Private key file name. Allows you to provide your private key in this separate file. For SSH, if not specified, curl tries the following candidates in order: '~/.ssh/id_rsa', '~/.ssh/id_dsa', './id_rsa', './id_dsa'.</p></li>
</ul>
<p>If curl is built against OpenSSL library, and the engine pkcs11 is available, then a PKCS#11 URI (RFC 7512) can be used to specify a private key located in a PKCS#11 device. A string beginning with "pkcs11:" will be interpreted as a PKCS#11 URI. If a PKCS#11 URI is provided, then the <code>--engine</code> option will be set as "pkcs11" if none was provided and the <code>--key-type</code> option will be set as "ENG" if none was provided.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --cert certificate --key here <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--key-type</code> and <code>-E, --cert</code>.</p>
<ul>
<li><p>(FTP) Enable Kerberos authentication and use. The level must be entered and should be one of 'clear', 'safe', 'confidential', or 'private'. Should you use a level that is not one of these, 'private' will instead be used.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --krb clear <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>--delegation</code> and <code>--ssl</code>. <code>--krb</code> requires that the underlying libcurl was built to support Kerberos.</p>
<ul>
<li><p>Append this option to any ordinary curl command line, and you will get libcurl-using C source code written to the file that does the equivalent of what your command-line operation does!</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>If this option is used several times, the last given file name will be used.</p>
<p>Example:</p>
<pre><code> curl --libcurl client.c <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-v, --verbose</code>.</p>
<ul>
<li><p>Specify the maximum transfer rate you want curl to use - for both downloads and uploads. This feature is useful if you have a limited pipe and you would like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.</p></li>
</ul>
<p>The given speed is measured in bytes/second, unless a suffix is appended. Appending 'k' or 'K' will count the number as kilobytes, 'm' or 'M' makes it megabytes, while 'g' or 'G' makes it gigabytes. The suffixes (k, M, G, T, P) are 1024 based. For example 1k is 1024. Examples: 200K, 3m and 1G.</p>
<p>The rate limiting logic works on averaging the transfer speed to no more than the set threshold over a period of multiple seconds.</p>
<p>If you also use the <code>-Y, --speed-limit</code> option, that option will take precedence and might cripple the rate-limiting slightly, to help keeping the speed-limit logic working.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl --limit-rate 100K <a href="https://example.com">https://example.com</a>
 curl --limit-rate 1000 <a href="https://example.com">https://example.com</a>
 curl --limit-rate 10M <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-Y, --speed-limit</code> and <code>-y, --speed-time</code>.</p>
<ul>
<li><p>(FTP POP3) (FTP) When listing an FTP directory, this switch forces a name-only view. This is especially useful if the user wants to machine-parse the contents of an FTP directory since the normal directory view does not use a standard look or format. When used like this, the option causes an NLST command to be sent to the server instead of LIST.</p></li>
</ul>
<p>Note: Some FTP servers list only files in their response to NLST; they do not include sub-directories and symbolic links.</p>
<p>(POP3) When retrieving a specific email from POP3, this switch forces a LIST command to be performed instead of RETR. This is particularly useful if the user wants to see if a specific message-id exists on the server and what size it is.</p>
<p>Note: When combined with <code>-X, --request</code>, this option can be used to send a UIDL command instead, so the user may use the email's unique identifier rather than its message-id to make the request.</p>
<p>Example:</p>
<pre><code> curl --list-only <a href="ftp://example.com/dir/">ftp://example.com/dir/</a></code></pre>
<p>See also <code>-Q, --quote</code> and <code>-X, --request</code>.</p>
<ul>
<li><p>Set a preferred single number or range (FROM-TO) of local port numbers to use for the connection(s). Note that port numbers by nature are a scarce resource that will be busy at times so setting this range to something too narrow might cause unnecessary connection setup failures.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --local-port 1000-3000 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-g, --globoff</code>.</p>
<ul>
<li><p>(HTTP) Like <code>-L, --location</code>, but will allow sending the name + password to all hosts that the site may redirect to. This may or may not introduce a security breach if the site redirects you to a site to which you will send your authentication info (which is plaintext in the case of HTTP Basic authentication).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --location-trusted -u user:password <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-u, --user</code>.</p>
<ul>
<li><p>(HTTP) If the server reports that the requested page has moved to a different location (indicated with a Location: header and a 3XX response code), this option will make curl redo the request on the new place. If used together with <code>-i, --include</code> or <code>-I, --head</code>, headers from all requested pages will be shown. When authentication is used, curl only sends its credentials to the initial host. If a redirect takes curl to a different host, it will not be able to intercept the user+password. See also <code>--location-trusted</code> on how to change this. You can limit the amount of redirects to follow by using the <code>--max-redirs</code> option.</p></li>
</ul>
<p>When curl follows a redirect and if the request is a POST, it will send the following request with a GET if the HTTP response was 301, 302, or 303. If the response code was any other 3xx code, curl will re-send the following request using the same unmodified method.</p>
<p>You can tell curl to not change POST requests to GET after a 30x response by using the dedicated options for that: <code>--post301</code>, <code>--post302</code> and <code>--post303</code>.</p>
<p>The method set with <code>-X, --request</code> overrides the method curl would otherwise select to use.</p>
<p>Example:</p>
<pre><code> curl -L <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--resolve</code> and <code>--alt-svc</code>.</p>
<ul>
<li><p>(IMAP POP3 SMTP) Specify the login options to use during server authentication.</p></li>
</ul>
<p>You can use login options to specify protocol specific options that may be used during authentication. At present only IMAP, POP3 and SMTP support login options. For more information about login options please see RFC 2384, RFC 5092 and IETF draft draft-earhart-url-smtp-00.txt</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --login-options 'AUTH=*' imap://<a href="http://example.com">example.com</a></code></pre>
<p>See also <code>-u, --user</code>. Added in 7.34.0.</p>
<ul>
<li><p>(SMTP) Specify a single address. This will be used to specify the authentication address (identity) of a submitted message that is being relayed to another server.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --mail-auth <a href="mailto:user@example.come">user@example.come</a> -T mail smtp://<a href="http://example.com/">example.com/</a></code></pre>
<p>See also <code>--mail-rcpt</code> and <code>--mail-from</code>.</p>
<ul>
<li><p>(SMTP) Specify a single address that the given mail should get sent from.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --mail-from <a href="mailto:user@example.com">user@example.com</a> -T mail smtp://<a href="http://example.com/">example.com/</a></code></pre>
<p>See also <code>--mail-rcpt</code> and <code>--mail-auth</code>.</p>
<ul>
<li><p>(SMTP) When sending data to multiple recipients, by default curl will abort SMTP conversation if at least one of the recipients causes RCPT TO command to return an error.</p></li>
</ul>
<p>The default behavior can be changed by passing <code>--mail-rcpt-allowfails</code> command-line option which will make curl ignore errors and proceed with the remaining valid recipients.</p>
<p>If all recipients trigger RCPT TO failures and this flag is specified, curl will still abort the SMTP conversation and return the error received from to the last RCPT TO command.</p>
<p>Example:</p>
<pre><code> curl --mail-rcpt-allowfails --mail-rcpt <a href="mailto:dest@example.com">dest@example.com</a> smtp://<a href="http://example.com">example.com</a></code></pre>
<p>See also <code>--mail-rcpt</code>. Added in 7.69.0.</p>
<ul>
<li><p>(SMTP) Specify a single email address, user name or mailing list name. Repeat this option several times to send to multiple recipients.</p></li>
</ul>
<p>When performing an address verification (VRFY command), the recipient should be specified as the user name or user name and domain (as per Section 3.5 of RFC5321). (Added in 7.34.0)</p>
<p>When performing a mailing list expand (EXPN command), the recipient should be specified using the mailing list name, such as "Friends" or "London-Office". (Added in 7.34.0)</p>
<p>Example:</p>
<pre><code> curl --mail-rcpt <a href="mailto:user@example.net">user@example.net</a> smtp://<a href="http://example.com">example.com</a></code></pre>
<p>See also <code>--mail-rcpt-allowfails</code>.</p>
<ul>
<li><p>Manual. Display the huge help text.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --manual</code></pre>
<p>See also <code>-v, --verbose</code>, <code>--libcurl</code> and <code>--trace</code>.</p>
<ul>
<li><p>(FTP HTTP MQTT) Specify the maximum size (in bytes) of a file to download. If the file requested is larger than this value, the transfer will not start and curl will return with exit code 63.</p></li>
</ul>
<p>A size modifier may be used. For example, Appending 'k' or 'K' will count the number as kilobytes, 'm' or 'M' makes it megabytes, while 'g' or 'G' makes it gigabytes. Examples: 200K, 3m and 1G. (Added in 7.58.0)</p>
<p><strong>NOTE</strong>: The file size is not always known prior to download, and for such files this option has no effect even if the file transfer ends up being larger than this given limit. Example:</p>
<pre><code> curl --max-filesize 100K <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--limit-rate</code>.</p>
<ul>
<li><p>(HTTP) Set maximum number of redirections to follow. When <code>-L, --location</code> is used, to prevent curl from following too many redirects, by default, the limit is set to 50 redirects. Set this option to -1 to make it unlimited.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --max-redirs 3 --location <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-L, --location</code>.</p>
<ul>
<li><p>Maximum time in seconds that you allow the whole operation to take. This is useful for preventing your batch jobs from hanging for hours due to slow networks or links going down. Since 7.32.0, this option accepts decimal values, but the actual timeout will decrease in accuracy as the specified timeout increases in decimal precision.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl --max-time 10 <a href="https://example.com">https://example.com</a>
 curl --max-time 2.92 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--connect-timeout</code>.</p>
<ul>
<li><p>This option was previously used to specify a metalink resource. Metalink support has been disabled in curl since 7.78.0 for security reasons.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --metalink file <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-Z, --parallel</code>.</p>
<ul>
<li><p>(HTTP) Enables Negotiate (SPNEGO) authentication.</p></li>
</ul>
<p>This option requires a library built with GSS-API or SSPI support. Use <code>-V, --version</code> to see if your curl supports GSS-API/SSPI or SPNEGO.</p>
<p>When using this option, you must also provide a fake <code>-u, --user</code> option to activate the authentication code properly. Sending a '-u :' is enough as the user name and password from the <code>-u, --user</code> option are not actually used.</p>
<p>If this option is used several times, only the first one is used.</p>
<p>Example:</p>
<pre><code> curl --negotiate -u : <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--basic</code>, <code>--ntlm</code>, <code>--anyauth</code> and <code>--proxy-negotiate</code>.</p>
<ul>
<li><p>This option is similar to <code>-n, --netrc</code>, except that you provide the path (absolute or relative) to the netrc file that curl should use. You can only specify one netrc file per invocation. If several <code>--netrc-file</code> options are provided, the last one will be used.</p></li>
</ul>
<p>It will abide by <code>--netrc-optional</code> if specified.</p>
<p>Example:</p>
<pre><code> curl --netrc-file netrc <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-n, --netrc</code>, <code>-u, --user</code> and <code>-K, --config</code>. This option overrides <code>-n, --netrc</code>.</p>
<ul>
<li><p>Similar to <code>-n, --netrc</code>, but this option makes the .netrc usage <strong>optional</strong> and not mandatory as the <code>-n, --netrc</code> option does.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --netrc-optional <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--netrc-file</code>. This option overrides <code>-n, --netrc</code>.</p>
<ul>
<li><p>Makes curl scan the <code>.netrc</code> (<code>_netrc</code> on Windows) file in the user's home directory for login name and password. This is typically used for FTP on Unix. If used with HTTP, curl will enable user authentication. See <code>netrc(5)</code> and <code>ftp(1)</code> for details on the file format. Curl will not complain if that file does not have the right permissions (it should be neither world- nor group-readable). The environment variable "HOME" is used to find the home directory.</p></li>
</ul>
<p>A quick and simple example of how to setup a <code>.netrc</code> to allow curl to FTP to the machine <a href="http://host.domain.com">host.domain.com</a> with user name 'myself' and password 'secret' could look similar to:</p>
<pre><code> machine <a href="http://host.domain.com">host.domain.com</a>
 login myself
 password secret"

Example:
 curl --netrc <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--netrc-file</code>, <code>-K, --config</code> and <code>-u, --user</code>.</p>
<ul>
<li><p>Tells curl to use a separate operation for the following URL and associated options. This allows you to send several URL requests, each with their own specific options, for example, such as different user names or custom requests for each.</p></li>
</ul>
<p><code>-:, --next</code> will reset all local options and only global ones will have their values survive over to the operation following the <code>-:, --next</code> instruction. Global options include <code>-v, --verbose</code>, <code>--trace</code>, <code>--trace-ascii</code> and <code>--fail-early</code>.</p>
<p>For example, you can do both a GET and a POST in a single command line:</p>
<pre><code> curl <a href="http://www1.example.com">www1.example.com</a> --next -d postthis <a href="http://www2.example.com">www2.example.com</a></code></pre>
<p>Examples:</p>
<pre><code> curl <a href="https://example.com">https://example.com</a> --next -d postthis <a href="http://www2.example.com">www2.example.com</a>
 curl -I <a href="https://example.com">https://example.com</a> --next <a href="https://example.net/">https://example.net/</a></code></pre>
<p>See also <code>-Z, --parallel</code> and <code>-K, --config</code>. Added in 7.36.0.</p>
<ul>
<li><p>(HTTPS) Disable the ALPN TLS extension. ALPN is enabled by default if libcurl was built with an SSL library that supports ALPN. ALPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --no-alpn <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--no-npn</code> and <code>--http2</code>. <code>--no-alpn</code> requires that the underlying libcurl was built to support TLS. Added in 7.36.0.</p>
<ul>
<li><p>Disables the buffering of the output stream. In normal work situations, curl will use a standard buffered output stream that will have the effect that it will output the data in chunks, not necessarily exactly when the data arrives. Using this option will disable that buffering.</p></li>
</ul>
<p>Note that this is the negated option name documented. You can thus use --buffer to enforce the buffering.</p>
<p>Example:</p>
<pre><code> curl --no-buffer <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-#, --progress-bar</code>.</p>
<ul>
<li><p>Disables the use of keepalive messages on the TCP connection. curl otherwise enables them by default.</p></li>
</ul>
<p>Note that this is the negated option name documented. You can thus use --keepalive to enforce keepalive.</p>
<p>Example:</p>
<pre><code> curl --no-keepalive <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--keepalive-time</code>.</p>
<ul>
<li><p>(HTTPS) Disable the NPN TLS extension. NPN is enabled by default if libcurl was built with an SSL library that supports NPN. NPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --no-npn <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--no-alpn</code> and <code>--http2</code>. <code>--no-npn</code> requires that the underlying libcurl was built to support TLS. Added in 7.36.0.</p>
<ul>
<li><p>Option to switch off the progress meter output without muting or otherwise affecting warning and informational messages like <code>-s, --silent</code> does.</p></li>
</ul>
<p>Note that this is the negated option name documented. You can thus use --progress-meter to enable the progress meter again.</p>
<p>Example:</p>
<pre><code> curl --no-progress-meter -o store <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-v, --verbose</code> and <code>-s, --silent</code>. Added in 7.67.0.</p>
<ul>
<li><p>(TLS) Disable curl's use of SSL session-ID caching. By default all transfers are done using the cache. Note that while nothing should ever get hurt by attempting to reuse SSL session-IDs, there seem to be broken SSL implementations in the wild that may require you to disable this in order for you to succeed.</p></li>
</ul>
<p>Note that this is the negated option name documented. You can thus use --sessionid to enforce session-ID caching.</p>
<p>Example:</p>
<pre><code> curl --no-sessionid <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-k, --insecure</code>.</p>
<ul>
<li><p>Comma-separated list of hosts for which not to use a proxy, if one is specified. The only wildcard is a single * character, which matches all hosts, and effectively disables the proxy. Each name in this list is matched as either a domain which contains the hostname, or the hostname itself. For example, <a href="http://local.com">local.com</a> would match <a href="http://local.com">local.com</a>, <a href="http://local.com:80">local.com:80</a>, and <a href="http://www.local.com">www.local.com</a>, but not <a href="http://www.notlocal.com">www.notlocal.com</a>.</p></li>
</ul>
<p>Since 7.53.0, This option overrides the environment variables that disable the proxy ('no_proxy' and 'NO_PROXY'). If there's an environment variable disabling a proxy, you can set the noproxy list to "" to override it.</p>
<p>Example:</p>
<pre><code> curl --noproxy "www.example" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>.</p>
<ul>
<li><p>(HTTP) Enables NTLM much in the style <code>--ntlm</code> does, but hand over the authentication to the separate binary ntlmauth application that is executed when needed.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ntlm-wb -u user:password <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ntlm</code> and <code>--proxy-ntlm</code>.</p>
<ul>
<li><p>(HTTP) Enables NTLM authentication. The NTLM authentication method was designed by Microsoft and is used by IIS web servers. It is a proprietary protocol, reverse-engineered by clever people and implemented in curl based on their efforts. This kind of behavior should not be endorsed, you should encourage everyone who uses NTLM to switch to a public and documented authentication method instead, such as Digest.</p></li>
</ul>
<p>If you want to enable NTLM for your proxy authentication, then use <code>--proxy-ntlm</code>.</p>
<p>If this option is used several times, only the first one is used.</p>
<p>Example:</p>
<pre><code> curl --ntlm -u user:password <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-ntlm</code>. <code>--ntlm</code> requires that the underlying libcurl was built to support TLS. This option overrides <code>--basic</code> and <code>--negotiate</code> and <code>--digest</code> and <code>--anyauth</code>.</p>
<ul>
<li><p>(IMAP POP3 SMTP HTTP) Specify the Bearer Token for OAUTH 2.0 server authentication. The Bearer Token is used in conjunction with the user name which can be specified as part of the <code>--url</code> or <code>-u, --user</code> options.</p></li>
</ul>
<p>The Bearer Token and user name are formatted according to RFC 6750.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --oauth2-bearer "mF_9.B5f-4.1JqM" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--basic</code>, <code>--ntlm</code> and <code>--digest</code>. Added in 7.33.0.</p>
<ul>
<li></li>
</ul>
<p>This option specifies the directory in which files should be stored, when <code>-O, --remote-name</code> or <code>-o, --output</code> are used.</p>
<p>The given output directory is used for all URLs and output options on the command line, up until the first <code>-:, --next</code>.</p>
<p>If the specified target directory does not exist, the operation will fail unless <code>--create-dirs</code> is also used.</p>
<p>If this option is used multiple times, the last specified directory will be used.</p>
<p>Example:</p>
<pre><code> curl --output-dir "tmp" -O <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-O, --remote-name</code> and <code>-J, --remote-header-name</code>. Added in 7.73.0.</p>
<ul>
<li><p>Write output to &lt;file&gt; instead of stdout. If you are using {} or [] to fetch multiple documents, you should quote the URL and you can use '#' followed by a number in the &lt;file&gt; specifier. That variable will be replaced with the current string for the URL being fetched. Like in:</p></li>
</ul>
<pre><code> curl "http://{one,two}.example.com" -o "file_#1.txt"</code></pre>
<p>or use several variables like:</p>
<pre><code> curl "http://{site,host}.host[1-5].com" -o "#1_#2"</code></pre>
<p>You may use this option as many times as the number of URLs you have. For example, if you specify two URLs on the same command line, you can use it like this:</p>
<pre><code>  curl -o aa <a href="http://example.com">example.com</a> -o bb <a href="http://example.net">example.net</a></code></pre>
<p>and the order of the -o options and the URLs does not matter, just that the first -o is for the first URL and so on, so the above command line can also be written as</p>
<pre><code>  curl <a href="http://example.com">example.com</a> <a href="http://example.net">example.net</a> -o aa -o bb</code></pre>
<p>See also the <code>--create-dirs</code> option to create the local directories dynamically. Specifying the output as '-' (a single dash) will force the output to be done to stdout.</p>
<p>To suppress response bodies, you can redirect output to /dev/null:</p>
<pre><code>  curl <a href="http://example.com">example.com</a> -o /dev/null</code></pre>
<p>Or for Windows use nul:</p>
<pre><code>  curl <a href="http://example.com">example.com</a> -o nul

Examples:
 curl -o file <a href="https://example.com">https://example.com</a>
 curl "http://{one,two}.example.com" -o "file_#1.txt"
 curl "http://{site,host}.host[1-5].com" -o "#1_#2"
 curl -o file <a href="https://example.com">https://example.com</a> -o file2 <a href="https://example.net">https://example.net</a></code></pre>
<p>See also <code>-O, --remote-name</code>, <code>--remote-name-all</code> and <code>-J, --remote-header-name</code>.</p>
<ul>
<li><p>When doing parallel transfers, this option will instruct curl that it should rather prefer opening up more connections in parallel at once rather than waiting to see if new transfers can be added as multiplexed streams on another connection.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>Example:</p>
<pre><code> curl --parallel-immediate -Z <a href="https://example.com">https://example.com</a> -o file1 <a href="https://example.com">https://example.com</a> -o file2</code></pre>
<p>See also <code>-Z, --parallel</code> and <code>--parallel-max</code>. Added in 7.68.0.</p>
<ul>
<li><p>When asked to do parallel transfers, using <code>-Z, --parallel</code>, this option controls the maximum amount of transfers to do simultaneously.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>The default is 50.</p>
<p>Example:</p>
<pre><code> curl --parallel-max 100 -Z <a href="https://example.com">https://example.com</a> <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>-Z, --parallel</code>. Added in 7.66.0.</p>
<ul>
<li><p>Makes curl perform its transfers in parallel as compared to the regular serial manner.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>Example:</p>
<pre><code> curl --parallel <a href="https://example.com">https://example.com</a> -o file1 <a href="https://example.com">https://example.com</a> -o file2</code></pre>
<p>See also <code>-:, --next</code> and <code>-v, --verbose</code>. Added in 7.66.0.</p>
<ul>
<li><p>(SSH TLS) Passphrase for the private key.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --pass secret --key file <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--key</code> and <code>-u, --user</code>.</p>
<ul>
<li><p>Tell curl to not handle sequences of /../ or /./ in the given URL path. Normally curl will squash or merge them according to standards but with this option set you tell it not to do that.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --path-as-is <a href="https://example.com/../../etc/passwd">https://example.com/../../etc/passwd</a></code></pre>
<p>See also <code>--request-target</code>. Added in 7.42.0.</p>
<ul>
<li><p>(TLS) Tells curl to use the specified public key file (or hashes) to verify the peer. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';'.</p></li>
</ul>
<p>When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, curl will abort the connection before sending or receiving any data.</p>
<p>PEM/DER support:</p>
<p>7.39.0: OpenSSL, GnuTLS and GSKit</p>
<p>7.43.0: NSS and wolfSSL</p>
<p>7.47.0: mbedtls</p>
<p>sha256 support:</p>
<p>7.44.0: OpenSSL, GnuTLS, NSS and wolfSSL</p>
<p>7.47.0: mbedtls</p>
<p>Other SSL backends not supported.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl --pinnedpubkey keyfile <a href="https://example.com">https://example.com</a>
 curl --pinnedpubkey 'sha256//ce118b51897f4452dc' <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--hostpubsha256</code>. Added in 7.39.0.</p>
<ul>
<li><p>(HTTP) Tells curl to respect RFC 7231/6.4.2 and not convert POST requests into GET requests when following a 301 redirection. The non-RFC behavior is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using <code>-L, --location</code>.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --post301 --location -d "data" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--post302</code>, <code>--post303</code> and <code>-L, --location</code>.</p>
<ul>
<li><p>(HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST requests into GET requests when following a 302 redirection. The non-RFC behavior is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using <code>-L, --location</code>.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --post302 --location -d "data" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--post301</code>, <code>--post303</code> and <code>-L, --location</code>.</p>
<ul>
<li><p>(HTTP) Tells curl to violate RFC 7231/6.4.4 and not convert POST requests into GET requests when following 303 redirections. A server may require a POST to remain a POST after a 303 redirection. This option is meaningful only when using <code>-L, --location</code>.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --post303 --location -d "data" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--post302</code>, <code>--post301</code> and <code>-L, --location</code>.</p>
<ul>
<li><p>Use the specified SOCKS proxy before connecting to an HTTP or HTTPS <code>-x, --proxy</code>. In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy. Hence pre proxy.</p></li>
</ul>
<p>The pre proxy string should be specified with a protocol:// prefix to specify alternative proxy protocols. Use socks4://, socks4a://, socks5:// or socks5h:// to request the specific SOCKS version to be used. No protocol specified will make curl default to SOCKS4.</p>
<p>If the port number is not specified in the proxy string, it is assumed to be 1080.</p>
<p>User and password that might be provided in the proxy string are URL decoded by curl. This allows you to pass in special characters such as @ by using %40 or pass in a colon with %3a.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --preproxy socks5://proxy.example -x http://http.example <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code> and <code>--socks5</code>. Added in 7.52.0.</p>
<ul>
<li><p>Make curl display transfer progress as a simple progress bar instead of the standard, more informational, meter.</p></li>
</ul>
<p>This progress bar draws a single line of '#' characters across the screen and shows a percentage if the transfer size is known. For transfers without a known size, there will be space ship (-=o=-) that moves back and forth but only while data is being transferred, with a set of flying hash sign symbols on top.</p>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>Example:</p>
<pre><code> curl -# -O <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--styled-output</code>.</p>
<ul>
<li><p>Tells curl to use <code>protocol</code> for any URL missing a scheme name.</p></li>
</ul>
<p>An unknown or unsupported protocol causes error <code>CURLE_UNSUPPORTED_PROTOCOL</code> (1).</p>
<p>This option does not change the default proxy protocol (http).</p>
<p>Without this option set, curl guesses protocol based on the host name, see <code>--url</code> for details.</p>
<p>Example:</p>
<pre><code> curl --proto-default https <a href="http://ftp.example.com">ftp.example.com</a></code></pre>
<p>See also <code>--proto</code> and <code>--proto-redir</code>. Added in 7.45.0.</p>
<ul>
<li><p>Tells curl to limit what protocols it may use on redirect. Protocols denied by <code>--proto</code> are not overridden by this option. See --proto for how protocols are represented.</p></li>
</ul>
<p>Example, allow only HTTP and HTTPS on redirect:</p>
<pre><code> curl --proto-redir -all,http,https <a href="http://example.com">http://example.com</a></code></pre>
<p>By default curl will only allow HTTP, HTTPS, FTP and FTPS on redirect (since 7.65.2). Specifying <code>all</code> or <code>+all</code> enables all protocols on redirects, which is not good for security.</p>
<p>Example:</p>
<pre><code> curl --proto-redir =http,https <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proto</code>.</p>
<ul>
<li><p>Tells curl to limit what protocols it may use for transfers. Protocols are evaluated left to right, are comma separated, and are each a protocol name or 'all', optionally prefixed by zero or more modifiers. Available modifiers are:</p>
<dl>
<dt><strong>+</strong></dt>
<dd><p>Permit this protocol in addition to protocols already permitted (this is the default if no modifier is used).</p>
</dd>
<dt><strong>-</strong></dt>
<dd><p>Deny this protocol, removing it from the list of protocols already permitted.</p>
</dd>
<dt><strong>=</strong></dt>
<dd><p>Permit only this protocol (ignoring the list already permitted), though subject to later modification by subsequent entries in the comma separated list.</p>
</dd>
</dl>
<p>For example:</p>
<dl>
<dt><strong><code>--proto</code> -ftps</strong></dt>
<dd><p>uses the default protocols, but disables ftps</p>
</dd>
<dt><strong><code>--proto</code> -all,https,+http</strong></dt>
<dd><p>only enables http and https</p>
</dd>
<dt><strong><code>--proto</code> =http,https</strong></dt>
<dd><p>also only enables http and https</p>
</dd>
</dl>
<p>Unknown protocols produce a warning. This allows scripts to safely rely on being able to disable potentially dangerous protocols, without relying upon support for that protocol being built into curl to avoid an error.</p></li>
</ul>
<p>This option can be used multiple times, in which case the effect is the same as concatenating the protocols into one instance of the option.</p>
<p>Example:</p>
<pre><code> curl --proto =http,https,sftp <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proto-redir</code> and <code>--proto-default</code>.</p>
<ul>
<li><p>Tells curl to pick a suitable authentication method when communicating with the given HTTP proxy. This might cause an extra request/response round-trip.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-anyauth --proxy-user user:passwd -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>, <code>--proxy-basic</code> and <code>--proxy-digest</code>.</p>
<ul>
<li><p>Tells curl to use HTTP Basic authentication when communicating with the given proxy. Use <code>--basic</code> for enabling HTTP Basic with a remote host. Basic is the default authentication method curl uses with proxies.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-basic --proxy-user user:passwd -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>, <code>--proxy-anyauth</code> and <code>--proxy-digest</code>.</p>
<ul>
<li><p>Same as <code>--cacert</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-cacert CA-file.txt -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-capath</code>, <code>--cacert</code>, <code>--capath</code> and <code>-x, --proxy</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--capath</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-capath /local/directory -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-cacert</code>, <code>-x, --proxy</code> and <code>--capath</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--cert-type</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-cert-type PEM --proxy-cert file -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-cert</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>-E, --cert</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-cert file -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-cert-type</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--ciphers</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-ciphers ECDHE-ECDSA-AES256-CCM8 -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ciphers</code>, <code>--curves</code> and <code>-x, --proxy</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--crlfile</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-crlfile rejects.txt -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--crlfile</code> and <code>-x, --proxy</code>. Added in 7.52.0.</p>
<ul>
<li><p>Tells curl to use HTTP Digest authentication when communicating with the given proxy. Use <code>--digest</code> for enabling HTTP Digest with a remote host.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-digest --proxy-user user:passwd -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>, <code>--proxy-anyauth</code> and <code>--proxy-basic</code>.</p>
<ul>
<li><p>(HTTP) Extra header to include in the request when sending HTTP to a proxy. You may specify any number of extra headers. This is the equivalent option to <code>-H, --header</code> but is for proxy communication only like in CONNECT requests when you want a separate header sent to the proxy to what is sent to the actual remote host.</p></li>
</ul>
<p>curl will make sure that each header you add/replace is sent with the proper end-of-line marker, you should thus <strong>not</strong> add that as a part of the header content: do not add newlines or carriage returns, they will only mess things up for you.</p>
<p>Headers specified with this option will not be included in requests that curl knows will not be sent to a proxy.</p>
<p>Starting in 7.55.0, this option can take an argument in @filename style, which then adds a header for each line in the input file. Using @- will make curl read the header file from stdin.</p>
<p>This option can be used multiple times to add/replace/remove multiple headers.</p>
<p>Examples:</p>
<pre><code> curl --proxy-header "X-First-Name: Joe" -x http://proxy <a href="https://example.com">https://example.com</a>
 curl --proxy-header "User-Agent: surprise" -x http://proxy <a href="https://example.com">https://example.com</a>
 curl --proxy-header "Host:" -x http://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>. Added in 7.37.0.</p>
<ul>
<li><p>Same as <code>-k, --insecure</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-insecure -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code> and <code>-k, --insecure</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--key-type</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-key-type DER --proxy-key here -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-key</code> and <code>-x, --proxy</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--key</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-key here -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-key-type</code> and <code>-x, --proxy</code>. Added in 7.52.0.</p>
<ul>
<li><p>Tells curl to use HTTP Negotiate (SPNEGO) authentication when communicating with the given proxy. Use <code>--negotiate</code> for enabling HTTP Negotiate (SPNEGO) with a remote host.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-negotiate --proxy-user user:passwd -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-anyauth</code> and <code>--proxy-basic</code>.</p>
<ul>
<li><p>Tells curl to use HTTP NTLM authentication when communicating with the given proxy. Use <code>--ntlm</code> for enabling NTLM with a remote host.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-ntlm --proxy-user user:passwd -x http://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-negotiate</code> and <code>--proxy-anyauth</code>.</p>
<ul>
<li><p>Same as <code>--pass</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-pass secret --proxy-key here -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code> and <code>--proxy-key</code>. Added in 7.52.0.</p>
<ul>
<li><p>(TLS) Tells curl to use the specified public key file (or hashes) to verify the proxy. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';'.</p></li>
</ul>
<p>When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, curl will abort the connection before sending or receiving any data.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl --proxy-pinnedpubkey keyfile <a href="https://example.com">https://example.com</a>
 curl --proxy-pinnedpubkey 'sha256//ce118b51897f4452dc' <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--pinnedpubkey</code> and <code>-x, --proxy</code>. Added in 7.59.0.</p>
<ul>
<li><p>This option allows you to change the service name for proxy negotiation.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-service-name "shrubbery" -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--service-name</code> and <code>-x, --proxy</code>. Added in 7.43.0.</p>
<ul>
<li><p>Same as <code>--ssl-allow-beast</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-ssl-allow-beast -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ssl-allow-beast</code> and <code>-x, --proxy</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--ssl-auto-client-cert</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-ssl-auto-client-cert -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ssl-auto-client-cert</code> and <code>-x, --proxy</code>. Added in 7.77.0.</p>
<ul>
<li><p>(TLS) Specifies which cipher suites to use in the connection to your HTTPS proxy when it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:</p></li>
</ul>
<pre><code> <a href="https://curl.se/docs/ssl-ciphers.html">https://curl.se/docs/ssl-ciphers.html</a></code></pre>
<p>This option is currently used only when curl is built to use OpenSSL 1.1.1 or later. If you are using a different SSL backend you can try setting TLS 1.3 cipher suites by using the <code>--proxy-ciphers</code> option.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --proxy-tls13-ciphers TLS_AES_128_GCM_SHA256 -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tls13-ciphers</code> and <code>--curves</code>. Added in 7.61.0.</p>
<ul>
<li><p>Same as <code>--tlsauthtype</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-tlsauthtype SRP -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code> and <code>--proxy-tlsuser</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--tlspassword</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-tlspassword passwd -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code> and <code>--proxy-tlsuser</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>--tlsuser</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-tlsuser smith -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code> and <code>--proxy-tlspassword</code>. Added in 7.52.0.</p>
<ul>
<li><p>Same as <code>-1, --tlsv1</code> but used in HTTPS proxy context.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --proxy-tlsv1 -x https://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>. Added in 7.52.0.</p>
<ul>
<li><p>Specify the user name and password to use for proxy authentication.</p></li>
</ul>
<p>If you use a Windows SSPI-enabled curl binary and do either Negotiate or NTLM authentication then you can tell curl to select the user name and password from your environment by specifying a single colon with this option: "-U :".</p>
<p>On systems where it works, curl will hide the given option argument from process listings. This is not enough to protect credentials from possibly getting seen by other users on the same system as they will still be visible for a moment before cleared. Such sensitive data should be retrieved from a file instead or similar and never used in clear text in a command line.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --proxy-user name:pwd -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-pass</code>.</p>
<ul>
<li><p>Use the specified proxy.</p></li>
</ul>
<p>The proxy string can be specified with a protocol:// prefix. No protocol specified or http:// will be treated as HTTP proxy. Use socks4://, socks4a://, socks5:// or socks5h:// to request a specific SOCKS version to be used.</p>
<p>HTTPS proxy support via https:// protocol prefix was added in 7.52.0 for OpenSSL, GnuTLS and NSS.</p>
<p>Unrecognized and unsupported proxy protocols cause an error since 7.52.0. Prior versions may ignore the protocol and use http:// instead.</p>
<p>If the port number is not specified in the proxy string, it is assumed to be 1080.</p>
<p>This option overrides existing environment variables that set the proxy to use. If there's an environment variable setting a proxy, you can set proxy to "" to override it.</p>
<p>All operations that are performed over an HTTP proxy will transparently be converted to HTTP. It means that certain protocol specific operations might not be available. This is not the case if you can tunnel through the proxy, as one with the <code>-p, --proxytunnel</code> option.</p>
<p>User and password that might be provided in the proxy string are URL decoded by curl. This allows you to pass in special characters such as @ by using %40 or pass in a colon with %3a.</p>
<p>The proxy host can be specified the same way as the proxy environment variables, including the protocol prefix (http://) and the embedded user + password.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --proxy http://proxy.example <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks5</code> and <code>--proxy-basic</code>.</p>
<ul>
<li><p>Use the specified HTTP 1.0 proxy. If the port number is not specified, it is assumed at port 1080.</p></li>
</ul>
<p>The only difference between this and the HTTP proxy option <code>-x, --proxy</code>, is that attempts to use CONNECT through the proxy will specify an HTTP 1.0 protocol instead of the default HTTP 1.1.</p>
<p>Example:</p>
<pre><code> curl --proxy1.0 -x http://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>, <code>--socks5</code> and <code>--preproxy</code>.</p>
<ul>
<li><p>When an HTTP proxy is used <code>-x, --proxy</code>, this option will make curl tunnel through the proxy. The tunnel approach is made with the HTTP proxy CONNECT request and requires that the proxy allows direct connect to the remote port number curl wants to tunnel through to.</p></li>
</ul>
<p>To suppress proxy CONNECT response headers when curl is set to output headers use <code>--suppress-connect-headers</code>.</p>
<p>Example:</p>
<pre><code> curl --proxytunnel -x http://proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-x, --proxy</code>.</p>
<ul>
<li><p>(SFTP SCP) Public key file name. Allows you to provide your public key in this separate file.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>(As of 7.39.0, curl attempts to automatically extract the public key from the private key file, so passing this option is generally not required. Note that this public key extraction requires libcurl to be linked against a copy of libssh2 1.2.8 or higher that is itself linked against OpenSSL.)</p>
<p>Example:</p>
<pre><code> curl --pubkey file.pub <a href="sftp://example.com/">sftp://example.com/</a></code></pre>
<p>See also <code>--pass</code>.</p>
<ul>
<li><p>(FTP SFTP) Send an arbitrary command to the remote FTP or SFTP server. Quote commands are sent BEFORE the transfer takes place (just after the initial PWD command in an FTP transfer, to be exact). To make commands take place after a successful transfer, prefix them with a dash '-'. To make commands be sent after curl has changed the working directory, just before the transfer command(s), prefix the command with a '+' (this is only supported for FTP). You may specify any number of commands.</p></li>
</ul>
<p>By default curl will stop at first failure. To make curl continue even if the command fails, prefix the command with an asterisk (*). Otherwise, if the server returns failure for one of the commands, the entire operation will be aborted.</p>
<p>You must send syntactically correct FTP commands as RFC 959 defines to FTP servers, or one of the commands listed below to SFTP servers.</p>
<p>This option can be used multiple times.</p>
<p>SFTP is a binary protocol. Unlike for FTP, curl interprets SFTP quote commands itself before sending them to the server. File names may be quoted shell-style to embed spaces or special characters. Following is the list of all supported SFTP quote commands:</p>
<blockquote>
<ul>
<li><p>The atime command sets the last access time of the file named by the file operand. The &lt;date expression&gt; can be all sorts of date strings, see the <code>curl_getdate(3)</code> man page for date expression details. (Added in 7.73.0)</p></li>
<li><p>The chgrp command sets the group ID of the file named by the file operand to the group ID specified by the group operand. The group operand is a decimal integer group ID.</p></li>
<li><p>The chmod command modifies the file mode bits of the specified file. The mode operand is an octal integer mode number.</p></li>
<li><p>The chown command sets the owner of the file named by the file operand to the user ID specified by the user operand. The user operand is a decimal integer user ID.</p></li>
<li><p>The ln and symlink commands create a symbolic link at the target_file location pointing to the source_file location.</p></li>
<li><p>The mkdir command creates the directory named by the directory_name operand.</p></li>
<li><p>The mtime command sets the last modification time of the file named by the file operand. The &lt;date expression&gt; can be all sorts of date strings, see the <code>curl_getdate(3)</code> man page for date expression details. (Added in 7.73.0)</p></li>
<li><p>The pwd command returns the absolute pathname of the current working directory.</p></li>
<li><p>The rename command renames the file or directory named by the source operand to the destination path named by the target operand.</p></li>
<li><p>The rm command removes the file specified by the file operand.</p></li>
<li><p>The rmdir command removes the directory entry specified by the directory operand, provided it is empty.</p></li>
<li><p>See ln.</p></li>
</ul>
</blockquote>
<p>Example:</p>
<pre><code> curl --quote "DELE file" <a href="ftp://example.com/foo">ftp://example.com/foo</a></code></pre>
<p>See also <code>-X, --request</code>.</p>
<ul>
<li><p>Specify the path name to file containing what will be considered as random data. The data may be used to seed the random engine for SSL connections. See also the <code>--egd-file</code> option.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --random-file rubbish <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--egd-file</code>.</p>
<ul>
<li><p>(HTTP FTP SFTP FILE) Retrieve a byte range (i.e. a partial document) from an HTTP/1.1, FTP or SFTP server or a local FILE. Ranges can be specified in a number of ways.</p>
<dl>
<dt><strong>0-499</strong></dt>
<dd><p>specifies the first 500 bytes</p>
</dd>
<dt><strong>500-999</strong></dt>
<dd><p>specifies the second 500 bytes</p>
</dd>
<dt><strong>-500</strong></dt>
<dd><p>specifies the last 500 bytes</p>
</dd>
<dt><strong>9500-</strong></dt>
<dd><p>specifies the bytes from offset 9500 and forward</p>
</dd>
<dt><strong>0-0,-1</strong></dt>
<dd><p>specifies the first and last byte only(*)(HTTP)</p>
</dd>
<dt><strong>100-199,500-599</strong></dt>
<dd><p>specifies two separate 100-byte ranges(*) (HTTP)</p>
</dd>
</dl>
<p>(*) = NOTE that this will cause the server to reply with a multipart response, which will be returned as-is by curl! Parsing or otherwise transforming this response is the responsibility of the caller.</p></li>
</ul>
<p>Only digit characters (0-9) are valid in the 'start' and 'stop' fields of the 'start-stop' range syntax. If a non-digit character is given in the range, the server's response will be unspecified, depending on the server's configuration.</p>
<p>You should also be aware that many HTTP/1.1 servers do not have this feature enabled, so that when you attempt to get a range, you will instead get the whole document.</p>
<p>FTP and SFTP range downloads only support the simple 'start-stop' syntax (optionally with one of the numbers omitted). FTP use depends on the extended FTP command SIZE.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --range 22-44 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-C, --continue-at</code> and <code>-a, --append</code>.</p>
<ul>
<li><p>(HTTP) When used, it disables all internal HTTP decoding of content or transfer encodings and instead makes them passed on unaltered, raw.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --raw <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tr-encoding</code>.</p>
<ul>
<li><p>(HTTP) Sends the "Referrer Page" information to the HTTP server. This can also be set with the <code>-H, --header</code> flag of course. When used with <code>-L, --location</code> you can append ";auto" to the <code>-e, --referer</code> URL to make curl automatically set the previous URL when it follows a Location: header. The ";auto" string can be used alone, even if you do not set an initial <code>-e, --referer</code>.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl --referer "https://fake.example" <a href="https://example.com">https://example.com</a>
 curl --referer "https://fake.example;auto" -L <a href="https://example.com">https://example.com</a>
 curl --referer ";auto" -L <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-A, --user-agent</code> and <code>-H, --header</code>.</p>
<ul>
<li><p>(HTTP) This option tells the <code>-O, --remote-name</code> option to use the server-specified Content-Disposition filename instead of extracting a filename from the URL.</p></li>
</ul>
<p>If the server specifies a file name and a file with that name already exists in the current working directory it will not be overwritten and an error will occur. If the server does not specify a file name then this option has no effect.</p>
<p>There's no attempt to decode %-sequences (yet) in the provided file name, so this option may provide you with rather unexpected file names.</p>
<p><strong>WARNING</strong>: Exercise judicious use of this option, especially on Windows. A rogue server could send you the name of a DLL or other file that could be loaded automatically by Windows or some third party software.</p>
<p>Example:</p>
<pre><code> curl -OJ <a href="https://example.com/file">https://example.com/file</a></code></pre>
<p>See also <code>-O, --remote-name</code>.</p>
<ul>
<li><p>This option changes the default action for all given URLs to be dealt with as if <code>-O, --remote-name</code> were used for each one. So if you want to disable that for a specific URL after <code>--remote-name-all</code> has been used, you must use "-o -" or --no-remote-name.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --remote-name-all <a href="ftp://example.com/file1">ftp://example.com/file1</a> <a href="ftp://example.com/file2">ftp://example.com/file2</a></code></pre>
<p>See also <code>-O, --remote-name</code>.</p>
<ul>
<li><p>Write output to a local file named like the remote file we get. (Only the file part of the remote file is used, the path is cut off.)</p></li>
</ul>
<p>The file will be saved in the current working directory. If you want the file saved in a different directory, make sure you change the current working directory before invoking curl with this option.</p>
<p>The remote file name to use for saving is extracted from the given URL, nothing else, and if it already exists it will be overwritten. If you want the server to be able to choose the file name refer to <code>-J, --remote-header-name</code> which can be used in addition to this option. If the server chooses a file name and that name already exists it will not be overwritten.</p>
<p>There is no URL decoding done on the file name. If it has %20 or other URL encoded parts of the name, they will end up as-is as file name.</p>
<p>You may use this option as many times as the number of URLs you have.</p>
<p>Example:</p>
<pre><code> curl -O <a href="https://example.com/filename">https://example.com/filename</a></code></pre>
<p>See also <code>--remote-name-all</code>.</p>
<ul>
<li><p>When used, this will make curl attempt to figure out the timestamp of the remote file, and if that is available make the local file get that same timestamp.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --remote-time -o foo <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-O, --remote-name</code> and <code>-z, --time-cond</code>.</p>
<ul>
<li><p>(HTTP) Tells curl to use an alternative "target" (path) instead of using the path as provided in the URL. Particularly useful when wanting to issue HTTP requests without leading slash or other data that does not follow the regular URL pattern, like "OPTIONS *".</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --request-target "*" -X OPTIONS <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-X, --request</code>. Added in 7.55.0.</p>
<ul>
<li><p>(HTTP) Specifies a custom request method to use when communicating with the HTTP server. The specified request method will be used instead of the method otherwise used (which defaults to GET). Read the HTTP 1.1 specification for details and explanations. Common additional HTTP requests include PUT and DELETE, but related technologies like WebDAV offers PROPFIND, COPY, MOVE and more.</p></li>
</ul>
<p>Normally you do not need this option. All sorts of GET, HEAD, POST and PUT requests are rather invoked by using dedicated command line options.</p>
<p>This option only changes the actual word used in the HTTP request, it does not alter the way curl behaves. So for example if you want to make a proper HEAD request, using -X HEAD will not suffice. You need to use the <code>-I, --head</code> option.</p>
<p>The method string you set with <code>-X, --request</code> will be used for all requests, which if you for example use <code>-L, --location</code> may cause unintended side-effects when curl does not change request method according to the HTTP 30x response codes - and similar.</p>
<p>(FTP) Specifies a custom FTP command to use instead of LIST when doing file lists with FTP.</p>
<p>(POP3) Specifies a custom POP3 command to use instead of LIST or RETR.</p>
<p>(IMAP) Specifies a custom IMAP command to use instead of LIST. (Added in 7.30.0)</p>
<p>(SMTP) Specifies a custom SMTP command to use instead of HELP or VRFY. (Added in 7.34.0)</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl -X "DELETE" <a href="https://example.com">https://example.com</a>
 curl -X NLST <a href="ftp://example.com/">ftp://example.com/</a></code></pre>
<p>See also <code>--request-target</code>.</p>
<ul>
<li><p>Provide a custom address for a specific host and port pair. Using this, you can make the curl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line. The port number should be the number used for the specific protocol the host will be used for. It means you need several entries if you want to provide address for the same host but different ports.</p></li>
</ul>
<p>By specifying '*' as host you can tell curl to resolve any host and specific port pair to the specified address. Wildcard is resolved last so any <code>--resolve</code> with a specific host and port will be used first.</p>
<p>The provided address set by this option will be used even if <code>-4, --ipv4</code> or <code>-6, --ipv6</code> is set to make curl use another IP version.</p>
<p>By prefixing the host with a '+' you can make the entry time out after curl's default timeout (1 minute). Note that this will only make sense for long running parallel transfers with a lot of files. In such cases, if this option is used curl will try to resolve the host as it normally would once the timeout has expired.</p>
<p>Support for providing the IP address within [brackets] was added in 7.57.0.</p>
<p>Support for providing multiple IP addresses per entry was added in 7.59.0.</p>
<p>Support for resolving with wildcard was added in 7.64.0.</p>
<p>Support for the '+' prefix was was added in 7.75.0.</p>
<p>This option can be used many times to add many host names to resolve.</p>
<p>Example:</p>
<pre><code> curl --resolve <a href="http://example.com:443">example.com:443</a>:127.0.0.1 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--connect-to</code> and <code>--alt-svc</code>.</p>
<ul>
<li><p>Retry on any error. This option is used together with <code>--retry</code>.</p></li>
</ul>
<p>This option is the "sledgehammer" of retrying. Do not use this option by default (eg in curlrc), there may be unintended consequences such as sending or receiving duplicate data. Do not use with redirected input or output. You'd be much better off handling your unique problems in shell script. Please read the example below.</p>
<p><strong>WARNING</strong>: For server compatibility curl attempts to retry failed flaky transfers as close as possible to how they were started, but this is not possible with redirected input or output. For example, before retrying it removes output data from a failed partial transfer that was written to an output file. However this is not true of data redirected to a | pipe or &gt; file, which are not reset. We strongly suggest you do not parse or record output via redirect in combination with this option, since you may receive duplicate data.</p>
<p>By default curl will not error on an HTTP response code that indicates an HTTP error, if the transfer was successful. For example, if a server replies 404 Not Found and the reply is fully received then that is not an error. When <code>--retry</code> is used then curl will retry on some HTTP response codes that indicate transient HTTP errors, but that does not include most 4xx response codes such as 404. If you want to retry on all response codes that indicate HTTP errors (4xx and 5xx) then combine with <code>-f, --fail</code>.</p>
<p>Example:</p>
<pre><code> curl --retry 5 --retry-all-errors <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--retry</code>. Added in 7.71.0.</p>
<ul>
<li><p>In addition to the other conditions, consider ECONNREFUSED as a transient error too for <code>--retry</code>. This option is used together with --retry.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --retry-connrefused --retry <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--retry</code> and <code>--retry-all-errors</code>. Added in 7.52.0.</p>
<ul>
<li><p>Make curl sleep this amount of time before each retry when a transfer has failed with a transient error (it changes the default backoff time algorithm between retries). This option is only interesting if <code>--retry</code> is also used. Setting this delay to zero will make curl use the default backoff time.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --retry-delay 5 --retry <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--retry</code>.</p>
<ul>
<li><p>The retry timer is reset before the first transfer attempt. Retries will be done as usual (see <code>--retry</code>) as long as the timer has not reached this given limit. Notice that if the timer has not reached the limit, the request will be made and while performing, it may take longer than this given time period. To limit a single request's maximum time, use <code>-m, --max-time</code>. Set this option to zero to not timeout retries.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --retry-max-time 30 --retry 10 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--retry</code>.</p>
<ul>
<li><p>If a transient error is returned when curl tries to perform a transfer, it will retry this number of times before giving up. Setting the number to 0 makes curl do no retries (which is the default). Transient error means either: a timeout, an FTP 4xx response code or an HTTP 408, 429, 500, 502, 503 or 504 response code.</p></li>
</ul>
<p>When curl is about to retry a transfer, it will first wait one second and then for all forthcoming retries it will double the waiting time until it reaches 10 minutes which then will be the delay between the rest of the retries. By using <code>--retry-delay</code> you disable this exponential backoff algorithm. See also <code>--retry-max-time</code> to limit the total time allowed for retries.</p>
<p>Since curl 7.66.0, curl will comply with the Retry-After: response header if one was present to know when to issue the next retry.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --retry 7 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--retry-max-time</code>.</p>
<ul>
<li><p>Use this authorisation identity (authzid), during SASL PLAIN authentication, in addition to the authentication identity (authcid) as specified by <code>-u, --user</code>.</p></li>
</ul>
<p>If the option is not specified, the server will derive the authzid from the authcid, but if specified, and depending on the server implementation, it may be used to access another user's inbox, that the user has been granted access to, or a shared mailbox for example.</p>
<p>Example:</p>
<pre><code> curl --sasl-authzid zid imap://<a href="http://example.com/">example.com/</a></code></pre>
<p>See also <code>--login-options</code>. Added in 7.66.0.</p>
<ul>
<li><p>Enable initial response in SASL authentication.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --sasl-ir imap://<a href="http://example.com/">example.com/</a></code></pre>
<p>See also <code>--sasl-authzid</code>. Added in 7.31.0.</p>
<ul>
<li><p>This option allows you to change the service name for SPNEGO.</p></li>
</ul>
<p>Examples: <code>--negotiate</code> <code>--service-name</code> sockd would use sockd/server-name.</p>
<p>Example:</p>
<pre><code> curl --service-name sockd/server <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--negotiate</code> and <code>--proxy-service-name</code>. Added in 7.43.0.</p>
<ul>
<li><p>When used with <code>-s, --silent</code>, it makes curl show an error message if it fails.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>Example:</p>
<pre><code> curl --show-error --silent <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--no-progress-meter</code>.</p>
<ul>
<li><p>Silent or quiet mode. Do not show progress meter or error messages. Makes Curl mute. It will still output the data you ask for, potentially even to the terminal/stdout unless you redirect it.</p></li>
</ul>
<p>Use <code>-S, --show-error</code> in addition to this option to disable progress meter but still show error messages.</p>
<p>Example:</p>
<pre><code> curl -s <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-v, --verbose</code>, <code>--stderr</code> and <code>--no-progress-meter</code>.</p>
<ul>
<li><p>Use the specified SOCKS4 proxy. If the port number is not specified, it is assumed at port 1080. Using this socket type make curl resolve the host name and passing the address on to the proxy.</p></li>
</ul>
<p>This option overrides any previous use of <code>-x, --proxy</code>, as they are mutually exclusive.</p>
<p>This option is superfluous since you can specify a socks4 proxy with <code>-x, --proxy</code> using a socks4:// protocol prefix.</p>
<p>Since 7.52.0, <code>--preproxy</code> can be used to specify a SOCKS proxy at the same time <code>-x, --proxy</code> is used with an HTTP/HTTPS proxy. In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --socks4 hostname:4096 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks4a</code>, <code>--socks5</code> and <code>--socks5-hostname</code>.</p>
<ul>
<li><p>Use the specified SOCKS4a proxy. If the port number is not specified, it is assumed at port 1080. This asks the proxy to resolve the host name.</p></li>
</ul>
<p>This option overrides any previous use of <code>-x, --proxy</code>, as they are mutually exclusive.</p>
<p>This option is superfluous since you can specify a socks4a proxy with <code>-x, --proxy</code> using a socks4a:// protocol prefix.</p>
<p>Since 7.52.0, <code>--preproxy</code> can be used to specify a SOCKS proxy at the same time <code>-x, --proxy</code> is used with an HTTP/HTTPS proxy. In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --socks4a hostname:4096 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks4</code>, <code>--socks5</code> and <code>--socks5-hostname</code>.</p>
<ul>
<li><p>Tells curl to use username/password authentication when connecting to a SOCKS5 proxy. The username/password authentication is enabled by default. Use <code>--socks5-gssapi</code> to force GSS-API authentication to SOCKS5 proxies.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --socks5-basic --socks5 hostname:4096 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks5</code>. Added in 7.55.0.</p>
<ul>
<li><p>As part of the GSS-API negotiation a protection mode is negotiated. RFC 1961 says in section 4.3/4.4 it should be protected, but the NEC reference implementation does not. The option <code>--socks5-gssapi-nec</code> allows the unprotected exchange of the protection mode negotiation.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --socks5-gssapi-nec --socks5 hostname:4096 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks5</code>.</p>
<ul>
<li><p>The default service name for a socks server is rcmd/server-fqdn. This option allows you to change it.</p></li>
</ul>
<p>Examples: <code>--socks5</code> proxy-name <code>--socks5-gssapi-service</code> sockd would use sockd/proxy-name <code>--socks5</code> proxy-name <code>--socks5-gssapi-service</code> sockd/real-name would use sockd/real-name for cases where the proxy-name does not match the principal name.</p>
<p>Example:</p>
<pre><code> curl --socks5-gssapi-service sockd --socks5 hostname:4096 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks5</code>.</p>
<ul>
<li><p>Tells curl to use GSS-API authentication when connecting to a SOCKS5 proxy. The GSS-API authentication is enabled by default (if curl is compiled with GSS-API support). Use <code>--socks5-basic</code> to force username/password authentication to SOCKS5 proxies.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --socks5-gssapi --socks5 hostname:4096 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks5</code>. Added in 7.55.0.</p>
<ul>
<li><p>Use the specified SOCKS5 proxy (and let the proxy resolve the host name). If the port number is not specified, it is assumed at port 1080.</p></li>
</ul>
<p>This option overrides any previous use of <code>-x, --proxy</code>, as they are mutually exclusive.</p>
<p>This option is superfluous since you can specify a socks5 hostname proxy with <code>-x, --proxy</code> using a socks5h:// protocol prefix.</p>
<p>Since 7.52.0, <code>--preproxy</code> can be used to specify a SOCKS proxy at the same time <code>-x, --proxy</code> is used with an HTTP/HTTPS proxy. In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --socks5-hostname proxy.example:7000 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks5</code> and <code>--socks4a</code>.</p>
<ul>
<li><p>Use the specified SOCKS5 proxy - but resolve the host name locally. If the port number is not specified, it is assumed at port 1080.</p></li>
</ul>
<p>This option overrides any previous use of <code>-x, --proxy</code>, as they are mutually exclusive.</p>
<p>This option is superfluous since you can specify a socks5 proxy with <code>-x, --proxy</code> using a socks5:// protocol prefix.</p>
<p>Since 7.52.0, <code>--preproxy</code> can be used to specify a SOCKS proxy at the same time <code>-x, --proxy</code> is used with an HTTP/HTTPS proxy. In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>This option (as well as <code>--socks4</code>) does not work with IPV6, FTPS or LDAP.</p>
<p>Example:</p>
<pre><code> curl --socks5 proxy.example:7000 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--socks5-hostname</code> and <code>--socks4a</code>.</p>
<ul>
<li><p>If a download is slower than this given speed (in bytes per second) for speed-time seconds it gets aborted. speed-time is set with <code>-y, --speed-time</code> and is 30 if not set.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --speed-limit 300 --speed-time 10 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-y, --speed-time</code>, <code>--limit-rate</code> and <code>-m, --max-time</code>.</p>
<ul>
<li><p>If a download is slower than speed-limit bytes per second during a speed-time period, the download gets aborted. If speed-time is used, the default speed-limit will be 1 unless set with <code>-Y, --speed-limit</code>.</p></li>
</ul>
<p>This option controls transfers and thus will not affect slow connects etc. If this is a concern for you, try the <code>--connect-timeout</code> option.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --speed-limit 300 --speed-time 10 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-Y, --speed-limit</code> and <code>--limit-rate</code>.</p>
<ul>
<li><p>This option tells curl to not work around a security flaw in the SSL3 and TLS1.0 protocols known as BEAST. If this option is not used, the SSL layer may use workarounds known to cause interoperability problems with some older SSL implementations.</p></li>
</ul>
<p><strong>WARNING</strong>: this option loosens the SSL security, and by using this flag you ask for exactly that.</p>
<p>Example:</p>
<pre><code> curl --ssl-allow-beast <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-ssl-allow-beast</code> and <code>-k, --insecure</code>.</p>
<ul>
<li><p>Tell libcurl to automatically locate and use a client certificate for authentication, when requested by the server. This option is only supported for Schannel (the native Windows SSL library). Prior to 7.77.0 this was the default behavior in libcurl with Schannel. Since the server can request any certificate that supports client authentication in the OS certificate store it could be a privacy violation and unexpected.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ssl-auto-client-cert <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--proxy-ssl-auto-client-cert</code>. Added in 7.77.0.</p>
<ul>
<li><p>(Schannel) This option tells curl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ssl-no-revoke <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--crlfile</code>. Added in 7.44.0.</p>
<ul>
<li><p>(FTP IMAP POP3 SMTP LDAP) Require SSL/TLS for the connection. Terminates the connection if the server does not support SSL/TLS.</p></li>
</ul>
<p>This option is handled in LDAP since version 7.81.0. It is fully supported by the openldap backend and rejected by the generic ldap backend if explicit TLS is required.</p>
<p>This option was formerly known as --ftp-ssl-reqd.</p>
<p>Example:</p>
<pre><code> curl --ssl-reqd <a href="ftp://example.com">ftp://example.com</a></code></pre>
<p>See also <code>--ssl</code> and <code>-k, --insecure</code>.</p>
<ul>
<li><p>(Schannel) This option tells curl to ignore certificate revocation checks when they failed due to missing/offline distribution points for the revocation check lists.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --ssl-revoke-best-effort <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--crlfile</code> and <code>-k, --insecure</code>. Added in 7.70.0.</p>
<ul>
<li><p>(FTP IMAP POP3 SMTP LDAP) Try to use SSL/TLS for the connection. Reverts to a non-secure connection if the server does not support SSL/TLS. See also <code>--ftp-ssl-control</code> and <code>--ssl-reqd</code> for different levels of encryption required.</p></li>
</ul>
<p>This option is handled in LDAP since version 7.81.0. It is fully supported by the openldap backend and ignored by the generic ldap backend.</p>
<p>Please note that a server may close the connection if the negotiation does not succeed.</p>
<p>This option was formerly known as --ftp-ssl. That option name can still be used but will be removed in a future version.</p>
<p>Example:</p>
<pre><code> curl --ssl pop3://<a href="http://example.com/">example.com/</a></code></pre>
<p>See also <code>-k, --insecure</code> and <code>--ciphers</code>.</p>
<ul>
<li><p>(SSL) This option previously asked curl to use SSLv2, but starting in curl 7.77.0 this instruction is ignored. SSLv2 is widely considered insecure (see RFC 6176).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --sslv2 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http2</code>. <code>-2, --sslv2</code> requires that the underlying libcurl was built to support TLS. This option overrides <code>-3, --sslv3</code> and <code>-1, --tlsv1</code> and <code>--tlsv1.1</code> and <code>--tlsv1.2</code>.</p>
<ul>
<li><p>(SSL) This option previously asked curl to use SSLv3, but starting in curl 7.77.0 this instruction is ignored. SSLv3 is widely considered insecure (see RFC 7568).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --sslv3 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http2</code>. <code>-3, --sslv3</code> requires that the underlying libcurl was built to support TLS. This option overrides <code>-2, --sslv2</code> and <code>-1, --tlsv1</code> and <code>--tlsv1.1</code> and <code>--tlsv1.2</code>.</p>
<ul>
<li><p>Redirect all writes to stderr to the specified file instead. If the file name is a plain '-', it is instead written to stdout.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --stderr output.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-v, --verbose</code> and <code>-s, --silent</code>.</p>
<ul>
<li><p>Enables the automatic use of bold font styles when writing HTTP headers to the terminal. Use --no-styled-output to switch them off.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>Example:</p>
<pre><code> curl --styled-output -I <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-I, --head</code> and <code>-v, --verbose</code>. Added in 7.61.0.</p>
<ul>
<li><p>When <code>-p, --proxytunnel</code> is used and a CONNECT request is made do not output proxy CONNECT response headers. This option is meant to be used with <code>-D, --dump-header</code> or <code>-i, --include</code> which are used to show protocol headers in the output. It has no effect on debug options such as <code>-v, --verbose</code> or <code>--trace</code>, or any statistics.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --suppress-connect-headers --include -x proxy <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-D, --dump-header</code>, <code>-i, --include</code> and <code>-p, --proxytunnel</code>. Added in 7.54.0.</p>
<ul>
<li><p>Enable use of TCP Fast Open (RFC7413).</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --tcp-fastopen <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--false-start</code>. Added in 7.49.0.</p>
<ul>
<li><p>Turn on the TCP_NODELAY option. See the <code>curl_easy_setopt(3)</code> man page for details about this option.</p></li>
</ul>
<p>Since 7.50.2, curl sets this option by default and you need to explicitly switch it off if you do not want it on.</p>
<p>Example:</p>
<pre><code> curl --tcp-nodelay <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-N, --no-buffer</code>.</p>
<ul>
<li><p>Pass options to the telnet protocol. Supported options are:</p></li>
</ul>
<p>TTYPE=&lt;term&gt; Sets the terminal type.</p>
<p>XDISPLOC=&lt;X display&gt; Sets the X display location.</p>
<p>NEW_ENV=&lt;var,val&gt; Sets an environment variable.</p>
<p>Example:</p>
<pre><code> curl -t TTYPE=vt100 <a href="telnet://example.com/">telnet://example.com/</a></code></pre>
<p>See also <code>-K, --config</code>.</p>
<ul>
<li><p>(TFTP) Set TFTP BLKSIZE option (must be &gt;512). This is the block size that curl will try to use when transferring data to or from a TFTP server. By default 512 bytes will be used.</p></li>
</ul>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --tftp-blksize 1024 tftp://<a href="http://example.com/file">example.com/file</a></code></pre>
<p>See also <code>--tftp-no-options</code>.</p>
<ul>
<li><p>(TFTP) Tells curl not to send TFTP options requests.</p></li>
</ul>
<p>This option improves interop with some legacy servers that do not acknowledge or properly implement TFTP options. When this option is used <code>--tftp-blksize</code> is ignored.</p>
<p>Example:</p>
<pre><code> curl --tftp-no-options tftp://192.168.0.1/</code></pre>
<p>See also <code>--tftp-blksize</code>. Added in 7.48.0.</p>
<ul>
<li><p>(HTTP FTP) Request a file that has been modified later than the given time and date, or one that has been modified before that time. The &lt;date expression&gt; can be all sorts of date strings or if it does not match any internal ones, it is taken as a filename and tries to get the modification date (mtime) from &lt;file&gt; instead. See the <code>curl_getdate(3)</code> man pages for date expression details.</p></li>
</ul>
<p>Start the date expression with a dash (-) to make it request for a document that is older than the given date/time, default is a document that is newer than the specified date/time.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Examples:</p>
<pre><code> curl -z "Wed 01 Sep 2021 12:18:00" <a href="https://example.com">https://example.com</a>
 curl -z "-Wed 01 Sep 2021 12:18:00" <a href="https://example.com">https://example.com</a>
 curl -z file <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--etag-compare</code> and <code>-R, --remote-time</code>.</p>
<ul>
<li><p>(SSL) VERSION defines maximum supported TLS version. The minimum acceptable version is set by tlsv1.0, tlsv1.1, tlsv1.2 or tlsv1.3.</p></li>
</ul>
<p>If the connection is done without TLS, this option has no effect. This includes QUIC-using (HTTP/3) transfers.</p>
<blockquote>
<ul>
<li><p>Use up to recommended TLS version.</p></li>
</ul>
<ol type="1">
<li><p>Use up to TLSv1.0.</p></li>
<li><p>Use up to TLSv1.1.</p></li>
<li><p>Use up to TLSv1.2.</p></li>
<li><p>Use up to TLSv1.3.</p></li>
</ol>
</blockquote>
<p>Examples:</p>
<pre><code> curl --tls-max 1.2 <a href="https://example.com">https://example.com</a>
 curl --tls-max 1.3 --tlsv1.2 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsv1.0</code>, <code>--tlsv1.1</code>, <code>--tlsv1.2</code> and <code>--tlsv1.3</code>. <code>--tls-max</code> requires that the underlying libcurl was built to support TLS. Added in 7.54.0.</p>
<ul>
<li><p>(TLS) Specifies which cipher suites to use in the connection if it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:</p></li>
</ul>
<pre><code> <a href="https://curl.se/docs/ssl-ciphers.html">https://curl.se/docs/ssl-ciphers.html</a></code></pre>
<p>This option is currently used only when curl is built to use OpenSSL 1.1.1 or later. If you are using a different SSL backend you can try setting TLS 1.3 cipher suites by using the <code>--ciphers</code> option.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --tls13-ciphers TLS_AES_128_GCM_SHA256 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--ciphers</code> and <code>--curves</code>. Added in 7.61.0.</p>
<ul>
<li><p>Set TLS authentication type. Currently, the only supported option is "SRP", for TLS-SRP (RFC 5054). If <code>--tlsuser</code> and <code>--tlspassword</code> are specified but <code>--tlsauthtype</code> is not, then this option defaults to "SRP". This option works only if the underlying libcurl is built with TLS-SRP support, which requires OpenSSL or GnuTLS with TLS-SRP support.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --tlsauthtype SRP <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsuser</code>.</p>
<ul>
<li><p>Set password for use with the TLS authentication method specified with <code>--tlsauthtype</code>. Requires that <code>--tlsuser</code> also be set.</p></li>
</ul>
<p>This option does not work with TLS 1.3.</p>
<p>Example:</p>
<pre><code> curl --tlspassword pwd --tlsuser user <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsuser</code>.</p>
<ul>
<li><p>Set username for use with the TLS authentication method specified with <code>--tlsauthtype</code>. Requires that <code>--tlspassword</code> also is set.</p></li>
</ul>
<p>This option does not work with TLS 1.3.</p>
<p>Example:</p>
<pre><code> curl --tlspassword pwd --tlsuser user <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlspassword</code>.</p>
<ul>
<li><p>(TLS) Forces curl to use TLS version 1.0 or later when connecting to a remote TLS server.</p></li>
</ul>
<p>In old versions of curl this option was documented to allow _only_ TLS 1.0. That behavior was inconsistent depending on the TLS library. Use <code>--tls-max</code> if you want to set a maximum TLS version.</p>
<p>Example:</p>
<pre><code> curl --tlsv1.0 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsv1.3</code>. Added in 7.34.0.</p>
<ul>
<li><p>(TLS) Forces curl to use TLS version 1.1 or later when connecting to a remote TLS server.</p></li>
</ul>
<p>In old versions of curl this option was documented to allow _only_ TLS 1.1. That behavior was inconsistent depending on the TLS library. Use <code>--tls-max</code> if you want to set a maximum TLS version.</p>
<p>Example:</p>
<pre><code> curl --tlsv1.1 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsv1.3</code>. Added in 7.34.0.</p>
<ul>
<li><p>(TLS) Forces curl to use TLS version 1.2 or later when connecting to a remote TLS server.</p></li>
</ul>
<p>In old versions of curl this option was documented to allow _only_ TLS 1.2. That behavior was inconsistent depending on the TLS library. Use <code>--tls-max</code> if you want to set a maximum TLS version.</p>
<p>Example:</p>
<pre><code> curl --tlsv1.2 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsv1.3</code>. Added in 7.34.0.</p>
<ul>
<li><p>(TLS) Forces curl to use TLS version 1.3 or later when connecting to a remote TLS server.</p></li>
</ul>
<p>If the connection is done without TLS, this option has no effect. This includes QUIC-using (HTTP/3) transfers.</p>
<p>Note that TLS 1.3 is not supported by all TLS backends.</p>
<p>Example:</p>
<pre><code> curl --tlsv1.3 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--tlsv1.2</code>. Added in 7.52.0.</p>
<ul>
<li><p>(SSL) Tells curl to use at least TLS version 1.x when negotiating with a remote TLS server. That means TLS version 1.0 or higher</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --tlsv1 <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--http1.1</code> and <code>--http2</code>. <code>-1, --tlsv1</code> requires that the underlying libcurl was built to support TLS. This option overrides <code>--tlsv1.1</code> and <code>--tlsv1.2</code> and <code>--tlsv1.3</code>.</p>
<ul>
<li><p>(HTTP) Request a compressed Transfer-Encoding response using one of the algorithms curl supports, and uncompress the data while receiving it.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --tr-encoding <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--compressed</code>.</p>
<ul>
<li><p>Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use "-" as filename to have the output sent to stdout.</p></li>
</ul>
<p>This is similar to <code>--trace</code>, but leaves out the hex part and only shows the ASCII part of the dump. It makes smaller output that might be easier to read for untrained humans.</p>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --trace-ascii log.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-v, --verbose</code> and <code>--trace</code>. This option overrides <code>--trace</code> and <code>-v, --verbose</code>.</p>
<ul>
<li><p>Prepends a time stamp to each trace or verbose line that curl displays.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>Example:</p>
<pre><code> curl --trace-time --trace-ascii output <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--trace</code> and <code>-v, --verbose</code>.</p>
<ul>
<li><p>Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use "-" as filename to have the output sent to stdout. Use "%" as filename to have the output sent to stderr.</p></li>
</ul>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl --trace log.txt <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--trace-ascii</code> and <code>--trace-time</code>. This option overrides <code>-v, --verbose</code> and <code>--trace-ascii</code>.</p>
<ul>
<li><p>(HTTP) Connect through this Unix domain socket, instead of using the network.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --unix-socket socket-path <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>--abstract-unix-socket</code>. Added in 7.40.0.</p>
<ul>
<li><p>This transfers the specified local file to the remote URL. If there is no file part in the specified URL, curl will append the local file name. NOTE that you must use a trailing / on the last directory to really prove to Curl that there is no file name or curl will think that your last directory name is the remote file name to use. That will most likely cause the upload operation to fail. If this is used on an HTTP(S) server, the PUT command will be used.</p></li>
</ul>
<p>Use the file name "-" (a single dash) to use stdin instead of a given file. Alternately, the file name "." (a single period) may be specified instead of "-" to use stdin in non-blocking mode to allow reading server output while stdin is being uploaded.</p>
<p>You can specify one <code>-T, --upload-file</code> for each URL on the command line. Each <code>-T, --upload-file</code> + URL pair specifies what to upload and to where. curl also supports "globbing" of the <code>-T, --upload-file</code> argument, meaning that you can upload multiple files to a single URL by using the same URL globbing style supported in the URL.</p>
<p>When uploading to an SMTP server: the uploaded data is assumed to be RFC 5322 formatted. It has to feature the necessary set of headers and mail body formatted correctly by the user as curl will not transcode nor encode it further in any way.</p>
<p>Examples:</p>
<pre><code> curl -T file <a href="https://example.com">https://example.com</a>
 curl -T "img[1-1000].png" <a href="ftp://ftp.example.com/">ftp://ftp.example.com/</a>
 curl --upload-file "{file1,file2}" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-G, --get</code> and <code>-I, --head</code>.</p>
<ul>
<li><p>Specify a URL to fetch. This option is mostly handy when you want to specify URL(s) in a config file.</p></li>
</ul>
<p>If the given URL is missing a scheme name (such as "http://" or "ftp://" etc) then curl will make a guess based on the host. If the outermost sub-domain name matches DICT, FTP, IMAP, LDAP, POP3 or SMTP then that protocol will be used, otherwise HTTP will be used. Since 7.45.0 guessing can be disabled by setting a default protocol, see <code>--proto-default</code> for details.</p>
<p>This option may be used any number of times. To control where this URL is written, use the <code>-o, --output</code> or the <code>-O, --remote-name</code> options.</p>
<p><strong>WARNING</strong>: On Windows, particular file:// accesses can be converted to network accesses by the operating system. Beware!</p>
<p>Example:</p>
<pre><code> curl --url <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-:, --next</code> and <code>-K, --config</code>.</p>
<ul>
<li><p>(FTP LDAP) Enable ASCII transfer. For FTP, this can also be enforced by using a URL that ends with ";type=A". This option causes data sent to stdout to be in text mode for win32 systems.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl -B <a href="ftp://example.com/README">ftp://example.com/README</a></code></pre>
<p>See also <code>--crlf</code> and <code>--data-ascii</code>.</p>
<ul>
<li><p>(HTTP) Specify the User-Agent string to send to the HTTP server. To encode blanks in the string, surround the string with single quote marks. This header can also be set with the <code>-H, --header</code> or the <code>--proxy-header</code> options.</p></li>
</ul>
<p>If you give an empty argument to <code>-A, --user-agent</code> (""), it will remove the header completely from the request. If you prefer a blank header, you can set it to a single space (" ").</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl -A "Agent 007" <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-H, --header</code> and <code>--proxy-header</code>.</p>
<ul>
<li><p>Specify the user name and password to use for server authentication. Overrides <code>-n, --netrc</code> and <code>--netrc-optional</code>.</p></li>
</ul>
<p>If you simply specify the user name, curl will prompt for a password.</p>
<p>The user name and passwords are split up on the first colon, which makes it impossible to use a colon in the user name with this option. The password can, still.</p>
<p>On systems where it works, curl will hide the given option argument from process listings. This is not enough to protect credentials from possibly getting seen by other users on the same system as they will still be visible for a moment before cleared. Such sensitive data should be retrieved from a file instead or similar and never used in clear text in a command line.</p>
<p>When using Kerberos V5 with a Windows based server you should include the Windows domain name in the user name, in order for the server to successfully obtain a Kerberos Ticket. If you do not, then the initial authentication handshake may fail.</p>
<p>When using NTLM, the user name can be specified simply as the user name, without the domain, if there is a single domain and forest in your setup for example.</p>
<p>To specify the domain name use either Down-Level Logon Name or UPN (User Principal Name) formats. For example, EXAMPLE\user and <a href="mailto:user@example.com">user@example.com</a> respectively.</p>
<p>If you use a Windows SSPI-enabled curl binary and perform Kerberos V5, Negotiate, NTLM or Digest authentication then you can tell curl to select the user name and password from your environment by specifying a single colon with this option: "-u :".</p>
<p>If this option is used several times, the last one will be used.</p>
<p>Example:</p>
<pre><code> curl -u user:secret <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-n, --netrc</code> and <code>-K, --config</code>.</p>
<ul>
<li><p>Makes curl verbose during the operation. Useful for debugging and seeing what's going on "under the hood". A line starting with '&gt;' means "header data" sent by curl, '&lt;' means "header data" received by curl that is hidden in normal cases, and a line starting with '*' means additional info provided by curl.</p></li>
</ul>
<p>If you only want HTTP headers in the output, <code>-i, --include</code> might be the option you are looking for.</p>
<p>If you think this option still does not give you enough details, consider using <code>--trace</code> or <code>--trace-ascii</code> instead.</p>
<p>This option is global and does not need to be specified for each use of <code>-:, --next</code>.</p>
<p>Use <code>-s, --silent</code> to make curl really quiet.</p>
<p>Example:</p>
<pre><code> curl --verbose <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-i, --include</code>. This option overrides <code>--trace</code> and <code>--trace-ascii</code>.</p>
<ul>
<li><p>Displays information about curl and the libcurl version it uses.</p></li>
</ul>
<p>The first line includes the full version of curl, libcurl and other 3rd party libraries linked with the executable.</p>
<p>The second line (starts with "Protocols:") shows all protocols that libcurl reports to support.</p>
<p>The third line (starts with "Features:") shows specific features libcurl reports to offer. Available features include:</p>
<blockquote>
<ul>
<li><p>Support for the Alt-Svc: header is provided.</p></li>
<li><p>This curl uses asynchronous name resolves. Asynchronous name resolves can be done using either the c-ares or the threaded resolver backends.</p></li>
<li><p>Support for automatic brotli compression over HTTP(S).</p></li>
<li><p>curl was built with support for character set conversions (like EBCDIC)</p></li>
<li><p>This curl uses a libcurl built with Debug. This enables more error-tracking and memory debugging etc. For curl-developers only!</p></li>
<li><p>The built-in SASL authentication includes extensions to support SCRAM because libcurl was built with libgsasl.</p></li>
<li><p>GSS-API is supported.</p></li>
<li><p>HSTS support is present.</p></li>
<li><p>HTTP/2 support has been built-in.</p></li>
<li><p>HTTP/3 support has been built-in.</p></li>
<li><p>This curl is built to support HTTPS proxy.</p></li>
<li><p>This curl supports IDN - international domain names.</p></li>
<li><p>You can use IPv6 with this.</p></li>
<li><p>Kerberos V5 authentication is supported.</p></li>
<li><p>This curl supports transfers of large files, files larger than 2GB.</p></li>
<li><p>Automatic decompression (via gzip, deflate) of compressed files over HTTP is supported.</p></li>
<li><p>This curl supports multiple TLS backends.</p></li>
<li><p>NTLM authentication is supported.</p></li>
<li><p>NTLM delegation to winbind helper is supported.</p></li>
<li><p>PSL is short for Public Suffix List and means that this curl has been built with knowledge about "public suffixes".</p></li>
<li><p>SPNEGO authentication is supported.</p></li>
<li><p>SSL versions of various protocols are supported, such as HTTPS, FTPS, POP3S and so on.</p></li>
<li><p>SSPI is supported.</p></li>
<li><p>SRP (Secure Remote Password) authentication is supported for TLS.</p></li>
<li><p>Debug memory tracking is supported.</p></li>
<li><p>Unicode support on Windows.</p></li>
<li><p>Unix sockets support is provided.</p></li>
<li><p>Automatic decompression (via zstd) of compressed files over HTTP is supported.</p></li>
</ul>
</blockquote>
<p>Example:</p>
<pre><code> curl --version</code></pre>
<p>See also <code>-h, --help</code> and <code>-M, --manual</code>.</p>
<ul>
<li><p>Make curl display information on stdout after a completed transfer. The format is a string that may contain plain text mixed with any number of variables. The format can be specified as a literal "string", or you can have curl read the format from a file with "@filename" and to tell curl to read the format from stdin you write "@-".</p></li>
</ul>
<p>The variables present in the output format will be substituted by the value or text that curl thinks fit, as described below. All variables are specified as %{variable_name} and to output a normal % you just write them as %%. You can output a newline by using \n, a carriage return with \r and a tab space with \t.</p>
<p>The output will be written to standard output, but this can be switched to standard error by using %{stderr}.</p>
<p><strong>NOTE:</strong> The %-symbol is a special symbol in the win32-environment, where all occurrences of % must be doubled when using this option.</p>
<p>The variables available are:</p>
<blockquote>
<dl>
<dt><strong>content_type</strong></dt>
<dd><p>The Content-Type of the requested document, if there was any.</p>
</dd>
<dt><strong>errormsg</strong></dt>
<dd><p>The error message. (Added in 7.75.0)</p>
</dd>
<dt><strong>exitcode</strong></dt>
<dd><p>The numerical exitcode of the transfer. (Added in 7.75.0)</p>
</dd>
<dt><strong>filename_effective</strong></dt>
<dd><p>The ultimate filename that curl writes out to. This is only meaningful if curl is told to write to a file with the <code>-O, --remote-name</code> or <code>-o, --output</code> option. It's most useful in combination with the <code>-J, --remote-header-name</code> option.</p>
</dd>
<dt><strong>ftp_entry_path</strong></dt>
<dd><p>The initial path curl ended up in when logging on to the remote FTP server.</p>
</dd>
<dt><strong>http_code</strong></dt>
<dd><p>The numerical response code that was found in the last retrieved HTTP(S) or FTP(s) transfer.</p>
</dd>
<dt><strong>http_connect</strong></dt>
<dd><p>The numerical code that was found in the last response (from a proxy) to a curl CONNECT request.</p>
</dd>
<dt><strong>http_version</strong></dt>
<dd><p>The http version that was effectively used. (Added in 7.50.0)</p>
</dd>
<dt><strong>json</strong></dt>
<dd><p>A JSON object with all available keys.</p>
</dd>
<dt><strong>local_ip</strong></dt>
<dd><p>The IP address of the local end of the most recently done connection - can be either IPv4 or IPv6.</p>
</dd>
<dt><strong>local_port</strong></dt>
<dd><p>The local port number of the most recently done connection.</p>
</dd>
<dt><strong>method</strong></dt>
<dd><p>The http method used in the most recent HTTP request. (Added in 7.72.0)</p>
</dd>
<dt><strong>num_connects</strong></dt>
<dd><p>Number of new connects made in the recent transfer.</p>
</dd>
<dt><strong>num_headers</strong></dt>
<dd><p>The number of response headers in the most recent request (restarted at each</p>
</dd>
</dl>
<pre><code> redirect). Note that the status line IS NOT a header. (Added in 7.73.0)</code></pre>
<dl>
<dt><strong>num_redirects</strong></dt>
<dd><p>Number of redirects that were followed in the request.</p>
</dd>
<dt><strong>onerror</strong></dt>
<dd><p>The rest of the output is only shown if the transfer returned a non-zero error (Added in 7.75.0)</p>
</dd>
<dt><strong>proxy_ssl_verify_result</strong></dt>
<dd><p>The result of the HTTPS proxy's SSL peer certificate verification that was requested. 0 means the verification was successful. (Added in 7.52.0)</p>
</dd>
<dt><strong>redirect_url</strong></dt>
<dd><p>When an HTTP request was made without <code>-L, --location</code> to follow redirects (or when <code>--max-redirs</code> is met), this variable will show the actual URL a redirect <code>would</code> have gone to.</p>
</dd>
<dt><strong>referer</strong></dt>
<dd><p>The Referer: header, if there was any. (Added in 7.76.0)</p>
</dd>
<dt><strong>remote_ip</strong></dt>
<dd><p>The remote IP address of the most recently done connection - can be either IPv4 or IPv6.</p>
</dd>
<dt><strong>remote_port</strong></dt>
<dd><p>The remote port number of the most recently done connection.</p>
</dd>
<dt><strong>response_code</strong></dt>
<dd><p>The numerical response code that was found in the last transfer (formerly known as "http_code").</p>
</dd>
<dt><strong>scheme</strong></dt>
<dd><p>The URL scheme (sometimes called protocol) that was effectively used. (Added in 7.52.0)</p>
</dd>
<dt><strong>size_download</strong></dt>
<dd><p>The total amount of bytes that were downloaded. This is the size of the body/data that was transferred, excluding headers.</p>
</dd>
<dt><strong>size_header</strong></dt>
<dd><p>The total amount of bytes of the downloaded headers.</p>
</dd>
<dt><strong>size_request</strong></dt>
<dd><p>The total amount of bytes that were sent in the HTTP request.</p>
</dd>
<dt><strong>size_upload</strong></dt>
<dd><p>The total amount of bytes that were uploaded. This is the size of the body/data that was transferred, excluding headers.</p>
</dd>
<dt><strong>speed_download</strong></dt>
<dd><p>The average download speed that curl measured for the complete download. Bytes per second.</p>
</dd>
<dt><strong>speed_upload</strong></dt>
<dd><p>The average upload speed that curl measured for the complete upload. Bytes per second.</p>
</dd>
<dt><strong>ssl_verify_result</strong></dt>
<dd><p>The result of the SSL peer certificate verification that was requested. 0 means the verification was successful.</p>
</dd>
<dt><strong>stderr</strong></dt>
<dd><p>From this point on, the <code>-w, --write-out</code> output will be written to standard error. (Added in 7.63.0)</p>
</dd>
<dt><strong>stdout</strong></dt>
<dd><p>From this point on, the <code>-w, --write-out</code> output will be written to standard output. This is the default, but can be used to switch back after switching to stderr. (Added in 7.63.0)</p>
</dd>
<dt><strong>time_appconnect</strong></dt>
<dd><p>The time, in seconds, it took from the start until the SSL/SSH/etc connect/handshake to the remote host was completed.</p>
</dd>
<dt><strong>time_connect</strong></dt>
<dd><p>The time, in seconds, it took from the start until the TCP connect to the remote host (or proxy) was completed.</p>
</dd>
<dt><strong>time_namelookup</strong></dt>
<dd><p>The time, in seconds, it took from the start until the name resolving was completed.</p>
</dd>
<dt><strong>time_pretransfer</strong></dt>
<dd><p>The time, in seconds, it took from the start until the file transfer was just about to begin. This includes all pre-transfer commands and negotiations that are specific to the particular protocol(s) involved.</p>
</dd>
<dt><strong>time_redirect</strong></dt>
<dd><p>The time, in seconds, it took for all redirection steps including name lookup, connect, pretransfer and transfer before the final transaction was started. time_redirect shows the complete execution time for multiple redirections.</p>
</dd>
<dt><strong>time_starttransfer</strong></dt>
<dd><p>The time, in seconds, it took from the start until the first byte was just about to be transferred. This includes time_pretransfer and also the time the server needed to calculate the result.</p>
</dd>
<dt><strong>time_total</strong></dt>
<dd><p>The total time, in seconds, that the full operation lasted.</p>
</dd>
<dt><strong>url</strong></dt>
<dd><p>The URL that was fetched. (Added in 7.75.0)</p>
</dd>
<dt><strong>urlnum</strong></dt>
<dd><p>The URL index number of this transfer, 0-indexed. De-globbed URLs share the same index number as the origin globbed URL. (Added in 7.75.0)</p>
</dd>
<dt><strong>url_effective</strong></dt>
<dd><p>The URL that was fetched last. This is most meaningful if you have told curl to follow location: headers.</p>
</dd>
</dl>
</blockquote>
<blockquote>
<p>If this option is used several times, the last one will be used.</p>
</blockquote>
<p>Example:</p>
<pre><code> curl -w '%{http_code}\n' <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-v, --verbose</code> and <code>-I, --head</code>.</p>
<ul>
<li><p>When saving output to a file, this option tells curl to store certain file metadata in extended file attributes. Currently, the URL is stored in the xdg.origin.url attribute and, for HTTP, the content type is stored in the mime_type attribute. If the file system does not support extended attributes, a warning is issued.</p></li>
</ul>
<p>Example:</p>
<pre><code> curl --xattr -o storage <a href="https://example.com">https://example.com</a></code></pre>
<p>See also <code>-R, --remote-time</code>, <code>-w, --write-out</code> and <code>-v, --verbose</code>.</p>
</div></div></div><h1 id='files'><a href='#files'>FILES</a></h1><div data-for='files' data-hide><div class='section' data-for='files'><div data-more>
<p><code>~/.curlrc</code></p>
<blockquote>
<p>Default config file, see <code>-K, --config</code> for details.</p>
</blockquote>
</div></div></div><h1 id='environment'><a href='#environment'>ENVIRONMENT</a></h1><div data-for='environment' data-hide><div class='section' data-for='environment'><div data-more>
<p>The environment variables can be specified in lower case or upper case. The lower case version has precedence. http_proxy is an exception as it is only available in lower case.</p>
<p>Using an environment variable to set the proxy has the same effect as using the <code>-x, --proxy</code> option.</p>
<ul>
<li><p>Sets the proxy server to use for HTTP.</p></li>
<li><p>Sets the proxy server to use for HTTPS.</p></li>
<li><p>Sets the proxy server to use for [url-protocol], where the protocol is a protocol that curl supports and as specified in a URL. FTP, FTPS, POP3, IMAP, SMTP, LDAP, etc.</p></li>
<li><p>Sets the proxy server to use if no protocol-specific proxy is set.</p></li>
<li><p>list of host names that should not go through any proxy. If set to an asterisk '*' only, it matches all hosts. Each name in this list is matched as either a domain name which contains the hostname, or the hostname itself.</p></li>
</ul>
<p>This environment variable disables use of the proxy even when specified with the <code>-x, --proxy</code> option. That is <strong>NO_PROXY=<a href="http://direct.example.com">direct.example.com</a> curl -x <a href="http://proxy.example.com">http://proxy.example.com</a></strong> <strong><a href="http://direct.example.com">http://direct.example.com</a></strong> accesses the target URL directly, and <strong>NO_PROXY=<a href="http://direct.example.com">direct.example.com</a> curl -x <a href="http://proxy.example.com">http://proxy.example.com</a></strong> <strong><a href="http://somewhere.example.com">http://somewhere.example.com</a></strong> accesses the target URL through the proxy.</p>
<p>The list of host names can also be include numerical IP addresses, and IPv6 versions should then be given without enclosing brackets.</p>
<p>IPv6 numerical addresses are compared as strings, so they will only match if the representations are the same: "::1" is the same as "::0:1" but they do not match.</p>
<ul>
<li><p>On Windows, this variable is used when trying to find the home directory. If the primary home variable are all unset.</p></li>
<li><p>If set, the specified number of characters will be used as the terminal width when the alternative progress-bar is shown. If not set, curl will try to figure it out using other ways.</p></li>
<li><p>If set, will be used as the <code>--cacert value.</code></p></li>
<li><p>If set, is the first variable curl checks when trying to find its home directory. If not set, it continues to check <strong>XDG_CONFIG_HOME</strong><code>.</code></p></li>
<li><p>If curl was built with support for "MultiSSL", meaning that it has built-in support for more than one TLS backend, this environment variable can be set to the case insensitive name of the particular backend to use when curl is invoked. Setting a name that is not a built-in alternative will make curl stay with the default.</p></li>
</ul>
<p>SSL backend names (case-insensitive): bearssl, gnutls, gskit, mbedtls, mesalink, nss, openssl, rustls, schannel, secure-transport, wolfssl</p>
<ul>
<li><p>If set, this is used to find the home directory when that is needed. Like when looking for the default .curlrc. <strong>CURL_HOME</strong><code> and </code><strong>XDG_CONFIG_HOME</strong> have preference.</p></li>
<li><p>If curl was built with HTTP/3 support, setting this environment variable to a local directory will make curl produce qlogs in that directory, using file names named after the destination connection id (in hex). Do note that these files can become rather large. Works with both QUIC backends.</p></li>
<li><p>Used on VMS when trying to detect if using a DCL or a "unix" shell.</p></li>
<li><p>If set, will be used as the <code>--capath value.</code></p></li>
<li><p>If set, will be used as the <code>--cacert value.</code></p></li>
<li><p>If you set this environment variable to a file name, curl will store TLS secrets from its connections in that file when invoked to enable you to analyze the TLS traffic in real time using network analyzing tools such as Wireshark. This works with the following TLS backends: OpenSSL, libressl, BoringSSL, GnuTLS, NSS and wolfSSL.</p></li>
<li><p>On Windows, this variable is used when trying to find the home directory. If the other, primary, variable are all unset. If set, curl will use the path "$USERPROFILE\Application Data".</p></li>
<li><p>If <strong>CURL_HOME</strong><code> is not set, this variable is checked when looking for a</code> default .curlrc file.</p></li>
</ul>
</div></div></div><h1 id='proxy-protocol-prefixes'><a href='#proxy-protocol-prefixes'>PROXY PROTOCOL PREFIXES</a></h1><div data-for='proxy-protocol-prefixes' data-hide><div class='section' data-for='proxy-protocol-prefixes'><div data-more>
<p>The proxy string may be specified with a protocol:// prefix to specify alternative proxy protocols.</p>
<p>If no protocol is specified in the proxy string or if the string does not match a supported one, the proxy will be treated as an HTTP proxy.</p>
<p>The supported proxy protocol prefixes are as follows:</p>
<ul>
<li><p>Makes it use it as an HTTP proxy. The default if no scheme prefix is used.</p></li>
<li><p>Makes it treated as an <strong>HTTPS</strong><code> proxy.</code></p></li>
<li><p>Makes it the equivalent of <code>--socks4</code></p></li>
<li><p>Makes it the equivalent of <code>--socks4a</code></p></li>
<li><p>Makes it the equivalent of <code>--socks5</code></p></li>
<li><p>Makes it the equivalent of <code>--socks5-hostname</code></p></li>
</ul>
</div></div></div><h1 id='exit-codes'><a href='#exit-codes'>EXIT CODES</a></h1><div data-for='exit-codes' data-hide><div class='section' data-for='exit-codes'><div data-more>
<p>There are a bunch of different error codes and their corresponding error messages that may appear under error conditions. At the time of this writing, the exit codes are:</p>
<ol type="1">
<li><p>Unsupported protocol. This build of curl has no support for this protocol.</p></li>
<li><p>Failed to initialize.</p></li>
<li><p>URL malformed. The syntax was not correct.</p></li>
<li><p>A feature or option that was needed to perform the desired request was not enabled or was explicitly disabled at build-time. To make curl able to do this, you probably need another build of libcurl.</p></li>
<li><p>Could not resolve proxy. The given proxy host could not be resolved.</p></li>
<li><p>Could not resolve host. The given remote host could not be resolved.</p></li>
<li><p>Failed to connect to host.</p></li>
<li><p>Weird server reply. The server sent data curl could not parse.</p></li>
<li><p>FTP access denied. The server denied login or denied access to the particular resource or directory you wanted to reach. Most often you tried to change to a directory that does not exist on the server.</p></li>
<li><p>FTP accept failed. While waiting for the server to connect back when an active FTP session is used, an error code was sent over the control connection or similar.</p></li>
<li><p>FTP weird PASS reply. Curl could not parse the reply sent to the PASS request.</p></li>
<li><p>During an active FTP session while waiting for the server to connect back to curl, the timeout expired.</p></li>
<li><p>FTP weird PASV reply, Curl could not parse the reply sent to the PASV request.</p></li>
<li><p>FTP weird 227 format. Curl could not parse the 227-line the server sent.</p></li>
<li><p>FTP cannot use host. Could not resolve the host IP we got in the 227-line.</p></li>
<li><p>HTTP/2 error. A problem was detected in the HTTP2 framing layer. This is somewhat generic and can be one out of several problems, see the error message for details.</p></li>
<li><p>FTP could not set binary. Could not change transfer method to binary.</p></li>
<li><p>Partial file. Only a part of the file was transferred.</p></li>
<li><p>FTP could not download/access the given file, the RETR (or similar) command failed.</p></li>
<li><p>FTP quote error. A quote command returned error from the server.</p></li>
<li><p>HTTP page not retrieved. The requested url was not found or returned another error with the HTTP error code being 400 or above. This return code only appears if <code>-f, --fail is used.</code></p></li>
<li><p>Write error. Curl could not write data to a local filesystem or similar.</p></li>
<li><p>FTP could not STOR file. The server denied the STOR operation, used for FTP uploading.</p></li>
<li><p>Read error. Various reading problems.</p></li>
<li><p>Out of memory. A memory allocation request failed.</p></li>
<li><p>Operation timeout. The specified time-out period was reached according to the conditions.</p></li>
<li><p>FTP PORT failed. The PORT command failed. Not all FTP servers support the PORT command, try doing a transfer using PASV instead!</p></li>
<li><p>FTP could not use REST. The REST command failed. This command is used for resumed FTP transfers.</p></li>
<li><p>HTTP range error. The range "command" did not work.</p></li>
<li><p>HTTP post error. Internal post-request generation error.</p></li>
<li><p>SSL connect error. The SSL handshaking failed.</p></li>
<li><p>Bad download resume. Could not continue an earlier aborted download.</p></li>
<li><p>FILE could not read file. Failed to open the file. Permissions?</p></li>
<li><p>LDAP cannot bind. LDAP bind operation failed.</p></li>
<li><p>LDAP search failed.</p></li>
<li><p>Function not found. A required LDAP function was not found.</p></li>
<li><p>Aborted by callback. An application told curl to abort the operation.</p></li>
<li><p>Internal error. A function was called with a bad parameter.</p></li>
<li><p>Interface error. A specified outgoing interface could not be used.</p></li>
<li><p>Too many redirects. When following redirects, curl hit the maximum amount.</p></li>
<li><p>Unknown option specified to libcurl. This indicates that you passed a weird option to curl that was passed on to libcurl and rejected. Read up in the manual!</p></li>
<li><p>Malformed telnet option.</p></li>
<li><p>The peer's SSL certificate or SSH MD5 fingerprint was not OK.</p></li>
<li><p>The server did not reply anything, which here is considered an error.</p></li>
<li><p>SSL crypto engine not found.</p></li>
<li><p>Cannot set SSL crypto engine as default.</p></li>
<li><p>Failed sending network data.</p></li>
<li><p>Failure in receiving network data.</p></li>
<li><p>Problem with the local certificate.</p></li>
<li><p>Could not use specified SSL cipher.</p></li>
<li><p>Peer certificate cannot be authenticated with known CA certificates.</p></li>
<li><p>Unrecognized transfer encoding.</p></li>
<li><p>Invalid LDAP URL.</p></li>
<li><p>Maximum file size exceeded.</p></li>
<li><p>Requested FTP SSL level failed.</p></li>
<li><p>Sending the data requires a rewind that failed.</p></li>
<li><p>Failed to initialise SSL Engine.</p></li>
<li><p>The user name, password, or similar was not accepted and curl failed to log in.</p></li>
<li><p>File not found on TFTP server.</p></li>
<li><p>Permission problem on TFTP server.</p></li>
<li><p>Out of disk space on TFTP server.</p></li>
<li><p>Illegal TFTP operation.</p></li>
<li><p>Unknown TFTP transfer ID.</p></li>
<li><p>File already exists (TFTP).</p></li>
<li><p>No such user (TFTP).</p></li>
<li><p>Character conversion failed.</p></li>
<li><p>Character conversion functions required.</p></li>
<li><p>Problem reading the SSL CA cert (path? access rights?).</p></li>
<li><p>The resource referenced in the URL does not exist.</p></li>
<li><p>An unspecified error occurred during the SSH session.</p></li>
<li><p>Failed to shut down the SSL connection.</p></li>
<li><p>Could not load CRL file, missing or wrong format.</p></li>
<li><p>Issuer check failed.</p></li>
<li><p>The FTP PRET command failed.</p></li>
<li><p>Mismatch of RTSP CSeq numbers.</p></li>
<li><p>Mismatch of RTSP Session Identifiers.</p></li>
<li><p>Unable to parse FTP file list.</p></li>
<li><p>FTP chunk callback reported error.</p></li>
<li><p>No connection available, the session will be queued.</p></li>
<li><p>SSL public key does not matched pinned public key.</p></li>
<li><p>Invalid SSL certificate status.</p></li>
<li><p>Stream error in HTTP/2 framing layer.</p></li>
<li><p>An API function was called from inside a callback.</p></li>
<li><p>An authentication function returned an error.</p></li>
<li><p>A problem was detected in the HTTP/3 layer. This is somewhat generic and can be one out of several problems, see the error message for details.</p></li>
<li><p>QUIC connection error. This error may be caused by an SSL library error. QUIC is the protocol used for HTTP/3 transfers.</p></li>
</ol>
<ol start="20" type="I">
<li><p>More error codes will appear here in future releases. The existing ones are meant to never change.</p></li>
</ol>
</div></div></div><h1 id='bugs'><a href='#bugs'>BUGS</a></h1><div data-for='bugs' data-hide><div class='section' data-for='bugs'><div data-more>
<p>If you experience any problems with curl, submit an issue in the project's bug tracker on GitHub: <a href="https://github.com/curl/curl/issues">https://github.com/curl/curl/issues</a></p>
</div></div></div><h1 id='authors--contributors'><a href='#authors--contributors'>AUTHORS / CONTRIBUTORS</a></h1><div data-for='authors--contributors' data-hide><div class='section' data-for='authors--contributors'><div data-more>
<p>Daniel Stenberg is the main author, but the whole list of contributors is found in the separate THANKS file.</p>
</div></div></div><h1 id='www'><a href='#www'>WWW</a></h1><div data-for='www' data-hide><div class='section' data-for='www'><div data-more>
<p><a href="https://curl.se">https://curl.se</a></p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/1/ftp'>ftp</a>(1), <a href='/1/wget'>wget</a>(1)</p></div></div>


        </div>

    </body>

</html>