<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p><a data-bs-content='This is the man page for &lt;code&gt;grep&lt;/code&gt; and 3 related functions.' data-bs-toggle='popover' tabindex='0'>grep</a>, egrep, fgrep, rgrep - print lines that match patterns</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<p><strong>grep</strong> [<code>OPTION</code>. . .] <code>PATTERNS</code> [<code>FILE</code>. . .]<br/>
<strong>grep</strong> [<code>OPTION</code>. . .] <strong>-e</strong> <code>PATTERNS</code> . . . [<code>FILE</code>. . .]<br/>
<strong>grep</strong> [<code>OPTION</code>. . .] <strong>-f</strong> <code>PATTERN_FILE</code> . . . [<code>FILE</code>. . .]</p>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p><strong>grep</strong> searches for <code>PATTERNS</code> in each <code>FILE</code>. <code>PATTERNS</code> is one or more patterns separated by newline characters, and <strong>grep</strong> prints each line that matches a pattern. Typically <code>PATTERNS</code> should be quoted when <strong>grep</strong> is used in a shell command.</p>
<p>A <code>FILE</code> of “<strong>-</strong>'' stands for standard input. If no <code>FILE</code> is given, recursive searches examine the working directory, and nonrecursive searches read standard input.</p>
<p>In addition, the variant programs <strong>egrep</strong>, <strong>fgrep</strong> and <strong>rgrep</strong> are the same as <strong>grep -E</strong>, <strong>grep -F</strong>, and <strong>grep -r</strong>, respectively. These variants are deprecated, but are provided for backward compatibility.</p>
</div></div><h1 id='options'><a href='#options'>OPTIONS</a></h1><div data-for='options' data-hide><div class='section' data-for='options'><div data-more>
<h2>Generic Program Information</h2>
<dl>
<dt><strong>- -help</strong></dt>
<dd><p>Output a usage message and exit.</p>
</dd>
<dt><strong>-V</strong>, <strong>- -version</strong></dt>
<dd><p>Output the version number of <strong>grep</strong> and exit.</p>
</dd>
</dl>
<h2>Pattern Syntax</h2>
<dl>
<dt><strong>-E</strong>, <strong>- -extended-regexp</strong></dt>
<dd><p>Interpret <code>PATTERNS</code> as extended regular expressions (EREs, see below).</p>
</dd>
<dt><strong>-F</strong>, <strong>- -fixed-strings</strong></dt>
<dd><p>Interpret <code>PATTERNS</code> as fixed strings, not regular expressions.</p>
</dd>
<dt><strong>-G</strong>, <strong>- -basic-regexp</strong></dt>
<dd><p>Interpret <code>PATTERNS</code> as basic regular expressions (BREs, see below). This is the default.</p>
</dd>
<dt><strong>-P</strong>, <strong>- -perl-regexp</strong></dt>
<dd><p>Interpret I&lt;PATTERNS&gt; as Perl-compatible regular expressions (PCREs). This option is experimental when combined with the <strong>-z</strong> (<strong>- -null-data</strong>) option, and <strong>grep -P</strong> may warn of unimplemented features.</p>
</dd>
</dl>
<h2>Matching Control</h2>
<dl>
<dt><strong>-e</strong><code> PATTERNS</code><strong>, - -regexp=</strong><code>PATTERNS</code></dt>
<dd><p>Use <code>PATTERNS</code> as the patterns. If this option is used multiple times or is combined with the <strong>-f</strong> (<strong>- -file</strong>) option, search for all patterns given. This option can be used to protect a pattern beginning with “-''.</p>
</dd>
<dt><strong>-f</strong><code> FILE</code><strong>, - -file=</strong><code>FILE</code></dt>
<dd><p>Obtain patterns from <code>FILE</code>, one per line. If this option is used multiple times or is combined with the <strong>-e</strong> (<strong>- -regexp</strong>) option, search for all patterns given. The empty file contains zero patterns, and therefore matches nothing.</p>
</dd>
<dt><strong>-i</strong>, <strong>- -ignore-case</strong></dt>
<dd><p>Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other.</p>
</dd>
<dt><strong>- -no-ignore-case</strong></dt>
<dd><p>Do not ignore case distinctions in patterns and input data. This is the default. This option is useful for passing to shell scripts that already use <strong>-i</strong>, to cancel its effects because the two options override each other.</p>
</dd>
<dt><strong>-v</strong>, <strong>- -invert-match</strong></dt>
<dd><p>Invert the sense of matching, to select non-matching lines.</p>
</dd>
<dt><strong>-w</strong>, <strong>- -word-regexp</strong></dt>
<dd><p>Select only those lines containing matches that form whole words. The test is that the matching substring must either be at the beginning of the line, or preceded by a non-word constituent character. Similarly, it must be either at the end of the line or followed by a non-word constituent character. Word-constituent characters are letters, digits, and the underscore. This option has no effect if <strong>-x</strong> is also specified.</p>
</dd>
<dt><strong>-x</strong>, <strong>- -line-regexp</strong></dt>
<dd><p>Select only those matches that exactly match the whole line. For a regular expression pattern, this is like parenthesizing the pattern and then surrounding it with <strong>^</strong> and <strong>$</strong>.</p>
</dd>
<dt><strong>-y</strong></dt>
<dd><p>Obsolete synonym for <strong>-i</strong>.</p>
</dd>
</dl>
<h2>General Output Control</h2>
<dl>
<dt><strong>-c</strong>, <strong>- -count</strong></dt>
<dd><p>Suppress normal output; instead print a count of matching lines for each input file. With the <strong>-v</strong>, <strong>- -invert-match</strong> option (see below), count non-matching lines.</p>
</dd>
<dt><strong>- -color</strong>[<strong>=<code>WHEN</code></strong>], <strong>- -colour</strong>[<strong>=<code>WHEN</code></strong>]</dt>
<dd><p>Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets, and separators (for fields and groups of context lines) with escape sequences to display them in color on the terminal. The colors are defined by the environment variable <strong>GREP_COLORS</strong>. The deprecated environment variable <strong>GREP_COLOR</strong> is still supported, but its setting does not have priority. <code>WHEN</code> is <strong>never</strong>, <strong>always</strong>, or <strong>auto</strong>.</p>
</dd>
<dt><strong>-L</strong>, <strong>- -files-without-match</strong></dt>
<dd><p>Suppress normal output; instead print the name of each input file from which no output would normally have been printed.</p>
</dd>
<dt><strong>-l</strong>, <strong>- -files-with-matches</strong></dt>
<dd><p>Suppress normal output; instead print the name of each input file from which output would normally have been printed. Scanning each input file stops upon first match.</p>
</dd>
<dt><strong>-m</strong><code> NUM</code><strong>, - -max-count=</strong><code>NUM</code></dt>
<dd><p>Stop reading a file after <code>NUM</code> matching lines. If the input is standard input from a regular file, and <code>NUM</code> matching lines are output, <strong>grep</strong> ensures that the standard input is positioned to just after the last matching line before exiting, regardless of the presence of trailing context lines. This enables a calling process to resume a search. When <strong>grep</strong> stops after <code>NUM</code> matching lines, it outputs any trailing context lines. When the <strong>-c</strong> or <strong>- -count</strong> option is also used, <strong>grep</strong> does not output a count greater than <code>NUM</code>. When the <strong>-v</strong> or <strong>- -invert-match</strong> option is also used, <strong>grep</strong> stops after outputting <code>NUM</code> non-matching lines.</p>
</dd>
<dt><strong>-o</strong>, <strong>- -only-matching</strong></dt>
<dd><p>Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.</p>
</dd>
<dt><strong>-q</strong>, <strong>- -quiet</strong>, <strong>- -silent</strong></dt>
<dd><p>Quiet; do not write anything to standard output. Exit immediately with zero status if any match is found, even if an error was detected. Also see the <strong>-s</strong> or <strong>- -no-messages</strong> option.</p>
</dd>
<dt><strong>-s</strong>, <strong>- -no-messages</strong></dt>
<dd><p>Suppress error messages about nonexistent or unreadable files.</p>
</dd>
</dl>
<h2>Output Line Prefix Control</h2>
<dl>
<dt><strong>-b</strong>, <strong>- -byte-offset</strong></dt>
<dd><p>Print the 0-based byte offset within the input file before each line of output. If <strong>-o</strong> (<strong>- -only-matching</strong>) is specified, print the offset of the matching part itself.</p>
</dd>
<dt><strong>-H</strong>, <strong>- -with-filename</strong></dt>
<dd><p>Print the file name for each match. This is the default when there is more than one file to search. This is a GNU extension.</p>
</dd>
<dt><strong>-h</strong>, <strong>- -no-filename</strong></dt>
<dd><p>Suppress the prefixing of file names on output. This is the default when there is only one file (or only standard input) to search.</p>
</dd>
<dt><strong>- -label=</strong><code>LABEL</code></dt>
<dd><p>Display input actually coming from standard input as input coming from file <code>LABEL</code>. This can be useful for commands that transform a file's contents before searching, e.g., <strong>gzip -cd foo.gz | grep - -label=foo -H 'some pattern'</strong>. See also the <strong>-H</strong> option.</p>
</dd>
<dt><strong>-n</strong>, <strong>- -line-number</strong></dt>
<dd><p>Prefix each line of output with the 1-based line number within its input file.</p>
</dd>
<dt><strong>-T</strong>, <strong>- -initial-tab</strong></dt>
<dd><p>Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal. This is useful with options that prefix their output to the actual content: <strong>-H</strong>,<strong>-n</strong>, and <strong>-b</strong>. In order to improve the probability that lines from a single file will all start at the same column, this also causes the line number and byte offset (if present) to be printed in a minimum size field width.</p>
</dd>
<dt><strong>-Z</strong>, <strong>- -null</strong></dt>
<dd><p>Output a zero byte (the ASCII <strong>NUL</strong> character) instead of the character that normally follows a file name. For example, <strong>grep -lZ</strong> outputs a zero byte after each file name instead of the usual newline. This option makes the output unambiguous, even in the presence of file names containing unusual characters like newlines. This option can be used with commands like <strong>find -print0</strong>, <strong>perl -0</strong>, <strong>sort -z</strong>, and <strong>xargs -0</strong> to process arbitrary file names, even those that contain newline characters.</p>
</dd>
</dl>
<h2>Context Line Control</h2>
<dl>
<dt><strong>-A</strong><code> NUM</code><strong>, - -after-context=</strong><code>NUM</code></dt>
<dd><p>Print <code>NUM</code> lines of trailing context after matching lines. Places a line containing a group separator (<strong>- -</strong>) between contiguous groups of matches. With the <strong>-o</strong> or <strong>- -only-matching</strong> option, this has no effect and a warning is given.</p>
</dd>
<dt><strong>-B</strong><code> NUM</code><strong>, - -before-context=</strong><code>NUM</code></dt>
<dd><p>Print <code>NUM</code> lines of leading context before matching lines. Places a line containing a group separator (<strong>- -</strong>) between contiguous groups of matches. With the <strong>-o</strong> or <strong>- -only-matching</strong> option, this has no effect and a warning is given.</p>
</dd>
<dt><strong>-C</strong><code> NUM</code><strong>, -</strong><code>NUM</code><strong>, - -context=</strong><code>NUM</code></dt>
<dd><p>Print <code>NUM</code> lines of output context. Places a line containing a group separator (<strong>- -</strong>) between contiguous groups of matches. With the <strong>-o</strong> or <strong>- -only-matching</strong> option, this has no effect and a warning is given.</p>
</dd>
<dt><strong>- -group-separator=</strong><code>SEP</code></dt>
<dd><p>When <strong>-A</strong>, <strong>-B</strong>, or <strong>-C</strong> are in use, print <code>SEP</code> instead of <strong>- -</strong> between groups of lines.</p>
</dd>
<dt><strong>- -no-group-separator</strong></dt>
<dd><p>When <strong>-A</strong>, <strong>-B</strong>, or <strong>-C</strong> are in use, do not print a separator between groups of lines.</p>
</dd>
</dl>
<h2>File and Directory Selection</h2>
<dl>
<dt><strong>-a</strong>, <strong>- -text</strong></dt>
<dd><p>Process a binary file as if it were text; this is equivalent to the <strong>- -binary-files=text</strong> option.</p>
</dd>
<dt><strong>- -binary-files=</strong><code>TYPE</code></dt>
<dd><p>If a file's data or metadata indicate that the file contains binary data, assume that the file is of type <code>TYPE</code>. Non-text bytes indicate binary data; these are either output bytes that are improperly encoded for the current locale, or null input bytes when the <strong>-z</strong> option is not given.</p>
<p>By default, <code>TYPE</code> is <strong>binary</strong>, and <strong>grep</strong> suppresses output after null input binary data is discovered, and suppresses output lines that contain improperly encoded data. When some output is suppressed, <strong>grep</strong> follows any output with a one-line message saying that a binary file matches.</p>
<p>If <code>TYPE</code> is <strong>without-match</strong>, when <strong>grep</strong> discovers null input binary data it assumes that the rest of the file does not match; this is equivalent to the <strong>-I</strong> option.</p>
<p>If <code>TYPE</code> is <strong>text</strong>, <strong>grep</strong> processes a binary file as if it were text; this is equivalent to the <strong>-a</strong> option.</p>
<p>When <code>type</code> is <strong>binary</strong>, <strong>grep</strong> may treat non-text bytes as line terminators even without the <strong>-z</strong> option. This means choosing <strong>binary</strong> versus <strong>text</strong> can affect whether a pattern matches a file. For example, when <code>type</code> is <strong>binary</strong> the pattern <strong>q$ might</strong> match <strong>q</strong> immediately followed by a null byte, even though this is not matched when <code>type</code> is <strong>text</strong>. Conversely, when <code>type</code> is <strong>binary</strong> the pattern <strong>.</strong> (period) might not match a null byte.</p>
<p><code>Warning:</code> The <strong>-a</strong> option might output binary garbage, which can have nasty side effects if the output is a terminal and if the terminal driver interprets some of it as commands. On the other hand, when reading files whose text encodings are unknown, it can be helpful to use <strong>-a</strong> or to set <strong>LC_ALL='C'</strong> in the environment, in order to find more matches even if the matches are unsafe for direct display.</p>
</dd>
<dt><strong>-D</strong><code> ACTION</code><strong>, - -devices=</strong><code>ACTION</code></dt>
<dd><p>If an input file is a device, FIFO or socket, use <code>ACTION</code> to process it. By default, <code>ACTION</code> is <strong>read</strong>, which means that devices are read just as if they were ordinary files. If <code>ACTION</code> is <strong>skip</strong>, devices are silently skipped.</p>
</dd>
<dt><strong>-d</strong><code> ACTION</code><strong>, - -directories=</strong><code>ACTION</code></dt>
<dd><p>If an input file is a directory, use <code>ACTION</code> to process it. By default, <code>ACTION</code> is <strong>read</strong>, i.e., read directories just as if they were ordinary files. If <code>ACTION</code> is <strong>skip</strong>, silently skip directories. If <code>ACTION</code> is <strong>recurse</strong>, read all files under each directory, recursively, following symbolic links only if they are on the command line. This is equivalent to the <strong>-r</strong> option.</p>
</dd>
<dt><strong>- -exclude=</strong><code>GLOB</code></dt>
<dd><p>Skip any command-line file with a name suffix that matches the pattern <code>GLOB</code>, using wildcard matching; a name suffix is either the whole name, or a trailing part that starts with a non-slash character immediately after a slash (<strong>/</strong>) in the name. When searching recursively, skip any subfile whose base name matches <code>GLOB</code>; the base name is the part after the last slash. A pattern can use <strong>*</strong>, <strong>?</strong>, and <strong>[</strong>. . .<strong>]</strong> as wildcards, and <strong>\</strong> to quote a wildcard or backslash character literally.</p>
</dd>
<dt><strong>- -exclude-from=</strong><code>FILE</code></dt>
<dd><p>Skip files whose base name matches any of the file-name globs read from <code>FILE</code> (using wildcard matching as described under <strong>- -exclude</strong>).</p>
</dd>
<dt><strong>- -exclude-dir=</strong><code>GLOB</code></dt>
<dd><p>Skip any command-line directory with a name suffix that matches the pattern <code>GLOB</code>. When searching recursively, skip any subdirectory whose base name matches <code>GLOB</code>. Ignore any redundant trailing slashes in <code>GLOB</code>.</p>
</dd>
<dt><strong>-I</strong></dt>
<dd><p>Process a binary file as if it did not contain matching data; this is equivalent to the <strong>- -binary-files=without-match</strong> option.</p>
</dd>
<dt><strong>- -include=</strong><code>GLOB</code></dt>
<dd><p>Search only files whose base name matches <code>GLOB</code> (using wildcard matching as described under <strong>- -exclude</strong>). If contradictory <strong>- -include</strong> and <strong>- -exclude</strong> options are given, the last matching one wins. If no <strong>- -include</strong> or <strong>- -exclude</strong> options match, a file is included unless the first such option is <strong>- -include</strong>.</p>
</dd>
<dt><strong>-r</strong>, <strong>- -recursive</strong></dt>
<dd><p>Read all files under each directory, recursively, following symbolic links only if they are on the command line. Note that if no file operand is given, B&lt;grep&gt; searches the working directory. This is equivalent to the <strong>-d recurse</strong> option.</p>
</dd>
<dt><strong>-R</strong>, <strong>- -dereference-recursive</strong></dt>
<dd><p>Read all files under each directory, recursively. Follow all symbolic links, unlike <strong>-r</strong>.</p>
</dd>
</dl>
<h2>Other Options</h2>
<dl>
<dt><strong>- -line-buffered</strong></dt>
<dd><p>Use line buffering on output. This can cause a performance penalty.</p>
</dd>
<dt><strong>-U</strong>, <strong>- -binary</strong></dt>
<dd><p>Treat the file(s) as binary. By default, under MS-DOS and MS-Windows, <strong>grep</strong> guesses whether a file is text or binary as described for the <strong>- -binary-files</strong> option. If <strong>grep</strong> decides the file is a text file, it strips the CR characters from the original file contents (to make regular expressions with <strong>^</strong> and <strong>$</strong> work correctly). Specifying <strong>-U</strong> overrules this guesswork, causing all files to be read and passed to the matching mechanism verbatim; if the file is a text file with CR/LF pairs at the end of each line, this will cause some regular expressions to fail. This option has no effect on platforms other than MS-DOS and MS-Windows.</p>
</dd>
<dt><strong>-z</strong>, <strong>- -null-data</strong></dt>
<dd><p>Treat input and output data as sequences of lines, each terminated by a zero byte (the ASCII NUL character) instead of a newline. Like the <strong>-Z</strong> or <strong>- -null</strong> option, this option can be used with commands like <strong>sort -z</strong> to process arbitrary file names.</p>
</dd>
</dl>
</div></div></div><h1 id='regular-expressions'><a href='#regular-expressions'>REGULAR EXPRESSIONS</a></h1><div data-for='regular-expressions' data-hide><div class='section' data-for='regular-expressions'><div data-more>
<p>A regular expression is a pattern that describes a set of strings. Regular expressions are constructed analogously to arithmetic expressions, by using various operators to combine smaller expressions.</p>
<p><strong>grep</strong> understands three different versions of regular expression syntax: “basic'' (BRE), “extended'' (ERE) and “perl'' (PCRE). In GNU <strong>grep</strong> there is no difference in available functionality between basic and extended syntaxes. In other implementations, basic regular expressions are less powerful. The following description applies to extended regular expressions; differences for basic regular expressions are summarized afterwards. Perl-compatible regular expressions give additional functionality, and are documented in B&lt;pcresyntax&gt;(3) and B&lt;pcrepattern&gt;(3), but work only if PCRE support is enabled.</p>
<p>The fundamental building blocks are the regular expressions that match a single character. Most characters, including all letters and digits, are regular expressions that match themselves. Any meta-character with special meaning may be quoted by preceding it with a backslash.</p>
<p>The period <strong>.</strong> matches any single character. It is unspecified whether it matches an encoding error.</p>
<h2>Character Classes and Bracket Expressions</h2>
<p>A <code>bracket expression</code> is a list of characters enclosed by <strong>[</strong> and <strong>]</strong>. It matches any single character in that list. If the first character of the list is the caret <strong>^</strong> then it matches any character <code>not</code> in the list; it is unspecified whether it matches an encoding error. For example, the regular expression <strong>[0123456789]</strong> matches any single digit.</p>
<p>Within a bracket expression, a <code>range expression</code> consists of two characters separated by a hyphen. It matches any single character that sorts between the two characters, inclusive, using the locale's collating sequence and character set. For example, in the default C locale, <strong>[a-d]</strong> is equivalent to <strong>[abcd]</strong>. Many locales sort characters in dictionary order, and in these locales <strong>[a-d]</strong> is typically not equivalent to <strong>[abcd]</strong>; it might be equivalent to <strong>[aBbCcDd]</strong>, for example. To obtain the traditional interpretation of bracket expressions, you can use the C locale by setting the <strong>LC_ALL</strong> environment variable to the value <strong>C</strong>.</p>
<p>Finally, certain named classes of characters are predefined within bracket expressions, as follows. Their names are self explanatory, and they are <strong>[:alnum:]</strong>, <strong>[:alpha:]</strong>, <strong>[:blank:]</strong>, <strong>[:cntrl:]</strong>, <strong>[:digit:]</strong>, <strong>[:graph:]</strong>, <strong>[:lower:]</strong>, <strong>[:print:]</strong>, <strong>[:punct:]</strong>, <strong>[:space:]</strong>, <strong>[:upper:]</strong>, and <strong>[:xdigit:]</strong>. For example, <strong>[[:alnum:]]</strong> means the character class of numbers and letters in the current locale. In the C locale and ASCII character set encoding, this is the same as <strong>[0-9A-Za-z]</strong>. (Note that the brackets in these class names are part of the symbolic names, and must be included in addition to the brackets delimiting the bracket expression.) Most meta-characters lose their special meaning inside bracket expressions. To include a literal <strong>]</strong> place it first in the list. Similarly, to include a literal <strong>^</strong> place it anywhere but first. Finally, to include a literal <strong>-</strong> place it last.</p>
<h2>Anchoring</h2>
<p>The caret <strong>^</strong> and the dollar sign <strong>$</strong> are meta-characters that respectively match the empty string at the beginning and end of a line.</p>
<h2>The Backslash Character and Special Expressions</h2>
<p>The symbols <strong>\&lt;</strong> and <strong>\&gt;</strong> respectively match the empty string at the beginning and end of a word. The symbol <strong>\b</strong> matches the empty string at the edge of a word, and <strong>\B</strong> matches the empty string provided it's <code>not</code> at the edge of a word. The symbol <strong>\w</strong> is a synonym for <strong>[_[:alnum:]]</strong> and <strong>\W</strong> is a synonym for <strong>[^_[:alnum:]]</strong>.</p>
<h2>Repetition</h2>
<p>A regular expression may be followed by one of several repetition operators:</p>
<dl>
<dt><strong>?</strong></dt>
<dd><p>The preceding item is optional and matched at most once.</p>
</dd>
<dt><strong>*</strong></dt>
<dd><p>The preceding item will be matched zero or more times.</p>
</dd>
<dt><strong>+</strong></dt>
<dd><p>The preceding item will be matched one or more times.</p>
</dd>
<dt><strong>{</strong><code>n</code><strong>}</strong></dt>
<dd><p>The preceding item is matched exactly <code>n</code> times.</p>
</dd>
<dt><strong>{</strong><code>n</code><strong>,}</strong></dt>
<dd><p>The preceding item is matched <code>n</code> or more times.</p>
</dd>
<dt><strong>{,</strong><code>m</code><strong>}</strong></dt>
<dd><p>The preceding item is matched at most <code>m</code> times. This is a GNU extension.</p>
</dd>
<dt><strong>{</strong><code>n</code><strong>,</strong><code>m</code><strong>}</strong></dt>
<dd><p>The preceding item is matched at least <code>n</code> times, but not more than <code>m</code> times.</p>
</dd>
</dl>
<h2>Concatenation</h2>
<p>Two regular expressions may be concatenated; the resulting regular expression matches any string formed by concatenating two substrings that respectively match the concatenated expressions.</p>
<h2>Alternation</h2>
<p>Two regular expressions may be joined by the infix operator <strong>|</strong>; the resulting regular expression matches any string matching either alternate expression.</p>
<h2>Precedence</h2>
<p>Repetition takes precedence over concatenation, which in turn takes precedence over alternation. A whole expression may be enclosed in parentheses to override these precedence rules and form a subexpression.</p>
<h2>Back-references and Subexpressions</h2>
<p>The back-reference <strong>\</strong><code>n</code> , where <code>n</code> is a single digit, matches the substring previously matched by the <code>n</code>th parenthesized subexpression of the regular expression.</p>
<h2>Basic vs Extended Regular Expressions</h2>
<p>In basic regular expressions the meta-characters <strong>?</strong>, <strong>+</strong>, <strong>{</strong>, <strong>|</strong>, <strong>(</strong>, and <strong>)</strong> lose their special meaning; instead use the backslashed versions <strong>\?</strong>, <strong>\+</strong>, <strong>\{</strong>, <strong>\|</strong>, <strong>\(</strong>, and <strong>\)</strong>.</p>
</div></div></div><h1 id='exit-status'><a href='#exit-status'>EXIT STATUS</a></h1><div data-for='exit-status' data-hide><div class='section' data-for='exit-status'><div data-more>
<p>Normally the exit status is 0 if a line is selected, 1 if no lines were selected, and 2 if an error occurred. However, if the <strong>-q</strong> or <strong>- -quiet</strong> or <strong>- -silent</strong> is used and a line is selected, the exit status is 0 even if an error occurred.</p>
</div></div></div><h1 id='environment'><a href='#environment'>ENVIRONMENT</a></h1><div data-for='environment' data-hide><div class='section' data-for='environment'><div data-more>
<p>The behavior of <strong>grep</strong> is affected by the following environment variables.</p>
<p>The locale for category <strong>LC_</strong><code>foo</code> is specified by examining the three environment variables <strong>LC_ALL</strong>, <strong>LC_<code>foo</code></strong>, <strong>LANG</strong>, in that order. The first of these variables that is set specifies the locale. For example, if <strong>LC_ALL</strong> is not set, but <strong>LC_MESSAGES</strong> is set to <strong>pt_BR</strong>, then the Brazilian Portuguese locale is used for the <strong>LC_MESSAGES</strong> category. The C locale is used if none of these environment variables are set, if the locale catalog is not installed, or if <strong>grep</strong> was not compiled with national language support (NLS). The shell command <strong>locale -a</strong> lists locales that are currently available.</p>
<dl>
<dt><strong>GREP_COLOR</strong></dt>
<dd><p>This variable specifies the color used to highlight matched (non-empty) text. It is deprecated in favor of <strong>GREP_COLORS</strong>, but still supported. The <strong>mt</strong>, <strong>ms</strong>, and <strong>mc</strong> capabilities of <strong>GREP_COLORS</strong> have priority over it. It can only specify the color used to highlight the matching non-empty text in any matching line (a selected line when the <strong>-v</strong> command-line option is omitted, or a context line when <strong>-v</strong> is specified). The default is <strong>01;31</strong>, which means a bold red foreground text on the terminal's default background.</p>
</dd>
<dt><strong>GREP_COLORS</strong></dt>
<dd><p>Specifies the colors and other attributes used to highlight various parts of the output. Its value is a colon-separated list of capabilities that defaults to <strong>ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36</strong> with the <strong>rv</strong> and <strong>ne</strong> boolean capabilities omitted (i.e., false). Supported capabilities are as follows.</p>
<dl>
<dt><strong>sl=</strong></dt>
<dd><p>SGR substring for whole selected lines (i.e., matching lines when the <strong>-v</strong> command-line option is omitted, or non-matching lines when <strong>-v</strong> is specified). If however the boolean <strong>rv</strong> capability and the <strong>-v</strong> command-line option are both specified, it applies to context matching lines instead. The default is empty (i.e., the terminal's default color pair).</p>
</dd>
<dt><strong>cx=</strong></dt>
<dd><p>SGR substring for whole context lines (i.e., non-matching lines when the <strong>-v</strong> command-line option is omitted, or matching lines when <strong>-v</strong> is specified). If however the boolean <strong>rv</strong> capability and the <strong>-v</strong> command-line option are both specified, it applies to selected non-matching lines instead. The default is empty (i.e., the terminal's default color pair).</p>
</dd>
<dt><strong>rv</strong></dt>
<dd><p>Boolean value that reverses (swaps) the meanings of the <strong>sl=</strong> and <strong>cx=</strong> capabilities when the <strong>-v</strong> command-line option is specified. The default is false (i.e., the capability is omitted).</p>
</dd>
<dt><strong>mt=01;31</strong></dt>
<dd><p>SGR substring for matching non-empty text in any matching line (i.e., a selected line when the <strong>-v</strong> command-line option is omitted, or a context line when <strong>-v</strong> is specified). Setting this is equivalent to setting both <strong>ms=</strong> and <strong>mc=</strong> at once to the same value. The default is a bold red text foreground over the current line background.</p>
</dd>
<dt><strong>ms=01;31</strong></dt>
<dd><p>SGR substring for matching non-empty text in a selected line. (This is only used when the <strong>-v</strong> command-line option is omitted.) The effect of the <strong>sl=</strong> (or <strong>cx=</strong> if <strong>rv</strong>) capability remains active when this kicks in. The default is a bold red text foreground over the current line background.</p>
</dd>
<dt><strong>mc=01;31</strong></dt>
<dd><p>SGR substring for matching non-empty text in a context line. (This is only used when the <strong>-v</strong> command-line option is specified.) The effect of the <strong>cx=</strong> (or <strong>sl=</strong> if <strong>rv</strong>) capability remains active when this kicks in. The default is a bold red text foreground over the current line background.</p>
</dd>
<dt><strong>fn=35</strong></dt>
<dd><p>SGR substring for file names prefixing any content line. The default is a magenta text foreground over the terminal's default background.</p>
</dd>
<dt><strong>ln=32</strong></dt>
<dd><p>SGR substring for line numbers prefixing any content line. The default is a green text foreground over the terminal's default background.</p>
</dd>
<dt><strong>bn=32</strong></dt>
<dd><p>SGR substring for byte offsets prefixing any content line. The default is a green text foreground over the terminal's default background.</p>
</dd>
<dt><strong>se=36</strong></dt>
<dd><p>SGR substring for separators that are inserted between selected line fields (<strong>:</strong>), between context line fields, (<strong>-</strong>), and between groups of adjacent lines when nonzero context is specified (<strong>- -</strong>). The default is a cyan text foreground over the terminal's default background.</p>
</dd>
<dt><strong>ne</strong></dt>
<dd><p>Boolean value that prevents clearing to the end of line using Erase in Line (EL) to Right (<strong>\33[K</strong>) each time a colorized item ends. This is needed on terminals on which EL is not supported. It is otherwise useful on terminals for which the <strong>back_color_erase</strong> (<strong>bce</strong>) boolean terminfo capability does not apply, when the chosen highlight colors do not affect the background, or when EL is too slow or causes too much flicker. The default is false (i.e., the capability is omitted).</p>
</dd>
</dl>
<p>Note that boolean capabilities have no <strong>=</strong>. . . part. They are omitted (i.e., false) by default and become true when specified.</p>
<p>See the Select Graphic Rendition (SGR) section in the documentation of the text terminal that is used for permitted values and their meaning as character attributes. These substring values are integers in decimal representation and can be concatenated with semicolons. <strong>grep</strong> takes care of assembling the result into a complete SGR sequence (<strong>\33[</strong>. . .<strong>m</strong>). Common values to concatenate include <strong>1</strong> for bold, <strong>4</strong> for underline, <strong>5</strong> for blink, <strong>7</strong> for inverse, <strong>39</strong> for default foreground color, <strong>30</strong> to <strong>37</strong> for foreground colors, <strong>90</strong> to <strong>97</strong> for 16-color mode foreground colors, <strong>38;5;0</strong> to <strong>38;5;255</strong> for 88-color and 256-color modes foreground colors, <strong>49</strong> for default background color, <strong>40</strong> to <strong>47</strong> for background colors, <strong>100</strong> to <strong>107</strong> for 16-color mode background colors, and <strong>48;5;0</strong> to <strong>48;5;255</strong> for 88-color and 256-color modes background colors.</p>
</dd>
<dt><strong>LC_ALL</strong>, <strong>LC_COLLATE</strong>, <strong>LANG</strong></dt>
<dd><p>These variables specify the locale for the <strong>LC_COLLATE</strong> category, which determines the collating sequence used to interpret range expressions like <strong>[a-z]</strong>.</p>
</dd>
<dt><strong>LC_ALL</strong>, <strong>LC_CTYPE</strong>, <strong>LANG</strong></dt>
<dd><p>These variables specify the locale for the <strong>LC_CTYPE</strong> category, which determines the type of characters, e.g., which characters are whitespace. This category also determines the character encoding, that is, whether text is encoded in UTF-8, ASCII, or some other encoding. In the C or POSIX locale, all characters are encoded as a single byte and every byte is a valid character.</p>
</dd>
<dt><strong>LC_ALL</strong>, <strong>LC_MESSAGES</strong>, <strong>LANG</strong></dt>
<dd><p>These variables specify the locale for the <strong>LC_MESSAGES</strong> category, which determines the language that <strong>grep</strong> uses for messages. The default C locale uses American English messages.</p>
</dd>
<dt><strong>POSIXLY_CORRECT</strong></dt>
<dd><p>If set, <strong>grep</strong> behaves as POSIX requires; otherwise, <strong>grep</strong> behaves more like other GNU programs. POSIX requires that options that follow file names must be treated as file names; by default, such options are permuted to the front of the operand list and are treated as options. Also, POSIX requires that unrecognized options be diagnosed as “illegal'', but since they are not really against the law the default is to diagnose them as “invalid''. <strong>POSIXLY_CORRECT</strong> also disables <strong>_</strong><code>N</code><strong>_GNU_nonoption_argv_flags_</strong>, described below.</p>
</dd>
<dt><strong>_</strong><code>N</code><strong>_GNU_nonoption_argv_flags_</strong></dt>
<dd><p>(Here <code>N</code> is <strong>grep</strong>'s numeric process ID.) If the <code>i</code>th character of this environment variable's value is <strong>1</strong>, do not consider the <code>i</code>th operand of <strong>grep</strong> to be an option, even if it appears to be one. A shell can put this variable in the environment for each command it runs, specifying which operands are the results of file name wildcard expansion and therefore should not be treated as options. This behavior is available only with the GNU C library, and only when <strong>POSIXLY_CORRECT</strong> is not set.</p>
</dd>
</dl>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>This man page is maintained only fitfully; the full documentation is often more up-to-date.</p>
</div></div></div><h1 id='copyright'><a href='#copyright'>COPYRIGHT</a></h1><div data-for='copyright' data-hide><div class='section' data-for='copyright'><div data-more>
<p>Copyright 1998-2000, 2002, 2005-2021 Free Software Foundation, Inc.</p>
<p>This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>
</div></div></div><h1 id='bugs'><a href='#bugs'>BUGS</a></h1><div data-for='bugs' data-hide><div class='section' data-for='bugs'><div data-more>
<h2>Reporting Bugs</h2>
<p>Email bug reports to</p>
<p>the bug-reporting address</p>
<p>$*</p>
<p>An</p>
<p>email archive</p>
<p>$*</p>
<p>and a</p>
<p>bug tracker</p>
<p>$*</p>
<p>are available.</p>
<h2>Known Bugs</h2>
<p>Large repetition counts in the <strong>{</strong><code>n</code><strong>,</strong><code>m</code><strong>}</strong> construct may cause <strong>grep</strong> to use lots of memory. In addition, certain other obscure regular expressions require exponential time and space, and may cause <strong>grep</strong> to run out of memory.</p>
<p>Back-references are very slow, and may require exponential time.</p>
</div></div></div><h1 id='example'><a href='#example'>EXAMPLE</a></h1><div class='section' data-for='example'><div data-more>
<p>The following example outputs the location and contents of any line containing “f'' and ending in “.c'', within all files in the current directory whose names contain “g'' and end in “.h''. The <strong>-n</strong> option outputs line numbers, the <strong>--</strong> argument treats expansions of “*g*.h'' starting with “-'' as file names not options, and the empty file /dev/null causes file names to be output even if only one file name happens to be of the form “*g*.h''.</p>
<pre><code>$ grep -n -- 'f.*\.c$' *g*.h /dev/null
argmatch.h:1:/* definitions and prototypes for argmatch.c</code></pre>
<p>The only line that matches is line 1 of argmatch.h. Note that the regular expression syntax used in the pattern differs from the globbing syntax that the shell uses to match file names.</p>
</div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<h2>Regular Manual Pages</h2>
<p><a href='/1/awk'>awk</a>(1), <a href='/1/cmp'>cmp</a>(1), <a href='/1/diff'>diff</a>(1), <a href='/1/find'>find</a>(1), <a href='/1/perl'>perl</a>(1), <a href='/1/sed'>sed</a>(1), <a href='/1/sort'>sort</a>(1), <a href='/1/xargs'>xargs</a>(1), <a href='/2/read'>read</a>(2), <a href='/3/pcre'>pcre</a>(3), <a href='/3/pcresyntax'>pcresyntax</a>(3), <a href='/3/pcrepattern'>pcrepattern</a>(3), <a href='/5/terminfo'>terminfo</a>(5), <a href='/7/glob'>glob</a>(7), <a href='/7/regex'>regex</a>(7)</p>
<h2>Full Documentation</h2>
<p>A</p>
<p>complete manual</p>
<p>$*</p>
<p>is available. If the <strong>info</strong> and <strong>grep</strong> programs are properly installed at your site, the command</p>
<blockquote>
<p><strong>info grep</strong></p>
</blockquote>
<p>should give you access to the complete manual.<br/>
</p></div></div>


        </div>

    </body>

</html>