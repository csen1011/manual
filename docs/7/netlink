<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>netlink - communication between kernel and user space (AF_NETLINK)</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;asm/types.h&gt;</a>
<a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;sys/socket.h&gt;</a>
<a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;linux/netlink.h&gt;</a>

netlink_socket = socket(AF_NETLINK, socket_type, netlink_family);</code></pre>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>Netlink is used to transfer information between the kernel and user-space processes. It consists of a standard sockets-based interface for user space processes and an internal kernel API for kernel modules. The internal kernel interface is not documented in this manual page. There is also an obsolete netlink interface via netlink character devices; this interface is not documented here and is provided only for backward compatibility.</p>
<p>Netlink is a datagram-oriented service. Both <strong>SOCK_RAW</strong> and <strong>SOCK_DGRAM</strong> are valid values for <code>socket_type</code>. However, the netlink protocol does not distinguish between datagram and raw sockets.</p>
<p><code>netlink_family</code> selects the kernel module or netlink group to communicate with. The currently assigned netlink families are:</p>
<dl>
<dt><strong>NETLINK_ROUTE</strong></dt>
<dd><p>Receives routing and link updates and may be used to modify the routing tables (both IPv4 and IPv6), IP addresses, link parameters, neighbor setups, queueing disciplines, traffic classes and packet classifiers (see <a href='/7/rtnetlink'>rtnetlink</a>(7)).</p>
</dd>
<dt><strong>NETLINK_W1</strong> (Linux 2.6.13 to 2.16.17)</dt>
<dd><p>Messages from 1-wire subsystem.</p>
</dd>
<dt><strong>NETLINK_USERSOCK</strong></dt>
<dd><p>Reserved for user-mode socket protocols.</p>
</dd>
<dt><strong>NETLINK_FIREWALL</strong> (up to and including Linux 3.4)</dt>
<dd><p>Transport IPv4 packets from netfilter to user space. Used by <code>ip_queue</code> kernel module. After a long period of being declared obsolete (in favor of the more advanced <code>nfnetlink_queue</code> feature), <strong>NETLINK_FIREWALL</strong> was removed in Linux 3.5.</p>
</dd>
<dt><strong>NETLINK_SOCK_DIAG</strong> (since Linux 3.3)</dt>
<dd><p>Query information about sockets of various protocol families from the kernel (see <a href='/7/sock_diag'>sock_diag</a>(7)).</p>
</dd>
<dt><strong>NETLINK_INET_DIAG</strong> (since Linux 2.6.14)</dt>
<dd><p>An obsolete synonym for <strong>NETLINK_SOCK_DIAG</strong>.</p>
</dd>
<dt><strong>NETLINK_NFLOG</strong> (up to and including Linux 3.16)</dt>
<dd><p>Netfilter/iptables ULOG.</p>
</dd>
<dt><strong>NETLINK_XFRM</strong></dt>
<dd><p>IPsec.</p>
</dd>
<dt><strong>NETLINK_SELINUX</strong> (since Linux 2.6.4)</dt>
<dd><p>SELinux event notifications.</p>
</dd>
<dt><strong>NETLINK_ISCSI</strong> (since Linux 2.6.15)</dt>
<dd><p>Open-iSCSI.</p>
</dd>
<dt><strong>NETLINK_AUDIT</strong> (since Linux 2.6.6)</dt>
<dd><p>Auditing.</p>
</dd>
<dt><strong>NETLINK_FIB_LOOKUP</strong> (since Linux 2.6.13)</dt>
<dd><p>Access to FIB lookup from user space.</p>
</dd>
<dt><strong>NETLINK_CONNECTOR</strong> (since Linux 2.6.14)</dt>
<dd><p>Kernel connector. See <code>Documentation/driver-api/connector.rst</code> (or <code>/Documentation/connector/connector.*</code> in kernel 5.2 and earlier) in the Linux kernel source tree for further information.</p>
</dd>
<dt><strong>NETLINK_NETFILTER</strong> (since Linux 2.6.14)</dt>
<dd><p>Netfilter subsystem.</p>
</dd>
<dt><strong>NETLINK_SCSITRANSPORT</strong> (since Linux 2.6.19)</dt>
<dd><p>SCSI Transports.</p>
</dd>
<dt><strong>NETLINK_RDMA</strong> (since Linux 3.0)</dt>
<dd><p>Infiniband RDMA.</p>
</dd>
<dt><strong>NETLINK_IP6_FW</strong> (up to and including Linux 3.4)</dt>
<dd><p>Transport IPv6 packets from netfilter to user space. Used by <code>ip6_queue</code> kernel module.</p>
</dd>
<dt><strong>NETLINK_DNRTMSG</strong></dt>
<dd><p>DECnet routing messages.</p>
</dd>
<dt><strong>NETLINK_KOBJECT_UEVENT</strong> (since Linux 2.6.10)</dt>
<dd><p>Kernel messages to user space.</p>
</dd>
<dt><strong>NETLINK_GENERIC</strong> (since Linux 2.6.15)</dt>
<dd><p>Generic netlink family for simplified netlink usage.</p>
</dd>
<dt><strong>NETLINK_CRYPTO</strong> (since Linux 3.2)</dt>
<dd><p>Netlink interface to request information about ciphers registered with the kernel crypto API as well as allow configuration of the kernel crypto API.</p>
</dd>
</dl>
<p>Netlink messages consist of a byte stream with one or multiple <code>nlmsghdr</code> headers and associated payload. The byte stream should be accessed only with the standard <strong>NLMSG_*</strong> macros. See <a href='/3/netlink'>netlink</a>(3) for further information.</p>
<p>In multipart messages (multiple <code>nlmsghdr</code> headers with associated payload in one byte stream) the first and all following headers have the <strong>NLM_F_MULTI</strong> flag set, except for the last header which has the type <strong>NLMSG_DONE</strong>.</p>
<p>After each <code>nlmsghdr</code> the payload follows.</p>
<pre><code>struct nlmsghdr {
    __u32 nlmsg_len;    /* Length of message including header */
    __u16 nlmsg_type;   /* Type of message content */
    __u16 nlmsg_flags;  /* Additional flags */
    __u32 nlmsg_seq;    /* Sequence number */
    __u32 nlmsg_pid;    /* Sender port ID */
};</code></pre>
<p><code>nlmsg_type</code> can be one of the standard message types: <strong>NLMSG_NOOP</strong> message is to be ignored, <strong>NLMSG_ERROR</strong> message signals an error and the payload contains an <code>nlmsgerr</code> structure, <strong>NLMSG_DONE</strong> message terminates a multipart message.</p>
<pre><code>struct nlmsgerr {
    int error;        /* Negative errno or 0 for acknowledgements */
    struct nlmsghdr msg;  /* Message header that caused the error */
};</code></pre>
<p>A netlink family usually specifies more message types, see the appropriate manual pages for that, for example, <a href='/7/rtnetlink'>rtnetlink</a>(7) for <strong>NETLINK_ROUTE</strong>.</p>
<p>TABLE</p>
<p>TABLE</p>
<p>Note that <strong>NLM_F_ATOMIC</strong> requires the <strong>CAP_NET_ADMIN</strong> capability or an effective UID of 0.</p>
<p>TABLE</p>
<p><code>nlmsg_seq</code> and <code>nlmsg_pid</code> are used to track messages. <code>nlmsg_pid</code> shows the origin of the message. Note that there isn't a 1:1 relationship between <code>nlmsg_pid</code> and the PID of the process if the message originated from a netlink socket. See the <strong>ADDRESS FORMATS</strong> section for further information.</p>
<p>Both <code>nlmsg_seq</code> and <code>nlmsg_pid</code> are opaque to netlink core.</p>
<p>Netlink is not a reliable protocol. It tries its best to deliver a message to its destination(s), but may drop messages when an out-of-memory condition or other error occurs. For reliable transfer the sender can request an acknowledgement from the receiver by setting the <strong>NLM_F_ACK</strong> flag. An acknowledgment is an <strong>NLMSG_ERROR</strong> packet with the error field set to 0. The application must generate acknowledgements for received messages itself. The kernel tries to send an <strong>NLMSG_ERROR</strong> message for every failed packet. A user process should follow this convention too.</p>
<p>However, reliable transmissions from kernel to user are impossible in any case. The kernel can't send a netlink message if the socket buffer is full: the message will be dropped and the kernel and the user-space process will no longer have the same view of kernel state. It is up to the application to detect when this happens (via the <strong>ENOBUFS</strong> error returned by <a href='/2/recvmsg'>recvmsg</a>(2)) and resynchronize.</p>
<h2>Address formats</h2>
<p>The <code>sockaddr_nl</code> structure describes a netlink client in user space or in the kernel. A <code>sockaddr_nl</code> can be either unicast (only sent to one peer) or sent to netlink multicast groups (<code>nl_groups</code> not equal 0).</p>
<pre><code>struct sockaddr_nl {
    sa_family_t     nl_family;  /* AF_NETLINK */
    unsigned short  nl_pad;     /* Zero */
    pid_t           nl_pid;     /* Port ID */
    __u32           nl_groups;  /* Multicast groups mask */
};</code></pre>
<p><code>nl_pid</code> is the unicast address of netlink socket. It's always 0 if the destination is in the kernel. For a user-space process, <code>nl_pid</code> is usually the PID of the process owning the destination socket. However, <code>nl_pid</code> identifies a netlink socket, not a process. If a process owns several netlink sockets, then <code>nl_pid</code> can be equal to the process ID only for at most one socket. There are two ways to assign <code>nl_pid</code> to a netlink socket. If the application sets <code>nl_pid</code> before calling <a href='/2/bind'>bind</a>(2), then it is up to the application to make sure that <code>nl_pid</code> is unique. If the application sets it to 0, the kernel takes care of assigning it. The kernel assigns the process ID to the first netlink socket the process opens and assigns a unique <code>nl_pid</code> to every netlink socket that the process subsequently creates.</p>
<p><code>nl_groups</code> is a bit mask with every bit representing a netlink group number. Each netlink family has a set of 32 multicast groups. When <a href='/2/bind'>bind</a>(2) is called on the socket, the <code>nl_groups</code> field in the <code>sockaddr_nl</code> should be set to a bit mask of the groups which it wishes to listen to. The default value for this field is zero which means that no multicasts will be received. A socket may multicast messages to any of the multicast groups by setting <code>nl_groups</code> to a bit mask of the groups it wishes to send to when it calls <a href='/2/sendmsg'>sendmsg</a>(2) or does a <a href='/2/connect'>connect</a>(2). Only processes with an effective UID of 0 or the <strong>CAP_NET_ADMIN</strong> capability may send or listen to a netlink multicast group. Since Linux 2.6.13, messages can't be broadcast to multiple groups. Any replies to a message received for a multicast group should be sent back to the sending PID and the multicast group. Some Linux kernel subsystems may additionally allow other users to send and/or receive messages. As at Linux 3.0, the <strong>NETLINK_KOBJECT_UEVENT</strong>, <strong>NETLINK_GENERIC</strong>, <strong>NETLINK_ROUTE</strong>, and <strong>NETLINK_SELINUX</strong> groups allow other users to receive messages. No groups allow other users to send messages.</p>
<h2>Socket options</h2>
<p>To set or get a netlink socket option, call <a href='/2/getsockopt'>getsockopt</a>(2) to read or <a href='/2/setsockopt'>setsockopt</a>(2) to write the option with the option level argument set to <strong>SOL_NETLINK</strong>. Unless otherwise noted, <code>optval</code> is a pointer to an <code>int</code>.</p>
<dl>
<dt><strong>NETLINK_PKTINFO</strong> (since Linux 2.6.14)</dt>
<dd><p>Enable <strong>nl_pktinfo</strong> control messages for received packets to get the extended destination group number.</p>
</dd>
<dt><strong>NETLINK_ADD_MEMBERSHIP</strong>, <strong>NETLINK_DROP_MEMBERSHIP</strong> (since Linux 2.6.14)</dt>
<dd><p>Join/leave a group specified by <code>optval</code>.</p>
</dd>
<dt><strong>NETLINK_LIST_MEMBERSHIPS</strong> (since Linux 4.2)</dt>
<dd><p>Retrieve all groups a socket is a member of. <code>optval</code> is a pointer to <strong>__u32</strong> and <code>optlen</code> is the size of the array. The array is filled with the full membership set of the socket, and the required array size is returned in <code>optlen</code>.</p>
</dd>
<dt><strong>NETLINK_BROADCAST_ERROR</strong> (since Linux 2.6.30)</dt>
<dd><p>When not set, <strong>netlink_broadcast()</strong> only reports <strong>ESRCH</strong> errors and silently ignore <strong>ENOBUFS</strong> errors.</p>
</dd>
<dt><strong>NETLINK_NO_ENOBUFS</strong> (since Linux 2.6.30)</dt>
<dd><p>This flag can be used by unicast and broadcast listeners to avoid receiving <strong>ENOBUFS</strong> errors.</p>
</dd>
<dt><strong>NETLINK_LISTEN_ALL_NSID</strong> (since Linux 4.2)</dt>
<dd><p>When set, this socket will receive netlink notifications from all network namespaces that have an <code>nsid</code> assigned into the network namespace where the socket has been opened. The <code>nsid</code> is sent to user space via an ancillary data.</p>
</dd>
<dt><strong>NETLINK_CAP_ACK</strong> (since Linux 4.2)</dt>
<dd><p>The kernel may fail to allocate the necessary room for the acknowledgment message back to user space. This option trims off the payload of the original netlink message. The netlink message header is still included, so the user can guess from the sequence number which message triggered the acknowledgment.</p>
</dd>
</dl>
</div></div><h1 id='versions'><a href='#versions'>VERSIONS</a></h1><div data-for='versions' data-hide><div class='section' data-for='versions'><div data-more>
<p>The socket interface to netlink first appeared Linux 2.2.</p>
<p>Linux 2.0 supported a more primitive device-based netlink interface (which is still available as a compatibility option). This obsolete interface is not described here.</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>It is often better to use netlink via <code>libnetlink</code> or <code>libnl</code> than via the low-level kernel interface.</p>
</div></div></div><h1 id='bugs'><a href='#bugs'>BUGS</a></h1><div data-for='bugs' data-hide><div class='section' data-for='bugs'><div data-more>
<p>This manual page is not complete.</p>
</div></div></div><h1 id='examples'><a href='#examples'>EXAMPLES</a></h1><div class='section' data-for='examples'><div data-more>
<p>The following example creates a <strong>NETLINK_ROUTE</strong> netlink socket which will listen to the <strong>RTMGRP_LINK</strong> (network interface create/delete/up/down events) and <strong>RTMGRP_IPV4_IFADDR</strong> (IPv4 addresses add/delete events) multicast groups.</p>
<pre><code>struct sockaddr_nl sa;

memset(&amp;sa, 0, sizeof(sa));
sa.nl_family = AF_NETLINK;
sa.nl_groups = RTMGRP_LINK | RTMGRP_IPV4_IFADDR;

fd = socket(AF_NETLINK, SOCK_RAW, NETLINK_ROUTE);
bind(fd, (struct sockaddr *) &amp;sa, sizeof(sa));</code></pre>
<p>The next example demonstrates how to send a netlink message to the kernel (pid 0). Note that the application must take care of message sequence numbers in order to reliably track acknowledgements.</p>
<pre><code>struct nlmsghdr *nh;    /* The nlmsghdr with payload to send */
struct sockaddr_nl sa;
struct iovec iov = { nh, nh-&gt;nlmsg_len };
struct msghdr msg;

msg = { &amp;sa, sizeof(sa), &amp;iov, 1, NULL, 0, 0 };
memset(&amp;sa, 0, sizeof(sa));
sa.nl_family = AF_NETLINK;
nh-&gt;nlmsg_pid = 0;
nh-&gt;nlmsg_seq = ++sequence_number;
/* Request an ack from kernel by setting NLM_F_ACK */
nh-&gt;nlmsg_flags |= NLM_F_ACK;

sendmsg(fd, &amp;msg, 0);</code></pre>
<p>And the last example is about reading netlink message.</p>
<pre><code>int len;
/* 8192 to avoid message truncation on platforms with
   page size &gt; 4096 */
struct nlmsghdr buf[8192/sizeof(struct nlmsghdr)];
struct iovec iov = { buf, sizeof(buf) };
struct sockaddr_nl sa;
struct msghdr msg;
struct nlmsghdr *nh;

msg = { &amp;sa, sizeof(sa), &amp;iov, 1, NULL, 0, 0 };
len = recvmsg(fd, &amp;msg, 0);

for (nh = (struct nlmsghdr *) buf; NLMSG_OK (nh, len);
     nh = NLMSG_NEXT (nh, len)) {
    /* The end of multipart message */
    if (nh-&gt;nlmsg_type == NLMSG_DONE)
        return;

    if (nh-&gt;nlmsg_type == NLMSG_ERROR)
        /* Do some error handling */
    ...

    /* Continue with parsing payload */
    ...
}</code></pre>
</div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/3/cmsg'>cmsg</a>(3), <a href='/3/netlink'>netlink</a>(3), <a href='/7/capabilities'>capabilities</a>(7), <a href='/7/rtnetlink'>rtnetlink</a>(7), <a href='/7/sock_diag'>sock_diag</a>(7)</p>
<p><a href="<a href="ftp://ftp.inr.ac.ru/ip-routing/iproute2*">ftp://ftp.inr.ac.ru/ip-routing/iproute2*</a>">information about libnetlink</a></p>
<p><a href="<a href="http://www.infradead.org/~tgr/libnl/">http://www.infradead.org/~tgr/libnl/</a>">information about libnl</a></p>
<p>RFC 3549 "Linux Netlink as an IP Services Protocol"</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>