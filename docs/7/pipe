<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>pipe - overview of pipes and FIFOs</p>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>Pipes and FIFOs (also known as named pipes) provide a unidirectional interprocess communication channel. A pipe has a <code>read end</code> and a <code>write end</code>. Data written to the write end of a pipe can be read from the read end of the pipe.</p>
<p>A pipe is created using <a href='/2/pipe'>pipe</a>(2), which creates a new pipe and returns two file descriptors, one referring to the read end of the pipe, the other referring to the write end. Pipes can be used to create a communication channel between related processes; see <a href='/2/pipe'>pipe</a>(2) for an example.</p>
<p>A FIFO (short for First In First Out) has a name within the filesystem (created using <a href='/3/mkfifo'>mkfifo</a>(3)), and is opened using <a href='/2/open'>open</a>(2). Any process may open a FIFO, assuming the file permissions allow it. The read end is opened using the <strong>O_RDONLY</strong> flag; the write end is opened using the <strong>O_WRONLY</strong> flag. See <a href='/7/fifo'>fifo</a>(7) for further details. <code>Note</code>: although FIFOs have a pathname in the filesystem, I/O on FIFOs does not involve operations on the underlying device (if there is one).</p>
<h2>I/O on pipes and FIFOs</h2>
<p>The only difference between pipes and FIFOs is the manner in which they are created and opened. Once these tasks have been accomplished, I/O on pipes and FIFOs has exactly the same semantics.</p>
<p>If a process attempts to read from an empty pipe, then <a href='/2/read'>read</a>(2) will block until data is available. If a process attempts to write to a full pipe (see below), then <a href='/2/write'>write</a>(2) blocks until sufficient data has been read from the pipe to allow the write to complete. Nonblocking I/O is possible by using the <a href='/2/fcntl'>fcntl</a>(2) <strong>F_SETFL</strong> operation to enable the <strong>O_NONBLOCK</strong> open file status flag.</p>
<p>The communication channel provided by a pipe is a <code>byte stream</code>: there is no concept of message boundaries.</p>
<p>If all file descriptors referring to the write end of a pipe have been closed, then an attempt to <a href='/2/read'>read</a>(2) from the pipe will see end-of-file (<a href='/2/read'>read</a>(2) will return 0). If all file descriptors referring to the read end of a pipe have been closed, then a <a href='/2/write'>write</a>(2) will cause a <strong>SIGPIPE</strong> signal to be generated for the calling process. If the calling process is ignoring this signal, then <a href='/2/write'>write</a>(2) fails with the error <strong>EPIPE</strong>. An application that uses <a href='/2/pipe'>pipe</a>(2) and <a href='/2/fork'>fork</a>(2) should use suitable <a href='/2/close'>close</a>(2) calls to close unnecessary duplicate file descriptors; this ensures that end-of-file and <strong>SIGPIPE</strong>/<strong>EPIPE</strong> are delivered when appropriate.</p>
<p>It is not possible to apply <a href='/2/lseek'>lseek</a>(2) to a pipe.</p>
<h2>Pipe capacity</h2>
<p>A pipe has a limited capacity. If the pipe is full, then a <a href='/2/write'>write</a>(2) will block or fail, depending on whether the <strong>O_NONBLOCK</strong> flag is set (see below). Different implementations have different limits for the pipe capacity. Applications should not rely on a particular capacity: an application should be designed so that a reading process consumes data as soon as it is available, so that a writing process does not remain blocked.</p>
<p>In Linux versions before 2.6.11, the capacity of a pipe was the same as the system page size (e.g., 4096 bytes on i386). Since Linux 2.6.11, the pipe capacity is 16 pages (i.e., 65,536 bytes in a system with a page size of 4096 bytes). Since Linux 2.6.35, the default pipe capacity is 16 pages, but the capacity can be queried and set using the <a href='/2/fcntl'>fcntl</a>(2) <strong>F_GETPIPE_SZ</strong> and <strong>F_SETPIPE_SZ</strong> operations. See <a href='/2/fcntl'>fcntl</a>(2) for more information.</p>
<p>The following <a href='/2/ioctl'>ioctl</a>(2) operation, which can be applied to a file descriptor that refers to either end of a pipe, places a count of the number of unread bytes in the pipe in the <code>int</code> buffer pointed to by the final argument of the call:</p>
<p>ioctl(fd, FIONREAD, &amp;nbytes);</p>
<p>The <strong>FIONREAD</strong> operation is not specified in any standard, but is provided on many implementations. On Linux, the following files control how much memory can be used for pipes:</p>
<dl>
<dt><code>/proc/sys/fs/pipe-max-pages</code> (only in Linux 2.6.34)</dt>
<dd><p>An upper limit, in pages, on the capacity that an unprivileged user (one without the <strong>CAP_SYS_RESOURCE</strong> capability) can set for a pipe.</p>
<p>The default value for this limit is 16 times the default pipe capacity (see above); the lower limit is two pages.</p>
<p>This interface was removed in Linux 2.6.35, in favor of <code>/proc/sys/fs/pipe-max-size</code>.</p>
</dd>
<dt><code>/proc/sys/fs/pipe-max-size</code> (since Linux 2.6.35)</dt>
<dd><p>The maximum size (in bytes) of individual pipes that can be set by users without the <strong>CAP_SYS_RESOURCE</strong> capability. The value assigned to this file may be rounded upward, to reflect the value actually employed for a convenient implementation. To determine the rounded-up value, display the contents of this file after assigning a value to it.</p>
<p>The default value for this file is 1048576 (1 MiB). The minimum value that can be assigned to this file is the system page size. Attempts to set a limit less than the page size cause <a href='/2/write'>write</a>(2) to fail with the error <strong>EINVAL</strong>.</p>
<p>Since Linux 4.9, the value on this file also acts as a ceiling on the default capacity of a new pipe or newly opened FIFO.</p>
</dd>
<dt><code>/proc/sys/fs/pipe-user-pages-hard</code> (since Linux 4.5)</dt>
<dd><p>The hard limit on the total size (in pages) of all pipes created or set by a single unprivileged user (i.e., one with neither the <strong>CAP_SYS_RESOURCE</strong> nor the <strong>CAP_SYS_ADMIN</strong> capability). So long as the total number of pages allocated to pipe buffers for this user is at this limit, attempts to create new pipes will be denied, and attempts to increase a pipe's capacity will be denied.</p>
<p>When the value of this limit is zero (which is the default), no hard limit is applied.</p>
</dd>
<dt><code>/proc/sys/fs/pipe-user-pages-soft</code> (since Linux 4.5)</dt>
<dd><p>The soft limit on the total size (in pages) of all pipes created or set by a single unprivileged user (i.e., one with neither the <strong>CAP_SYS_RESOURCE</strong> nor the <strong>CAP_SYS_ADMIN</strong> capability). So long as the total number of pages allocated to pipe buffers for this user is at this limit, individual pipes created by a user will be limited to one page, and attempts to increase a pipe's capacity will be denied.</p>
<p>When the value of this limit is zero, no soft limit is applied. The default value for this file is 16384, which permits creating up to 1024 pipes with the default capacity.</p>
</dd>
</dl>
<p>Before Linux 4.9, some bugs affected the handling of the <code>pipe-user-pages-soft</code> and <code>pipe-user-pages-hard</code> limits; see BUGS. POSIX.1 says that <a href='/2/write'>write</a>(2)s of less than <strong>PIPE_BUF</strong> bytes must be atomic: the output data is written to the pipe as a contiguous sequence. Writes of more than <strong>PIPE_BUF</strong> bytes may be nonatomic: the kernel may interleave the data with data written by other processes. POSIX.1 requires <strong>PIPE_BUF</strong> to be at least 512 bytes. (On Linux, <strong>PIPE_BUF</strong> is 4096 bytes.) The precise semantics depend on whether the file descriptor is nonblocking (<strong>O_NONBLOCK</strong>), whether there are multiple writers to the pipe, and on <code>n</code>, the number of bytes to be written:</p>
<dl>
<dt><strong>O_NONBLOCK</strong> disabled, <code>n</code> &lt;= <strong>PIPE_BUF</strong></dt>
<dd><p>All <code>n</code> bytes are written atomically; <a href='/2/write'>write</a>(2) may block if there is not room for <code>n</code> bytes to be written immediately</p>
</dd>
<dt><strong>O_NONBLOCK</strong> enabled, <code>n</code> &lt;= <strong>PIPE_BUF</strong></dt>
<dd><p>If there is room to write <code>n</code> bytes to the pipe, then <a href='/2/write'>write</a>(2) succeeds immediately, writing all <code>n</code> bytes; otherwise <a href='/2/write'>write</a>(2) fails, with <code>errno</code> set to <strong>EAGAIN</strong>.</p>
</dd>
<dt><strong>O_NONBLOCK</strong> disabled, <code>n</code> &gt; <strong>PIPE_BUF</strong></dt>
<dd><p>The write is nonatomic: the data given to <a href='/2/write'>write</a>(2) may be interleaved with <a href='/2/write'>write</a>(2)s by other process; the <a href='/2/write'>write</a>(2) blocks until <code>n</code> bytes have been written.</p>
</dd>
<dt><strong>O_NONBLOCK</strong> enabled, <code>n</code> &gt; <strong>PIPE_BUF</strong></dt>
<dd><p>If the pipe is full, then <a href='/2/write'>write</a>(2) fails, with <code>errno</code> set to <strong>EAGAIN</strong>. Otherwise, from 1 to <code>n</code> bytes may be written (i.e., a "partial write" may occur; the caller should check the return value from <a href='/2/write'>write</a>(2) to see how many bytes were actually written), and these bytes may be interleaved with writes by other processes.</p>
</dd>
</dl>
<h2>Open file status flags</h2>
<p>The only open file status flags that can be meaningfully applied to a pipe or FIFO are <strong>O_NONBLOCK</strong> and <strong>O_ASYNC</strong>.</p>
<p>Setting the <strong>O_ASYNC</strong> flag for the read end of a pipe causes a signal (<strong>SIGIO</strong> by default) to be generated when new input becomes available on the pipe. The target for delivery of signals must be set using the <a href='/2/fcntl'>fcntl</a>(2) <strong>F_SETOWN</strong> command. On Linux, <strong>O_ASYNC</strong> is supported for pipes and FIFOs only since kernel 2.6.</p>
<h2>Portability notes</h2>
<p>On some systems (but not Linux), pipes are bidirectional: data can be transmitted in both directions between the pipe ends. POSIX.1 requires only unidirectional pipes. Portable applications should avoid reliance on bidirectional pipe semantics.</p>
<h2>BUGS</h2>
<p>Before Linux 4.9, some bugs affected the handling of the <code>pipe-user-pages-soft</code> and <code>pipe-user-pages-hard</code> limits when using the <a href='/2/fcntl'>fcntl</a>(2) <strong>F_SETPIPE_SZ</strong> operation to change a pipe's capacity:</p>
<ol type="1">
<li><p>When increasing the pipe capacity, the checks against the soft and hard limits were made against existing consumption, and excluded the memory required for the increased pipe capacity. The new increase in pipe capacity could then push the total memory used by the user for pipes (possibly far) over a limit. (This could also trigger the problem described next.)</p>
<p>Starting with Linux 4.9, the limit checking includes the memory required for the new pipe capacity.</p></li>
<li><p>The limit checks were performed even when the new pipe capacity was less than the existing pipe capacity. This could lead to problems if a user set a large pipe capacity, and then the limits were lowered, with the result that the user could no longer decrease the pipe capacity.</p>
<p>Starting with Linux 4.9, checks against the limits are performed only when increasing a pipe's capacity; an unprivileged user can always decrease a pipe's capacity.</p></li>
<li><p>The accounting and checking against the limits were done as follows:</p></li>
</ol>
<blockquote>
<ol type="a">
<li><p>Test whether the user has exceeded the limit.</p></li>
<li><p>Make the new pipe buffer allocation.</p></li>
<li><p>Account new allocation against the limits.</p></li>
</ol>
</blockquote>
<blockquote>
<p>This was racey. Multiple processes could pass point (a) simultaneously, and then allocate pipe buffers that were accounted for only in step (c), with the result that the user's pipe buffer allocation could be pushed over the limit.</p>
<p>Starting with Linux 4.9, the accounting step is performed before doing the allocation, and the operation fails if the limit would be exceeded.</p>
</blockquote>
<p>Before Linux 4.9, bugs similar to points (1) and (3) could also occur when the kernel allocated memory for a new pipe buffer; that is, when calling <a href='/2/pipe'>pipe</a>(2) and when opening a previously unopened FIFO.</p>
</div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/1/mkfifo'>mkfifo</a>(1), <a href='/2/dup'>dup</a>(2), <a href='/2/fcntl'>fcntl</a>(2), <a href='/2/open'>open</a>(2), <a href='/2/pipe'>pipe</a>(2), <a href='/2/poll'>poll</a>(2), <a href='/2/select'>select</a>(2), <a href='/2/socketpair'>socketpair</a>(2), <a href='/2/splice'>splice</a>(2), <a href='/2/stat'>stat</a>(2), <a href='/2/tee'>tee</a>(2), <a href='/2/vmsplice'>vmsplice</a>(2), <a href='/3/mkfifo'>mkfifo</a>(3), <a href='/7/epoll'>epoll</a>(7), <a href='/7/fifo'>fifo</a>(7)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>