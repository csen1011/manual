<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>strtok, strtok_r - extract tokens from strings</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;string.h&gt;</a>

<a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>strtok(<a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>str, <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>const char *</a>delim);

<a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>strtok_r(<a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>str, <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>const char *</a>delim, <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>*saveptr);</code></pre>
<blockquote>
<p>Feature Test Macro Requirements for glibc (see <a href='/7/feature_test_macros'>feature_test_macros</a>(7)):</p>
</blockquote><div data-hide>
<p><a href='strtok_r'>strtok_r</a>(): _POSIX_C_SOURCE || /* Glibc versions &lt;= 2.19: */ _BSD_SOURCE || _SVID_SOURCE</p>
</div></div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The <a href='strtok'>strtok</a>() function breaks a string into a sequence of zero or more nonempty tokens. On the first call to <a href='strtok'>strtok</a>(), the string to be parsed should be specified in <code>str</code>. In each subsequent call that should parse the same string, <code>str</code> must be NULL.</p>
<p>The <code>delim</code> argument specifies a set of bytes that delimit the tokens in the parsed string. The caller may specify different strings in <code>delim</code> in successive calls that parse the same string.</p>
<p>Each call to <a href='strtok'>strtok</a>() returns a pointer to a null-terminated string containing the next token. This string does not include the delimiting byte. If no more tokens are found, <a href='strtok'>strtok</a>() returns NULL.</p>
<p>A sequence of calls to <a href='strtok'>strtok</a>() that operate on the same string maintains a pointer that determines the point from which to start searching for the next token. The first call to <a href='strtok'>strtok</a>() sets this pointer to point to the first byte of the string. The start of the next token is determined by scanning forward for the next nondelimiter byte in <code>str</code>. If such a byte is found, it is taken as the start of the next token. If no such byte is found, then there are no more tokens, and <a href='strtok'>strtok</a>() returns NULL. (A string that is empty or that contains only delimiters will thus cause <a href='strtok'>strtok</a>() to return NULL on the first call.)</p>
<p>The end of each token is found by scanning forward until either the next delimiter byte is found or until the terminating null byte ('\0') is encountered. If a delimiter byte is found, it is overwritten with a null byte to terminate the current token, and <a href='strtok'>strtok</a>() saves a pointer to the following byte; that pointer will be used as the starting point when searching for the next token. In this case, <a href='strtok'>strtok</a>() returns a pointer to the start of the found token.</p>
<p>From the above description, it follows that a sequence of two or more contiguous delimiter bytes in the parsed string is considered to be a single delimiter, and that delimiter bytes at the start or end of the string are ignored. Put another way: the tokens returned by <a href='strtok'>strtok</a>() are always nonempty strings. Thus, for example, given the string "<code>aaa;;bbb,</code>", successive calls to <a href='strtok'>strtok</a>() that specify the delimiter string "<code>;,</code>" would return the strings "<code>aaa</code>" and "<code>bbb</code>", and then a null pointer.</p>
<p>The <a href='strtok_r'>strtok_r</a>() function is a reentrant version of <a href='strtok'>strtok</a>(). The <code>saveptr</code> argument is a pointer to a <code><a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a></code> variable that is used internally by <a href='strtok_r'>strtok_r</a>() in order to maintain context between successive calls that parse the same string.</p>
<p>On the first call to <a href='strtok_r'>strtok_r</a>(), <code>str</code> should point to the string to be parsed, and the value of <code>*saveptr</code> is ignored (but see NOTES). In subsequent calls, <code>str</code> should be NULL, and <code>saveptr</code> (and the buffer that it points to) should be unchanged since the previous call.</p>
<p>Different strings may be parsed concurrently using sequences of calls to <a href='strtok_r'>strtok_r</a>() that specify different <code>saveptr</code> arguments.</p>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>The <a href='strtok'>strtok</a>() and <a href='strtok_r'>strtok_r</a>() functions return a pointer to the next token, or NULL if there are no more tokens.</p>
</div></div><h1 id='examples'><a href='#examples'>EXAMPLES</a></h1><div class='section' data-for='examples'><div data-more>
<p>The program below uses nested loops that employ <a href='strtok_r'>strtok_r</a>() to break a string into a two-level hierarchy of tokens. The first command-line argument specifies the string to be parsed. The second argument specifies the delimiter byte(s) to be used to separate that string into "major" tokens. The third argument specifies the delimiter byte(s) to be used to separate the "major" tokens into subtokens.</p>
<p>An example of the output produced by this program is the following:</p>
<pre><code>$ ./a.out 'a/bbb///cc;xxx:yyy:' ':;' '/'
1: a/bbb///cc
         --&gt; a
         --&gt; bbb
         --&gt; cc
2: xxx
         --&gt; xxx
3: yyy
         --&gt; yyy</code></pre>
<h2>Program source</h2>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int
main(int argc, <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>argv[])
{
    <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>str1, *str2, *token, *subtoken;
    <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>saveptr1, *saveptr2;

    if (argc != 4) {
        fprintf(stderr, "Usage: %s string delim subdelim\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    for (int j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
        token = strtok_r(str1, argv[2], &amp;saveptr1);
        if (token == NULL)
            break;
        printf("%d: %s\n", j, token);

        for (str2 = token; ; str2 = NULL) {
            subtoken = strtok_r(str2, argv[3], &amp;saveptr2);
            if (subtoken == NULL)
                break;
            printf("	 --&gt; %s\n", subtoken);
        }
    }

    exit(EXIT_SUCCESS);
}</code></pre>
<p>Another example program using <a href='strtok'>strtok</a>() can be found in <a href='/3/getaddrinfo_a'>getaddrinfo_a</a>(3).</p>
</div></div><h1 id='attributes'><a href='#attributes'>ATTRIBUTES</a></h1><div data-for='attributes' data-hide><div class='section' data-for='attributes'><div data-more>
<p>For an explanation of the terms used in this section, see <a href='/7/attributes'>attributes</a>(7).</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: left;">Interface</td>
<td style="text-align: left;">Attribute</td>
<td style="text-align: left;">Value</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href='strtok'>strtok</a>()</td>
<td style="text-align: left;">Thread safety</td>
<td style="text-align: left;">MT-Unsafe race:strtok</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><a href='strtok_r'>strtok_r</a>()</td>
<td style="text-align: left;">Thread safety</td>
<td style="text-align: left;">MT-Safe</td>
</tr>
</tbody>
</table>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<dl>
<dt><a href='strtok'>strtok</a>()</dt>
<dd><p>POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.</p>
</dd>
<dt><a href='strtok_r'>strtok_r</a>()</dt>
<dd><p>POSIX.1-2001, POSIX.1-2008.</p>
</dd>
</dl>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>On some implementations, <code>*saveptr</code> is required to be NULL on the first call to <a href='strtok_r'>strtok_r</a>() that is being used to parse <code>str</code>.</p>
</div></div></div><h1 id='bugs'><a href='#bugs'>BUGS</a></h1><div data-for='bugs' data-hide><div class='section' data-for='bugs'><div data-more>
<p>Be cautious when using these functions. If you do use them, note that:</p>
<ul>
<li><p>These functions modify their first argument.</p></li>
<li><p>These functions cannot be used on constant strings.</p></li>
<li><p>The identity of the delimiting byte is lost.</p></li>
<li><p>The <a href='strtok'>strtok</a>() function uses a static buffer while parsing, so it's not thread safe. Use <a href='strtok_r'>strtok_r</a>() if this matters to you.</p></li>
</ul>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/3/index'>index</a>(3), <a href='/3/memchr'>memchr</a>(3), <a href='/3/rindex'>rindex</a>(3), <a href='/3/strchr'>strchr</a>(3), <a href='/3/string'>string</a>(3), <a href='/3/strpbrk'>strpbrk</a>(3), <a href='/3/strsep'>strsep</a>(3), <a href='/3/strspn'>strspn</a>(3), <a href='/3/strstr'>strstr</a>(3), <a href='/3/wcstok'>wcstok</a>(3)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>