<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>pthread_mutexattr_getrobust, pthread_mutexattr_setrobust - get and set the robustness attribute of a mutex attributes object</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;pthread.h&gt;</a>

int pthread_mutexattr_getrobust(const pthread_mutexattr_t *attr,
 int *robustness);
int pthread_mutexattr_setrobust(const pthread_mutexattr_t *attr,
 int robustness);</code></pre>
<p>Compile and link with <code>-pthread</code>.</p>
<blockquote>
<p>Feature Test Macro Requirements for glibc (see <a href='/7/feature_test_macros'>feature_test_macros</a>(7)):</p>
</blockquote><div data-hide>
<p><a href='pthread_mutexattr_getrobust'>pthread_mutexattr_getrobust</a>(), <a href='pthread_mutexattr_setrobust'>pthread_mutexattr_setrobust</a>():<br/>
</p>
<blockquote>
<p>_POSIX_C_SOURCE &gt;= 200809L</p>
</blockquote>
</div></div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The <a href='pthread_mutexattr_getrobust'>pthread_mutexattr_getrobust</a>() function places the value of the robustness attribute of the mutex attributes object referred to by <code>attr</code> in <code>*robustness</code>. The <a href='pthread_mutexattr_setrobust'>pthread_mutexattr_setrobust</a>() function sets the value of the robustness attribute of the mutex attributes object referred to by <code>attr</code> to the value specified in <code>*robustness</code>.</p>
<p>The robustness attribute specifies the behavior of the mutex when the owning thread dies without unlocking the mutex. The following values are valid for <code>robustness</code>:</p>
<dl>
<dt><strong>PTHREAD_MUTEX_STALLED</strong></dt>
<dd><p>This is the default value for a mutex attributes object. If a mutex is initialized with the <strong>PTHREAD_MUTEX_STALLED</strong> attribute and its owner dies without unlocking it, the mutex remains locked afterwards and any future attempts to call <a href='/3/pthread_mutex_lock'>pthread_mutex_lock</a>(3) on the mutex will block indefinitely.</p>
</dd>
<dt><strong>PTHREAD_MUTEX_ROBUST</strong></dt>
<dd><p>If a mutex is initialized with the <strong>PTHREAD_MUTEX_ROBUST</strong> attribute and its owner dies without unlocking it, any future attempts to call <a href='/3/pthread_mutex_lock'>pthread_mutex_lock</a>(3) on this mutex will succeed and return <strong>EOWNERDEAD</strong> to indicate that the original owner no longer exists and the mutex is in an inconsistent state. Usually after <strong>EOWNERDEAD</strong> is returned, the next owner should call <a href='/3/pthread_mutex_consistent'>pthread_mutex_consistent</a>(3) on the acquired mutex to make it consistent again before using it any further.</p>
<p>If the next owner unlocks the mutex using <a href='/3/pthread_mutex_unlock'>pthread_mutex_unlock</a>(3) before making it consistent, the mutex will be permanently unusable and any subsequent attempts to lock it using <a href='/3/pthread_mutex_lock'>pthread_mutex_lock</a>(3) will fail with the error <strong>ENOTRECOVERABLE</strong>. The only permitted operation on such a mutex is <a href='/3/pthread_mutex_destroy'>pthread_mutex_destroy</a>(3).</p>
<p>If the next owner terminates before calling <a href='/3/pthread_mutex_consistent'>pthread_mutex_consistent</a>(3), further <a href='/3/pthread_mutex_lock'>pthread_mutex_lock</a>(3) operations on this mutex will still return <strong>EOWNERDEAD</strong>.</p>
</dd>
</dl>
<p>Note that the <code>attr</code> argument of <a href='pthread_mutexattr_getrobust'>pthread_mutexattr_getrobust</a>() and <a href='pthread_mutexattr_setrobust'>pthread_mutexattr_setrobust</a>() should refer to a mutex attributes object that was initialized by <a href='/3/pthread_mutexattr_init'>pthread_mutexattr_init</a>(3), otherwise the behavior is undefined.</p>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>On success, these functions return 0. On error, they return a positive error number.</p>
<p>In the glibc implementation, <a href='pthread_mutexattr_getrobust'>pthread_mutexattr_getrobust</a>() always return zero.</p>
</div></div><h1 id='examples'><a href='#examples'>EXAMPLES</a></h1><div class='section' data-for='examples'><div data-more>
<p>The program below demonstrates the use of the robustness attribute of a mutex attributes object. In this program, a thread holding the mutex dies prematurely without unlocking the mutex. The main thread subsequently acquires the mutex successfully and gets the error <strong>EOWNERDEAD</strong>, after which it makes the mutex consistent.</p>
<p>The following shell session shows what we see when running this program:</p>
<pre><code>$ ./a.out
[original owner] Setting lock...
[original owner] Locked. Now exiting without unlocking.
[main] Attempting to lock the robust mutex.
[main] pthread_mutex_lock() returned EOWNERDEAD
[main] Now make the mutex consistent
[main] Mutex is now consistent; unlocking</code></pre>
<h2>Program source</h2>
<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;pthread.h&gt;
#include &lt;errno.h&gt;

#define handle_error_en(en, msg) \
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static pthread_mutex_t mtx;

static void *
original_owner_thread(void *ptr)
{
    printf("[original owner] Setting lock...\n");
    pthread_mutex_lock(&amp;mtx);
    printf("[original owner] Locked. Now exiting without unlocking.\n");
    pthread_exit(NULL);
}

int
main(int argc, <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>argv[])
{
    pthread_t thr;
    pthread_mutexattr_t attr;
    int s;

    pthread_mutexattr_init(&amp;attr);
                                /* initialize the attributes object */
    pthread_mutexattr_setrobust(&amp;attr, PTHREAD_MUTEX_ROBUST);
                               /* set robustness */

    pthread_mutex_init(&amp;mtx, &amp;attr);   /* initialize the mutex */

    pthread_create(&amp;thr, NULL, original_owner_thread, NULL);

    sleep(2);

    /* "original_owner_thread" should have exited by now */

    printf("[main] Attempting to lock the robust mutex.\n");
    s = pthread_mutex_lock(&amp;mtx);
    if (s == EOWNERDEAD) {
        printf("[main] pthread_mutex_lock() returned EOWNERDEAD\n");
        printf("[main] Now make the mutex consistent\n");
        s = pthread_mutex_consistent(&amp;mtx);
        if (s != 0)
            handle_error_en(s, "pthread_mutex_consistent");
        printf("[main] Mutex is now consistent; unlocking\n");
        s = pthread_mutex_unlock(&amp;mtx);
        if (s != 0)
            handle_error_en(s, "pthread_mutex_unlock");

        exit(EXIT_SUCCESS);
    } else if (s == 0) {
        printf("[main] pthread_mutex_lock() unexpectedly succeeded\n");
        exit(EXIT_FAILURE);
    } else {
        printf("[main] pthread_mutex_lock() unexpectedly failed\n");
        handle_error_en(s, "pthread_mutex_lock");
    }
}</code></pre>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<dl>
<dt><strong>EINVAL</strong></dt>
<dd><p>A value other than <strong>PTHREAD_MUTEX_STALLED</strong> or <strong>PTHREAD_MUTEX_ROBUST</strong> was passed to <a href='pthread_mutexattr_setrobust'>pthread_mutexattr_setrobust</a>().</p>
</dd>
</dl>
</div></div></div><h1 id='versions'><a href='#versions'>VERSIONS</a></h1><div data-for='versions' data-hide><div class='section' data-for='versions'><div data-more>
<p><a href='pthread_mutexattr_getrobust'>pthread_mutexattr_getrobust</a>() and <a href='pthread_mutexattr_setrobust'>pthread_mutexattr_setrobust</a>() were added to glibc in version 2.12.</p>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p>POSIX.1-2008.</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>In the Linux implementation, when using process-shared robust mutexes, a waiting thread also receives the <strong>EOWNERDEAD</strong> notification if the owner of a robust mutex performs an <a href='/2/execve'>execve</a>(2) without first unlocking the mutex. POSIX.1 does not specify this detail, but the same behavior also occurs in at least some other implementations.</p>
<p>Before the addition of <a href='pthread_mutexattr_getrobust'>pthread_mutexattr_getrobust</a>() and <a href='pthread_mutexattr_setrobust'>pthread_mutexattr_setrobust</a>() to POSIX, glibc defined the following equivalent nonstandard functions if <strong>_GNU_SOURCE</strong> was defined:</p>
<pre><code>int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t *attr,
 int *robustness);
int pthread_mutexattr_setrobust_np(const pthread_mutexattr_t *attr,
 int robustness);</code></pre>
<p>Correspondingly, the constants <strong>PTHREAD_MUTEX_STALLED_NP</strong> and <strong>PTHREAD_MUTEX_ROBUST_NP</strong> were also defined.</p>
<p>These GNU-specific APIs, which first appeared in glibc 2.4, are nowadays obsolete and should not be used in new programs.</p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/2/get_robust_list'>get_robust_list</a>(2), <a href='/2/set_robust_list'>set_robust_list</a>(2), <a href='/3/pthread_mutex_consistent'>pthread_mutex_consistent</a>(3), <a href='/3/pthread_mutex_init'>pthread_mutex_init</a>(3), <a href='/3/pthread_mutex_lock'>pthread_mutex_lock</a>(3), <a href='/7/pthreads'>pthreads</a>(7)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>