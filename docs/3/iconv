<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>iconv - perform character set conversion</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;iconv.h&gt;</a>

<a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a> iconv(iconv_t cd,
 <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>*inbuf, <a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a> *inbytesleft,
 <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>*outbuf, <a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a> *outbytesleft);</code></pre>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The <a href='iconv'>iconv</a>() function converts a sequence of characters in one character encoding to a sequence of characters in another character encoding. The <code>cd</code> argument is a conversion descriptor, previously created by a call to <a href='/3/iconv_open'>iconv_open</a>(3); the conversion descriptor defines the character encodings that <a href='iconv'>iconv</a>() uses for the conversion. The <code>inbuf</code> argument is the address of a variable that points to the first character of the input sequence; <code>inbytesleft</code> indicates the number of bytes in that buffer. The <code>outbuf</code> argument is the address of a variable that points to the first byte available in the output buffer; <code>outbytesleft</code> indicates the number of bytes available in the output buffer.</p>
<p>The main case is when <code>inbuf</code> is not NULL and <code>*inbuf</code> is not NULL. In this case, the <a href='iconv'>iconv</a>() function converts the multibyte sequence starting at <code>*inbuf</code> to a multibyte sequence starting at <code>*outbuf</code>. At most <code>*inbytesleft</code> bytes, starting at <code>*inbuf</code>, will be read. At most <code>*outbytesleft</code> bytes, starting at <code>*outbuf</code>, will be written.</p>
<p>The <a href='iconv'>iconv</a>() function converts one multibyte character at a time, and for each character conversion it increments <code>*inbuf</code> and decrements <code>*inbytesleft</code> by the number of converted input bytes, it increments <code>*outbuf</code> and decrements <code>*outbytesleft</code> by the number of converted output bytes, and it updates the conversion state contained in <code>cd</code>. If the character encoding of the input is stateful, the <a href='iconv'>iconv</a>() function can also convert a sequence of input bytes to an update to the conversion state without producing any output bytes; such input is called a <code>shift sequence</code>. The conversion can stop for four reasons:</p>
<ol type="1">
<li><p>An invalid multibyte sequence is encountered in the input. In this case, it sets <code>errno</code> to <strong>EILSEQ</strong> and returns <code>(<a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a>) -1</code>. <code>*inbuf</code> is left pointing to the beginning of the invalid multibyte sequence.</p></li>
<li><p>The input byte sequence has been entirely converted, that is, <code>*inbytesleft</code> has gone down to 0. In this case, <a href='iconv'>iconv</a>() returns the number of nonreversible conversions performed during this call.</p></li>
<li><p>An incomplete multibyte sequence is encountered in the input, and the input byte sequence terminates after it. In this case, it sets <code>errno</code> to <strong>EINVAL</strong> and returns <code>(<a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a>) -1</code>. <code>*inbuf</code> is left pointing to the beginning of the incomplete multibyte sequence.</p></li>
<li><p>The output buffer has no more room for the next converted character. In this case, it sets <code>errno</code> to <strong>E2BIG</strong> and returns <code>(<a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a>) -1</code>.</p></li>
</ol>
<p>A different case is when <code>inbuf</code> is NULL or <code>*inbuf</code> is NULL, but <code>outbuf</code> is not NULL and <code>*outbuf</code> is not NULL. In this case, the <a href='iconv'>iconv</a>() function attempts to set <code>cd</code>'s conversion state to the initial state and store a corresponding shift sequence at <code>*outbuf</code>. At most <code>*outbytesleft</code> bytes, starting at <code>*outbuf</code>, will be written. If the output buffer has no more room for this reset sequence, it sets <code>errno</code> to <strong>E2BIG</strong> and returns <code>(<a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a>) -1</code>. Otherwise, it increments <code>*outbuf</code> and decrements <code>*outbytesleft</code> by the number of bytes written.</p>
<p>A third case is when <code>inbuf</code> is NULL or <code>*inbuf</code> is NULL, and <code>outbuf</code> is NULL or <code>*outbuf</code> is NULL. In this case, the <a href='iconv'>iconv</a>() function sets <code>cd</code>'s conversion state to the initial state.</p>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>The <a href='iconv'>iconv</a>() function returns the number of characters converted in a nonreversible way during this call; reversible conversions are not counted. In case of error, it sets <code>errno</code> and returns <code>(<a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a>) -1</code>.</p>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<p>The following errors can occur, among others:</p>
<dl>
<dt><strong>E2BIG</strong></dt>
<dd><p>There is not sufficient room at <code>*outbuf</code>.</p>
</dd>
<dt><strong>EILSEQ</strong></dt>
<dd><p>An invalid multibyte sequence has been encountered in the input.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>An incomplete multibyte sequence has been encountered in the input.</p>
</dd>
</dl>
</div></div></div><h1 id='versions'><a href='#versions'>VERSIONS</a></h1><div data-for='versions' data-hide><div class='section' data-for='versions'><div data-more>
<p>This function is available in glibc since version 2.1.</p>
</div></div></div><h1 id='attributes'><a href='#attributes'>ATTRIBUTES</a></h1><div data-for='attributes' data-hide><div class='section' data-for='attributes'><div data-more>
<p>For an explanation of the terms used in this section, see <a href='/7/attributes'>attributes</a>(7).</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: left;">Interface</td>
<td style="text-align: left;">Attribute</td>
<td style="text-align: left;">Value</td>
</tr>
<tr class="even">
<td style="text-align: left;"><a href='iconv'>iconv</a>()</td>
<td style="text-align: left;">Thread safety</td>
<td style="text-align: left;">MT-Safe race:cd</td>
</tr>
</tbody>
</table>
<p>The <a href='iconv'>iconv</a>() function is MT-Safe, as long as callers arrange for mutual exclusion on the <code>cd</code> argument.</p>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p>POSIX.1-2001, POSIX.1-2008.</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>In each series of calls to <a href='iconv'>iconv</a>(), the last should be one with <code>inbuf</code> or <code>*inbuf</code> equal to NULL, in order to flush out any partially converted input.</p>
<p>Although <code>inbuf</code> and <code>outbuf</code> are typed as <code><a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>*</code>, this does not mean that the objects they point can be interpreted as C strings or as arrays of characters: the interpretation of character byte sequences is handled internally by the conversion functions. In some encodings, a zero byte may be a valid part of a multibyte character.</p>
<p>The caller of <a href='iconv'>iconv</a>() must ensure that the pointers passed to the function are suitable for accessing characters in the appropriate character set. This includes ensuring correct alignment on platforms that have tight restrictions on alignment.</p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/3/iconv_close'>iconv_close</a>(3), <a href='/3/iconv_open'>iconv_open</a>(3), <a href='/8/iconvconfig'>iconvconfig</a>(8)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>