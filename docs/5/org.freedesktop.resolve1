<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>org.freedesktop.resolve1 - The D-Bus interface of systemd-resolved</p>
</div></div><h1 id='introduction'><a href='#introduction'>INTRODUCTION</a></h1><div data-for='introduction' data-hide><div class='section' data-for='introduction'><div data-more>
<p><a href='/8/systemd-resolved.service'>systemd-resolved.service</a>(8) is a system service that provides hostname resolution and caching using DNS, LLMNR, and mDNS. It also does DNSSEC validation. This page describes the resolve semantics and the D-Bus interface.</p>
<p>This page contains an API reference only. If you are looking for a longer explanation how to use this API, please consult <strong>Writing Network Configuration Managers</strong>[1] and <strong>Writing Resolver Clients</strong>[2].</p>
</div></div></div><h1 id='the-manager-object'><a href='#the-manager-object'>THE MANAGER OBJECT</a></h1><div data-for='the-manager-object' data-hide><div class='section' data-for='the-manager-object'><div data-more>
<p>The service exposes the following interfaces on the Manager object on the bus:</p>
<p>.RS 4</p>
<pre><code>node /org/freedesktop/resolve1 {
  interface org.freedesktop.resolve1.Manager {
    methods:
      ResolveHostname(in  i ifindex,
                      in  s name,
                      in  i family,
                      in  t flags,
                      out a(iiay) addresses,
                      out s canonical,
                      out t flags);
      ResolveAddress(in  i ifindex,
                     in  i family,
                     in  ay address,
                     in  t flags,
                     out a(is) names,
                     out t flags);
      ResolveRecord(in  i ifindex,
                    in  s name,
                    in  q class,
                    in  q type,
                    in  t flags,
                    out a(iqqay) records,
                    out t flags);
      ResolveService(in  i ifindex,
                     in  s name,
                     in  s type,
                     in  s domain,
                     in  i family,
                     in  t flags,
                     out a(qqqsa(iiay)s) srv_data,
                     out aay txt_data,
                     out s canonical_name,
                     out s canonical_type,
                     out s canonical_domain,
                     out t flags);
      GetLink(in  i ifindex,
              out o path);
      SetLinkDNS(in  i ifindex,
                 in  a(iay) addresses);
      SetLinkDNSEx(in  i ifindex,
                   in  a(iayqs) addresses);
      SetLinkDomains(in  i ifindex,
                     in  a(sb) domains);
      SetLinkDefaultRoute(in  i ifindex,
                          in  b enable);
      SetLinkLLMNR(in  i ifindex,
                   in  s mode);
      SetLinkMulticastDNS(in  i ifindex,
                          in  s mode);
      SetLinkDNSOverTLS(in  i ifindex,
                        in  s mode);
      SetLinkDNSSEC(in  i ifindex,
                    in  s mode);
      SetLinkDNSSECNegativeTrustAnchors(in  i ifindex,
                                        in  as names);
      RevertLink(in  i ifindex);
      RegisterService(in  s name,
                      in  s name_template,
                      in  s type,
                      in  q service_port,
                      in  q service_priority,
                      in  q service_weight,
                      in  aa{say} txt_datas,
                      out o service_path);
      UnregisterService(in  o service_path);
      ResetStatistics();
      FlushCaches();
      ResetServerFeatures();
    properties:
      readonly s LLMNRHostname = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s LLMNR = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s MulticastDNS = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSOverTLS = ...;
      readonly a(iiay) DNS = [...];
      readonly a(iiayqs) DNSEx = [...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly a(iiay) FallbackDNS = [...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly a(iiayqs) FallbackDNSEx = [...];
      readonly (iiay) CurrentDNSServer = ...;
      readonly (iiayqs) CurrentDNSServerEx = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly a(isb) Domains = [...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (tt) TransactionStatistics = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (ttt) CacheStatistics = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSSEC = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (tttt) DNSSECStatistics = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly b DNSSECSupported = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly as DNSSECNegativeTrustAnchors = [..., ...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSStubListener = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s ResolvConfMode = ...;
  };
  interface org.freedesktop.DBus.Peer { ... };
  interface org.freedesktop.DBus.Introspectable { ... };
  interface org.freedesktop.DBus.Properties { ... };
};
    </code></pre>
<p>.RE</p>
<h2>Methods</h2>
<p><strong>ResolveHostname()</strong> takes a hostname and resolves it to one or more IP addresses. As parameters it takes the Linux network interface index to execute the query on, or 0 if it may be done on any suitable interface. The <code>name</code> parameter specifies the hostname to resolve. Note that if required, IDNA conversion is applied to this name unless it is resolved via LLMNR or MulticastDNS. The <code>family</code> parameter limits the results to a specific address family. It may be <strong>AF_INET</strong>, <strong>AF_INET6</strong> or <strong>AF_UNSPEC</strong>. If <strong>AF_UNSPEC</strong> is specified (recommended), both kinds are retrieved, subject to local network configuration (i.e. if no local, routable IPv6 address is found, no IPv6 address is retrieved; and similarly for IPv4). A 64-bit <code>flags</code> field may be used to alter the behaviour of the resolver operation (see below). The method returns an array of address records. Each address record consists of the interface index the address belongs to, an address family as well as a byte array with the actual IP address data (which either has 4 or 16 elements, depending on the address family). The returned address family will be one of <strong>AF_INET</strong> or <strong>AF_INET6</strong>. For IPv6, the returned address interface index should be used to initialize the .sin6_scope_id field of a struct sockaddr_in6 instance to permit support for resolution to link-local IP addresses. The address array is followed by the canonical name of the host, which may or may not be identical to the resolved hostname. Finally, a 64-bit <code>flags</code> field is returned that is defined similarly to the <code>flags</code> field that was passed in, but contains information about the resolved data (see below). If the hostname passed in is an IPv4 or IPv6 address formatted as string, it is parsed, and the result is returned. In this case, no network communication is done.</p>
<p><strong>ResolveAddress()</strong> executes the reverse operation: it takes an IP address and acquires one or more hostnames for it. As parameters it takes the interface index to execute the query on, or <strong>0</strong> if all suitable interfaces are OK. The <code>family</code> parameter indicates the address family of the IP address to resolve. It may be either <strong>AF_INET</strong> or <strong>AF_INET6</strong>. The <code>address</code> parameter takes the raw IP address data (as either a 4 or 16 byte array). The <code>flags</code> input parameter may be used to alter the resolver operation (see below). The method returns an array of name records, each consisting of an interface index and a hostname. The <code>flags</code> output field contains additional information about the resolver operation (see below).</p>
<p><strong>ResolveRecord()</strong> takes a DNS resource record (RR) type, class and name, and retrieves the full resource record set (RRset), including the RDATA, for it. As parameter it takes the Linux network interface index to execute the query on, or <strong>0</strong> if it may be done on any suitable interface. The <code>name</code> parameter specifies the RR domain name to look up (no IDNA conversion is applied), followed by the 16-bit class and type fields (which may be ANY). Finally, a <code>flags</code> field may be passed in to alter behaviour of the look-up (see below). On completion, an array of RR items is returned. Each array entry consists of the network interface index the RR was discovered on, the type and class field of the RR found, and a byte array of the raw RR discovered. The raw RR data starts with the RRs domain name, in the original casing, followed by the RR type, class, TTL and RDATA, in the binary format documented in <strong>RFC 1035</strong>[3]. For RRs that support name compression in the payload (such as MX or PTR), the compression is expanded in the returned data.</p>
<p>Note that currently, the class field has to be specified as IN or ANY. Specifying a different class will return an error indicating that look-ups of this kind are unsupported. Similarly, some special types are not supported either (AXFR, OPT, ...). While systemd-resolved parses and validates resource records of many types, it is crucial that clients using this API understand that the RR data originates from the network and should be thoroughly validated before use.</p>
<p><strong>ResolveService()</strong> may be used to resolve a DNS <strong>SRV</strong> service record, as well as the hostnames referenced in it, and possibly an accompanying DNS-SD <strong>TXT</strong> record containing additional service metadata. The primary benefit of using this method over <strong>ResolveRecord()</strong> specifying the <strong>SRV</strong> type is that it will resolve the <strong>SRV</strong> and <strong>TXT</strong> RRs as well as the hostnames referenced in the SRV in a single operation. As parameters it takes a Linux network interface index, a service name, a service type and a service domain. This method may be invoked in three different modes:</p>
<blockquote>
<p>1.</p>
<ul>
<li></li>
</ul>
<p>To resolve a DNS-SD service, specify the service name (e.g. "Lennarts Files"), the service type (e.g. "_webdav._tcp") and the domain to search in (e.g. "local") as the three service parameters. The service name must be in UTF-8 format, and no IDNA conversion is applied to it in this mode (as mandated by the DNS-SD specifications). However, if necessary, IDNA conversion is applied to the domain parameter.</p>
</blockquote>
<blockquote>
<p>2.</p>
<ul>
<li></li>
</ul>
<p>To resolve a plain <strong>SRV</strong> record, set the service name parameter to the empty string and set the service type and domain properly. (IDNA conversion is applied to the domain, if necessary.)</p>
</blockquote>
<blockquote>
<p>3.</p>
<ul>
<li></li>
</ul>
<p>Alternatively, leave both the service name and type empty and specify the full domain name of the <strong>SRV</strong> record (i.e. prefixed with the service type) in the domain parameter. (No IDNA conversion is applied in this mode.)</p>
</blockquote>
<p>The <code>family</code> parameter of the <strong>ResolveService()</strong> method encodes the desired family of the addresses to resolve (use <strong>AF_INET</strong>, <strong>AF_INET6</strong>, or <strong>AF_UNSPEC</strong>). If this is enabled (Use the <strong>NO_ADDRESS</strong> flag to turn address resolution off, see below). The <code>flags</code> parameter takes a couple of flags that may be used to alter the resolver operation.</p>
<p>On completion, <strong>ResolveService()</strong> returns an array of <strong>SRV</strong> record structures. Each items consisting of the priority, weight and port fields as well as the hostname to contact, as encoded in the <strong>SRV</strong> record. Immediately following is an array of the addresses of this hostname, with each item consisting of the interface index, the address family and the address data in a byte array. This address array is followed by the canonicalized hostname. After this array of <strong>SRV</strong> record structures an array of byte arrays follows that encodes the TXT RR strings, in case DNS-SD look-ups are enabled. The next parameters are the canonical service name, type and domain. This may or may not be identical to the parameters passed in. Finally, a <code>flags</code> field is returned that contains information about the resolver operation performed.</p>
<p>The <strong>ResetStatistics()</strong> method resets the various statistics counters that systemd-resolved maintains to zero. (For details, see the statistics properties below.)</p>
<p>The <strong>GetLink()</strong> method takes a network interface index and returns the object path to the org.freedesktop.resolve1.Link object corresponding to it.</p>
<p>The <strong>SetLinkDNS()</strong> method sets the DNS servers to use on a specific interface. This method (and the following ones) may be used by network management software to configure per-interface DNS settings. It takes a network interface index as well as an array of DNS server IP address records. Each array item consists of an address family (either <strong>AF_INET</strong> or <strong>AF_INET6</strong>), followed by a 4-byte or 16-byte array with the raw address data. This method is a one-step shortcut for retrieving the Link object for a network interface using <strong>GetLink()</strong> (see above) and then invoking the <strong>SetDNS()</strong> method (see below) on it.</p>
<p><strong>SetLinkDNSEx()</strong> is similar to <strong>SetLinkDNS()</strong>, but allows an IP port (instead of the default 53) and DNS name to be specified for each DNS server. The server name is used for Server Name Indication (SNI), which is useful when DNS-over-TLS is used. C.f. <code>DNS=</code> in <a href='/5/resolved.conf'>resolved.conf</a>(5).</p>
<p><strong>SetLinkDefaultRoute()</strong> specifies whether the link shall be used as the default route for name queries. See the description of name routing in <a href='/8/systemd-resolved.service'>systemd-resolved.service</a>(8) for details.</p>
<p>The <strong>SetLinkDomains()</strong> method sets the search and routing domains to use on a specific network interface for DNS look-ups. It takes a network interface index and an array of domains, each with a boolean parameter indicating whether the specified domain shall be used as a search domain (false), or just as a routing domain (true). Search domains are used for qualifying single-label names into FQDN when looking up hostnames, as well as for making routing decisions on which interface to send queries ending in the domain to. Routing domains are only used for routing decisions and not used for single-label name qualification. Pass the search domains in the order they should be used.</p>
<p>The <strong>SetLinkLLMNR()</strong> method enables or disables LLMNR support on a specific network interface. It takes a network interface index as well as a string that may either be empty or one of "yes", "no" or "resolve". If empty, the systemd-wide default LLMNR setting is used. If "yes", LLMNR is used for resolution of single-label names and the local hostname is registered on all local LANs for LLMNR resolution by peers. If "no", LLMNR is turned off fully on this interface. If "resolve", LLMNR is only enabled for resolving names, but the local hostname is not registered for other peers to use.</p>
<p>Similarly, the <strong>SetLinkMulticastDNS()</strong> method enables or disables MulticastDNS support on a specific interface. It takes the same parameters as <strong>SetLinkLLMNR()</strong> described above.</p>
<p>The <strong>SetLinkDNSSEC()</strong> method enables or disables DNSSEC validation on a specific network interface. It takes a network interface index as well as a string that may either be empty or one of "yes", "no", or "allow-downgrade". When empty, the system-wide default DNSSEC setting is used. If "yes", full DNSSEC validation is done for all look-ups. If the selected DNS server does not support DNSSEC, look-ups will fail if this mode is used. If "no", DNSSEC validation is fully disabled. If "allow-downgrade", DNSSEC validation is enabled, but is turned off automatically if the selected server does not support it (thus opening up behaviour to downgrade attacks). Note that DNSSEC only applies to traditional DNS, not to LLMNR or MulticastDNS.</p>
<p>The <strong>SetLinkDNSSECNegativeTrustAnchors()</strong> method may be used to configure DNSSEC Negative Trust Anchors (NTAs) for a specific network interface. It takes a network interface index and a list of domains as arguments.</p>
<p>The <strong>SetLinkDNSOverTLS()</strong> method enables or disables DNS-over-TLS. C.f. <code>DNSOverTLS=</code> in <a href='/8/systemd-resolved.service'>systemd-resolved.service</a>(8) for details.</p>
<p>Network management software integrating with systemd-resolved should call <strong>SetLinkDNS()</strong> or <strong>SetLinkDNSEx()</strong>, <strong>SetLinkDefaultRoute()</strong>, <strong>SetLinkDomains()</strong> and others after the interface appeared in the kernel (and thus after a network interface index has been assigned), but before the network interfaces is activated (<strong>IFF_UP</strong> set) so that all settings take effect during the full time the network interface is up. It is safe to alter settings while the interface is up, however. Use <strong>RevertLink()</strong> (described below) to reset all per-interface settings.</p>
<p>The <strong>RevertLink()</strong> method may be used to revert all per-link settings described above to the defaults.</p>
<p><br/>
</p>
<p><strong>The Flags Parameter</strong></p>
<blockquote>
<p>The four methods above accept and return a 64-bit flags value. In most cases passing 0 is sufficient and recommended. However, the following flags are defined to alter the look-up:</p>
<p>.RS 4</p>
<pre><code>#define SD_RESOLVED_DNS               (UINT64_C(1) &lt;&lt;  0)
#define SD_RESOLVED_LLMNR_IPV4        (UINT64_C(1) &lt;&lt;  1)
#define SD_RESOLVED_LLMNR_IPV6        (UINT64_C(1) &lt;&lt;  2)
#define SD_RESOLVED_MDNS_IPV4         (UINT64_C(1) &lt;&lt;  3)
#define SD_RESOLVED_MDNS_IPV6         (UINT64_C(1) &lt;&lt;  4)
#define SD_RESOLVED_NO_CNAME          (UINT64_C(1) &lt;&lt;  5)
#define SD_RESOLVED_NO_TXT            (UINT64_C(1) &lt;&lt;  6)
#define SD_RESOLVED_NO_ADDRESS        (UINT64_C(1) &lt;&lt;  7)
#define SD_RESOLVED_NO_SEARCH         (UINT64_C(1) &lt;&lt;  8)
#define SD_RESOLVED_AUTHENTICATED     (UINT64_C(1) &lt;&lt;  9)
#define SD_RESOLVED_NO_VALIDATE       (UINT64_C(1) &lt;&lt; 10)
#define SD_RESOLVED_NO_SYNTHESIZE     (UINT64_C(1) &lt;&lt; 11)
#define SD_RESOLVED_NO_CACHE          (UINT64_C(1) &lt;&lt; 12)
#define SD_RESOLVED_NO_ZONE           (UINT64_C(1) &lt;&lt; 13)
#define SD_RESOLVED_NO_TRUST_ANCHOR   (UINT64_C(1) &lt;&lt; 14)
#define SD_RESOLVED_NO_NETWORK        (UINT64_C(1) &lt;&lt; 15)
#define SD_RESOLVED_REQUIRE_PRIMARY   (UINT64_C(1) &lt;&lt; 16)
#define SD_RESOLVED_CLAMP_TTL         (UINT64_C(1) &lt;&lt; 17)
#define SD_RESOLVED_CONFIDENTIAL      (UINT64_C(1) &lt;&lt; 18)
#define SD_RESOLVED_SYNTHETIC         (UINT64_C(1) &lt;&lt; 19)
#define SD_RESOLVED_FROM_CACHE        (UINT64_C(1) &lt;&lt; 20)
#define SD_RESOLVED_FROM_ZONE         (UINT64_C(1) &lt;&lt; 21)
#define SD_RESOLVED_FROM_TRUST_ANCHOR (UINT64_C(1) &lt;&lt; 22)
#define SD_RESOLVED_FROM_NETWORK      (UINT64_C(1) &lt;&lt; 23)
        </code></pre>
<p>.RE</p>
<p>On input, the first five flags control the protocols to use for the look-up. They refer to classic unicast DNS, LLMNR via IPv4/UDP and IPv6/UDP respectively, as well as MulticastDNS via IPv4/UDP and IPv6/UDP. If all of these five bits are off on input (which is strongly recommended) the look-up will be done via all suitable protocols for the specific look-up. Note that these flags operate as filter only, but cannot force a look-up to be done via a protocol. Specifically, systemd-resolved will only route look-ups within the .local TLD to MulticastDNS (plus some reverse look-up address domains), and single-label names to LLMNR (plus some reverse address lookup domains). It will route neither of these to Unicast DNS servers. Also, it will do LLMNR and Multicast DNS only on interfaces suitable for multicast.</p>
<p>On output, these five flags indicate which protocol was used to execute the operation, and hence where the data was found.</p>
<p>The primary use cases for these five flags are follow-up look-ups based on DNS data retrieved earlier. In this case it is often a good idea to limit the follow-up look-up to the protocol that was used to discover the first DNS result.</p>
<p>The NO_CNAME flag controls whether CNAME/DNAME resource records shall be followed during the look-up. This flag is only available at input, none of the functions will return it on output. If a CNAME/DNAME RR is discovered while resolving a hostname, an error is returned instead. By default, when the flag is off, CNAME/DNAME RRs are followed.</p>
<p>The NO_TXT and NO_ADDRESS flags only influence operation of the <strong>ResolveService()</strong> method. They are only defined for input, not output. If NO_TXT is set, the DNS-SD TXT RR look-up is not done in the same operation. If NO_ADDRESS is set, the discovered hostnames are not implicitly translated to their addresses.</p>
<p>The NO_SEARCH flag turns off the search domain logic. It is only defined for input in <strong>ResolveHostname()</strong>. When specified, single-label hostnames are not qualified using defined search domains, if any are configured. Note that <strong>ResolveRecord()</strong> will never qualify single-label domain names using search domains. Also note that multi-label hostnames are never subject to search list expansion.</p>
<p>The AUTHENTICATED bit is defined only in the output flags of the four functions. If set, the returned data has been fully authenticated. Specifically, this bit is set for all DNSSEC-protected data for which a full trust chain may be established to a trusted domain anchor. It is also set for locally synthesized data, such as "localhost" or data from /etc/hosts. Moreover, it is set for all LLMNR or mDNS RRs which originate from the local host. Applications that require authenticated RR data for operation should check this flag before trusting the data. Note that systemd-resolved will never return invalidated data, hence this flag simply allows to discern the cases where data is known to be trusted, or where there is proof that the data is "rightfully" unauthenticated (which includes cases where the underlying protocol or server does not support authenticating data).</p>
<p>NO_VALIDATE can be set to disable validation via DNSSEC even if it would normally be used.</p>
<p>The next four flags allow disabling certain sources during resolution. NO_SYNTHESIZE disables synthetic records, e.g. the local host name, see section SYNTHETIC RECORDS in <a href='/8/systemd-resolved.service'>systemd-resolved.service</a>(8) for more information. NO_CACHE disables the use of the cache of previously resolved records. NO_ZONE disables answers using locally registered public LLMNR/mDNS resource records. NO_TRUST_ANCHOR disables answers using locally configured trust anchors. NO_NETWORK requires all answers to be provided without using the network, i.e. either from local sources or the cache.</p>
<p>With REQUIRE_PRIMARY the request must be answered from a "primary" answer, i.e. not from resource records acquired as a side-effect of a previous transaction.</p>
<p>With CLAMP_TTL, if reply is answered from cache, the TTLs will be adjusted by age of cache entry.</p>
<p>The next six bits flags are used in output and provide information about the source of the answer. CONFIDENTIAL means the query was resolved via encrypted channels or never left this system. FROM_SYNTHETIC means the query was (at least partially) synthesized. FROM_CACHE means the query was answered (at least partially) using the cache. FROM_ZONE means the query was answered (at least partially) using LLMNR/mDNS. FROM_TRUST_ANCHOR means the query was answered (at least partially) using local trust anchors. FROM_NETWORK means the query was answered (at least partially) using the network.</p>
</blockquote>
<h2>Properties</h2>
<p>The <code>LLMNR</code> and <code>MulticastDNS</code> properties report whether LLMNR and MulticastDNS are (globally) enabled. Each may be one of "yes", "no", and "resolve". See <strong>SetLinkLLMNR()</strong> and <strong>SetLinkMulticastDNS()</strong> above.</p>
<p><code>LLMNRHostname</code> contains the hostname currently exposed on the network via LLMNR. It usually follows the system hostname as may be queried via <a href='/3/gethostname'>gethostname</a>(3), but may differ if a conflict is detected on the network.</p>
<p><code>DNS</code> and <code>DNSEx</code> contain arrays of all DNS servers currently used by systemd-resolved. <code>DNS</code> contains information similar to the DNS server data in /run/systemd/resolve/resolv.conf. Each structure in the array consists of a numeric network interface index, an address family, and a byte array containing the DNS server address (either 4 bytes in length for IPv4 or 16 bytes in lengths for IPv6). <code>DNSEx</code> is similar, but additionally contains the IP port and server name (used for Server Name Indication, SNI). Both arrays contain DNS servers configured system-wide, including those possibly read from a foreign /etc/resolv.conf or the <code>DNS=</code> setting in /etc/systemd/resolved.conf, as well as per-interface DNS server information either retrieved from <a href='/8/systemd-networkd'>systemd-networkd</a>(8), or configured by external software via <strong>SetLinkDNS()</strong> or <strong>SetLinkDNSEx()</strong> (see above). The network interface index will be 0 for the system-wide configured services and non-zero for the per-link servers.</p>
<p><code>FallbackDNS</code> and <code>FallbackDNSEx</code> contain arrays of all DNS servers configured as fallback servers, if any, using the same format as <code>DNS</code> and <code>DNSEx</code> described above. See the description of <code>FallbackDNS=</code> in <a href='/5/resolved.conf'>resolved.conf</a>(5) for the description of when those servers are used.</p>
<p><code>CurrentDNSServer</code> and <code>CurrentDNSServerEx</code> specify the server that is currently used for query resolution, in the same format as a single entry in the <code>DNS</code> and <code>DNSEx</code> arrays described above.</p>
<p>Similarly, the <code>Domains</code> property contains an array of all search and routing domains currently used by systemd-resolved. Each entry consists of a network interface index (again, 0 encodes system-wide entries), the actual domain name, and whether the entry is used only for routing (true) or for both routing and searching (false).</p>
<p>The <code>TransactionStatistics</code> property contains information about the number of transactions systemd-resolved has processed. It contains a pair of unsigned 64-bit counters, the first containing the number of currently ongoing transactions, the second the number of total transactions systemd-resolved is processing or has processed. The latter value may be reset using the <strong>ResetStatistics()</strong> method described above. Note that the number of transactions does not directly map to the number of issued resolver bus method calls. While simple look-ups usually require a single transaction only, more complex look-ups might result in more, for example when CNAMEs or DNSSEC are in use.</p>
<p>The <code>CacheStatistics</code> property contains information about the executed cache operations so far. It exposes three 64-bit counters: the first being the total number of current cache entries (both positive and negative), the second the number of cache hits, and the third the number of cache misses. The latter counters may be reset using <strong>ResetStatistics()</strong> (see above).</p>
<p>The <code>DNSSEC</code> property specifies current status of DNSSEC validation. It is one of "yes" (validation is enforced), "no" (no validation is done), "allow-downgrade" (validation is done if the current DNS server supports it). See the description of <code>DNSSEC=</code> in <a href='/5/resolved.conf'>resolved.conf</a>(5).</p>
<p>The <code>DNSSECStatistics</code> property contains information about the DNSSEC validations executed so far. It contains four 64-bit counters: the number of secure, insecure, bogus, and indeterminate DNSSEC validations so far. The counters are increased for each validated RRset, and each non-existance proof. The secure counter is increased for each operation that successfully verified a signed reply, the insecure counter is increased for each operation that successfully verified that an unsigned reply is rightfully unsigned. The bogus counter is increased for each operation where the validation did not check out and the data is likely to have been tempered with. Finally the indeterminate counter is increased for each operation which did not complete because the necessary keys could not be acquired or the cryptographic algorithms were unknown.</p>
<p>The <code>DNSSECSupported</code> boolean property reports whether DNSSEC is enabled and the selected DNS servers support it. It combines information about system-wide and per-link DNS settings (see below), and only reports true if DNSSEC is enabled and supported on every interface for which DNS is configured and for the system-wide settings if there are any. Note that systemd-resolved assumes DNSSEC is supported by DNS servers until it verifies that this is not the case. Thus, the reported value may initially be true, until the first transactions are executed.</p>
<p>The <code>DNSOverTLS</code> boolean property reports whether DNS-over-TLS is enabled.</p>
<p>The <code>ResolvConfMode</code> property exposes how /etc/resolv.conf is managed on the host. Currently, the values "uplink", "stub", "static" (these three correspond to the three different files systemd-resolved.service provides), "foreign" (the file is managed by admin or another service, systemd-resolved.service just consumes it), "missing" (/etc/resolv.conf is missing).</p>
<p>The <code>DNSStubListener</code> property reports whether the stub listener on port 53 is enabled. Possible values are "yes" (enabled), "no" (disabled), "udp" (only the UDP listener is enabled), and "tcp" (only the TCP listener is enabled).</p>
</div></div></div><h1 id='link-object'><a href='#link-object'>LINK OBJECT</a></h1><div data-for='link-object' data-hide><div class='section' data-for='link-object'><div data-more>
<p>.RS 4</p>
<pre><code>node /org/freedesktop/resolve1/link/_1 {
  interface org.freedesktop.resolve1.Link {
    methods:
      SetDNS(in  a(iay) addresses);
      SetDNSEx(in  a(iayqs) addresses);
      SetDomains(in  a(sb) domains);
      SetDefaultRoute(in  b enable);
      SetLLMNR(in  s mode);
      SetMulticastDNS(in  s mode);
      SetDNSOverTLS(in  s mode);
      SetDNSSEC(in  s mode);
      SetDNSSECNegativeTrustAnchors(in  as names);
      Revert();
    properties:
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly t ScopesMask = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly a(iay) DNS = [...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly a(iayqs) DNSEx = [...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (iay) CurrentDNSServer = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (iayqs) CurrentDNSServerEx = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly a(sb) Domains = [...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly b DefaultRoute = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s LLMNR = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s MulticastDNS = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSOverTLS = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSSEC = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly as DNSSECNegativeTrustAnchors = [..., ...];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly b DNSSECSupported = ...;
  };
  interface org.freedesktop.DBus.Peer { ... };
  interface org.freedesktop.DBus.Introspectable { ... };
  interface org.freedesktop.DBus.Properties { ... };
};
    </code></pre>
<p>.RE</p>
<p>For each Linux network interface a "Link" object is created which exposes per-link DNS configuration and state. Use <strong>GetLink()</strong> on the Manager interface to retrieve the object path for a link object given the network interface index (see above).</p>
<h2>Methods</h2>
<p>The various methods exposed by the Link interface are equivalent to their similarly named counterparts on the Manager interface. e.g. <strong>SetDNS()</strong> on the Link object maps to <strong>SetLinkDNS()</strong> on the Manager object, the main difference being that the later expects an interface index to be specified. Invoking the methods on the Manager interface has the benefit of reducing roundtrips, as it is not necessary to first request the Link object path via <strong>GetLink()</strong> before invoking the methods. The same relationship holds for <strong>SetDNSEx()</strong>, <strong>SetDomains()</strong>, <strong>SetDefaultRoute()</strong>, <strong>SetLLMNR()</strong>, <strong>SetMulticastDNS()</strong>, <strong>SetDNSOverTLS()</strong>, <strong>SetDNSSEC()</strong>, <strong>SetDNSSECNegativeTrustAnchors()</strong>, and <strong>Revert()</strong>. For further details on these methods see the Manager documentation above.</p>
<h2>Properties</h2>
<p><code>ScopesMask</code> defines which resolver scopes are currently active on this interface. This 64-bit unsigned integer field is a bit mask consisting of a subset of the bits of the flags parameter describe above. Specifically, it may have the DNS, LLMNR and MDNS bits (the latter in IPv4 and IPv6 flavours) set. Each individual bit is set when the protocol applies to a specific interface and is enabled for it. It is unset otherwise. Specifically, a multicast-capable interface in the "UP" state with an IP address is suitable for LLMNR or MulticastDNS, and any interface that is UP and has an IP address is suitable for DNS. Note the relationship of the bits exposed here with the LLMNR and MulticastDNS properties also exposed on the Link interface. The latter expose what is *configured* to be used on the interface, the former expose what is actually used on the interface, taking into account the abilities of the interface.</p>
<p><code>DNSSECSupported</code> exposes a boolean field that indicates whether DNSSEC is currently configured and in use on the interface. Note that if DNSSEC is enabled on an interface, it is assumed available until it is detected that the configured server does not actually support it. Thus, this property may initially report that DNSSEC is supported on an interface.</p>
<p><code>DefaultRoute</code> exposes a boolean field that indicates whether the interface will be used as default route for name queries. See <strong>SetLinkDefaultRoute()</strong> above.</p>
<p>The other properties reflect the state of the various configuration settings for the link which may be set with the various methods calls such as <strong>SetDNS()</strong> or <strong>SetLLMNR()</strong>.</p>
</div></div></div><h1 id='common-errors'><a href='#common-errors'>COMMON ERRORS</a></h1><div data-for='common-errors' data-hide><div class='section' data-for='common-errors'><div data-more>
<p>Many bus methods systemd-resolved exposes (in particular the resolver methods such as <strong>ResolveHostname()</strong> on the Manager interface) may return some of the following errors:</p>
<p><strong>org.freedesktop.resolve1.NoNameServers</strong></p>
<blockquote>
<p>No suitable DNS servers were found to resolve a request.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.InvalidReply</strong></p>
<blockquote>
<p>A response from the selected DNS server was not understood.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.NoSuchRR</strong></p>
<blockquote>
<p>The requested name exists, but there is no resource record of the requested type for it. (This is the DNS NODATA case).</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.CNameLoop</strong></p>
<blockquote>
<p>The look-up failed because a CNAME or DNAME loop was detected.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.Aborted</strong></p>
<blockquote>
<p>The look-up was aborted because the selected protocol became unavailable while the operation was ongoing.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.NoSuchService</strong></p>
<blockquote>
<p>A service look-up was successful, but the <strong>SRV</strong> record reported that the service is not available.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.DnssecFailed</strong></p>
<blockquote>
<p>The acquired response did not pass DNSSEC validation.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.NoTrustAnchor</strong></p>
<blockquote>
<p>No chain of trust could be established for the response to a configured DNSSEC trust anchor.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.ResourceRecordTypeUnsupported</strong></p>
<blockquote>
<p>The requested resource record type is not supported on the selected DNS servers. This error is generated for example when an RRSIG record is requested from a DNS server that does not support DNSSEC.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.NoSuchLink</strong></p>
<blockquote>
<p>No network interface with the specified network interface index exists.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.LinkBusy</strong></p>
<blockquote>
<p>The requested configuration change could not be made because <a href='/8/systemd-networkd'>systemd-networkd</a>(8), already took possession of the interface and supplied configuration data for it.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.NetworkDown</strong></p>
<blockquote>
<p>The requested look-up failed because the system is currently not connected to any suitable network.</p>
</blockquote>
<p><strong>org.freedesktop.resolve1.DnsError.NXDOMAIN</strong>, <strong>org.freedesktop.resolve1.DnsError.REFUSED</strong>, ...</p>
<blockquote>
<p>The look-up failed with a DNS return code reporting a failure. The error names used as suffixes here are defined in by IANA in <strong>DNS RCODEs</strong>[4].</p>
</blockquote>
</div></div></div><h1 id='examples'><a href='#examples'>EXAMPLES</a></h1><div class='section' data-for='examples'><div data-more>
<p><strong>Example 1. Introspect org.freedesktop.resolve1.Manager on the bus</strong></p>
<p>.RS 4</p>
<pre><code>$ gdbus introspect --system \
  --dest org.freedesktop.resolve1 \
  --object-path /org/freedesktop/resolve1
      </code></pre>
<p>.RE</p>
<p><strong>Example 2. Introspect org.freedesktop.resolve1.Link on the bus</strong></p>
<p>.RS 4</p>
<pre><code>$ gdbus introspect --system \
  --dest org.freedesktop.resolve1 \
  --object-path /org/freedesktop/resolve1/link/_11
      </code></pre>
<p>.RE</p>
</div></div><h1 id='versioning'><a href='#versioning'>VERSIONING</a></h1><div data-for='versioning' data-hide><div class='section' data-for='versioning'><div data-more>
<p>These D-Bus interfaces follow <strong>the usual interface versioning guidelines</strong>[5].</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<ul>
<li><p>Writing Network Configuration Managers</p>
<p><a href="https://wiki.freedesktop.org/www/Software/systemd/writing-network-configuration-managers">https://wiki.freedesktop.org/www/Software/systemd/writing-network-configuration-managers</a></p></li>
<li><p>Writing Resolver Clients</p>
<p><a href="https://wiki.freedesktop.org/www/Software/systemd/writing-resolver-clients">https://wiki.freedesktop.org/www/Software/systemd/writing-resolver-clients</a></p></li>
<li><p>RFC 1035</p>
<p><a href="https://www.ietf.org/rfc/rfc1035.txt">https://www.ietf.org/rfc/rfc1035.txt</a></p></li>
<li><p>DNS RCODEs</p>
<p><a href="https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6">https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6</a></p></li>
<li><p>the usual interface versioning guidelines</p>
<p><a href="http://0pointer.de/blog/projects/versioning-dbus.html">http://0pointer.de/blog/projects/versioning-dbus.html</a></p></li>
</ul></div></div></div>


        </div>

    </body>

</html>