<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>ext2 - the second extended file system<br/>
ext3 - the third extended file system<br/>
ext4 - the fourth extended file system</p>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The second, third, and fourth extended file systems, or ext2, ext3, and ext4 as they are commonly known, are Linux file systems that have historically been the default file system for many Linux distributions. They are general purpose file systems that have been designed for extensibility and backwards compatibility. In particular, file systems previously intended for use with the ext2 and ext3 file systems can be mounted using the ext4 file system driver, and indeed in many modern Linux distributions, the ext4 file system driver has been configured to handle mount requests for ext2 and ext3 file systems.</p>
</div></div><h1 id='file-system-features'><a href='#file-system-features'>FILE SYSTEM FEATURES</a></h1><div data-for='file-system-features' data-hide><div class='section' data-for='file-system-features'><div data-more>
<p>A file system formatted for ext2, ext3, or ext4 can have some collection of the following file system feature flags enabled. Some of these features are not supported by all implementations of the ext2, ext3, and ext4 file system drivers, depending on Linux kernel version in use. On other operating systems, such as the GNU/HURD or FreeBSD, only a very restrictive set of file system features may be supported in their implementations of ext2.</p>
<dl>
<dt><strong>64bit</strong></dt>
<dd><p><br/>
Enables the file system to be larger than 2^32 blocks. This feature is set automatically, as needed, but it can be useful to specify this feature explicitly if the file system might need to be resized larger than 2^32 blocks, even if it was smaller than that threshold when it was originally created. Note that some older kernels and older versions of e2fsprogs will not support file systems with this ext4 feature enabled.</p>
</dd>
<dt><strong>bigalloc</strong></dt>
<dd><p><br/>
This ext4 feature enables clustered block allocation, so that the unit of allocation is a power of two number of blocks. That is, each bit in the what had traditionally been known as the block allocation bitmap now indicates whether a cluster is in use or not, where a cluster is by default composed of 16 blocks. This feature can decrease the time spent on doing block allocation and brings smaller fragmentation, especially for large files. The size can be specified using the <strong>mke2fs -C</strong> option.</p>
<p><strong>Warning:</strong> The bigalloc feature is still under development, and may not be fully supported with your kernel or may have various bugs. Please see the web page <a href="http://ext4.wiki.kernel.org/index.php/Bigalloc">http://ext4.wiki.kernel.org/index.php/Bigalloc</a> for details. May clash with delayed allocation (see <strong>nodelalloc</strong> mount option).</p>
<p>This feature requires that the <strong>extent</strong> feature be enabled.</p>
</dd>
<dt><strong>casefold</strong></dt>
<dd><p><br/>
This ext4 feature provides file system level character encoding support for directories with the casefold (+F) flag enabled. This feature is name-preserving on the disk, but it allows applications to lookup for a file in the file system using an encoding equivalent version of the file name.</p>
</dd>
<dt><strong>dir_index</strong></dt>
<dd><p><br/>
Use hashed b-trees to speed up name lookups in large directories. This feature is supported by ext3 and ext4 file systems, and is ignored by ext2 file systems.</p>
</dd>
<dt><strong>dir_nlink</strong></dt>
<dd><p><br/>
Normally, ext4 allows an inode to have no more than 65,000 hard links. This applies to regular files as well as directories, which means that there can be no more than 64,998 subdirectories in a directory (because each of the '.' and '..' entries, as well as the directory entry for the directory in its parent directory counts as a hard link). This feature lifts this limit by causing ext4 to use a link count of 1 to indicate that the number of hard links to a directory is not known when the link count might exceed the maximum count limit.</p>
</dd>
<dt><strong>ea_inode</strong></dt>
<dd><p><br/>
Normally, a file's extended attributes and associated metadata must fit within the inode or the inode's associated extended attribute block. This feature allows the value of each extended attribute to be placed in the data blocks of a separate inode if necessary, increasing the limit on the size and number of extended attributes per file.</p>
</dd>
<dt><strong>encrypt</strong></dt>
<dd><p><br/>
Enables support for file-system level encryption of data blocks and file names. The inode metadata (timestamps, file size, user/group ownership, etc.) is <code>not</code> encrypted.</p>
<p>This feature is most useful on file systems with multiple users, or where not all files should be encrypted. In many use cases, especially on single-user systems, encryption at the block device layer using dm-crypt may provide much better security.</p>
</dd>
<dt><strong>ext_attr</strong></dt>
<dd><p><br/>
This feature enables the use of extended attributes. This feature is supported by ext2, ext3, and ext4.</p>
</dd>
<dt><strong>extent</strong></dt>
<dd><p><br/>
This ext4 feature allows the mapping of logical block numbers for a particular inode to physical blocks on the storage device to be stored using an extent tree, which is a more efficient data structure than the traditional indirect block scheme used by the ext2 and ext3 file systems. The use of the extent tree decreases metadata block overhead, improves file system performance, and decreases the needed to run <a href='/8/e2fsck'>e2fsck</a>(8) on the file system. (Note: both <strong>extent</strong> and <strong>extents</strong> are accepted as valid names for this feature for historical/backwards compatibility reasons.)</p>
</dd>
<dt><strong>extra_isize</strong></dt>
<dd><p><br/>
This ext4 feature reserves a specific amount of space in each inode for extended metadata such as nanosecond timestamps and file creation time, even if the current kernel does not currently need to reserve this much space. Without this feature, the kernel will reserve the amount of space for features it currently needs, and the rest may be consumed by extended attributes.</p>
</dd>
</dl>
<p>For this feature to be useful the inode size must be 256 bytes in size or larger.</p>
<dl>
<dt><strong>filetype</strong></dt>
<dd><p><br/>
This feature enables the storage of file type information in directory entries. This feature is supported by ext2, ext3, and ext4.</p>
</dd>
<dt><strong>flex_bg</strong></dt>
<dd><p><br/>
This ext4 feature allows the per-block group metadata (allocation bitmaps and inode tables) to be placed anywhere on the storage media. In addition, <strong>mke2fs</strong> will place the per-block group metadata together starting at the first block group of each "flex_bg group". The size of the flex_bg group can be specified using the <strong>-G</strong> option.</p>
</dd>
<dt><strong>has_journal</strong></dt>
<dd><p><br/>
Create a journal to ensure file system consistency even across unclean shutdowns. Setting the file system feature is equivalent to using the <strong>-j</strong> option with <strong>mke2fs</strong> or <strong>tune2fs.</strong> This feature is supported by ext3 and ext4, and ignored by the ext2 file system driver.</p>
</dd>
<dt><strong>huge_file</strong></dt>
<dd><p><br/>
This ext4 feature allows files to be larger than 2 terabytes in size.</p>
</dd>
<dt><strong>inline_data</strong></dt>
<dd><p>Allow data to be stored in the inode and extended attribute area.</p>
</dd>
<dt><strong>journal_dev</strong></dt>
<dd><p><br/>
This feature is enabled on the superblock found on an external journal device. The block size for the external journal must be the same as the file system which uses it.</p>
<p>The external journal device can be used by a file system by specifying the <strong>-J</strong> <strong>device=</strong>&lt;external-device&gt; option to <a href='/8/mke2fs'>mke2fs</a>(8) or <strong>tune2fs(8)</strong>.</p>
</dd>
<dt><strong>large_dir</strong></dt>
<dd><p><br/>
This feature increases the limit on the number of files per directory by raising the maximum size of directories and, for hashed b-tree directories (see <strong>dir_index</strong>), the maximum height of the hashed b-tree used to store the directory entries.</p>
</dd>
<dt><strong>large_file</strong></dt>
<dd><p><br/>
This feature flag is set automatically by modern kernels when a file larger than 2 gigabytes is created. Very old kernels could not handle large files, so this feature flag was used to prohibit those kernels from mounting file systems that they could not understand.</p>
</dd>
<dt><strong>metadata_csum</strong></dt>
<dd><p><br/>
This ext4 feature enables metadata checksumming. This feature stores checksums for all of the file system metadata (superblock, group descriptor blocks, inode and block bitmaps, directories, and extent tree blocks). The checksum algorithm used for the metadata blocks is different than the one used for group descriptors with the <strong>uninit_bg</strong> feature. These two features are incompatible and <strong>metadata_csum</strong> will be used preferentially instead of <strong>uninit_bg</strong>.</p>
</dd>
<dt><strong>metadata_csum_seed</strong></dt>
<dd><p><br/>
This feature allows the file system to store the metadata checksum seed in the superblock, which allows the administrator to change the UUID of a file system using the <strong>metadata_csum</strong> feature while it is mounted.</p>
</dd>
<dt><strong>meta_bg</strong></dt>
<dd><p><br/>
This ext4 feature allows file systems to be resized on-line without explicitly needing to reserve space for growth in the size of the block group descriptors. This scheme is also used to resize file systems which are larger than 2^32 blocks. It is not recommended that this feature be set when a file system is created, since this alternate method of storing the block group descriptors will slow down the time needed to mount the file system, and newer kernels can automatically set this feature as necessary when doing an online resize and no more reserved space is available in the resize inode.</p>
</dd>
<dt><strong>mmp</strong></dt>
<dd><p><br/>
This ext4 feature provides multiple mount protection (MMP). MMP helps to protect the file system from being multiply mounted and is useful in shared storage environments.</p>
</dd>
<dt><strong>project</strong></dt>
<dd><p><br/>
This ext4 feature provides project quota support. With this feature, the project ID of inode will be managed when the file system is mounted.</p>
</dd>
<dt><strong>quota</strong></dt>
<dd><p><br/>
Create quota inodes (inode #3 for userquota and inode #4 for group quota) and set them in the superblock. With this feature, the quotas will be enabled automatically when the file system is mounted.</p>
<p>Causes the quota files (i.e., user.quota and group.quota which existed in the older quota design) to be hidden inodes.</p>
</dd>
<dt><strong>resize_inode</strong></dt>
<dd><p><br/>
This file system feature indicates that space has been reserved so that the block group descriptor table can be extended while resizing a mounted file system. The online resize operation is carried out by the kernel, triggered by <a href='/8/resize2fs'>resize2fs</a>(8). By default <strong>mke2fs</strong> will attempt to reserve enough space so that the file system may grow to 1024 times its initial size. This can be changed using the <strong>resize</strong> extended option.</p>
<p>This feature requires that the <strong>sparse_super</strong> or <strong>sparse_super2</strong> feature be enabled.</p>
</dd>
<dt><strong>sparse_super</strong></dt>
<dd><p><br/>
This file system feature is set on all modern ext2, ext3, and ext4 file systems. It indicates that backup copies of the superblock and block group descriptors are present only in a few block groups, not all of them.</p>
</dd>
<dt><strong>sparse_super2</strong></dt>
<dd><p><br/>
This feature indicates that there will only be at most two backup superblocks and block group descriptors. The block groups used to store the backup superblock(s) and blockgroup descriptor(s) are stored in the superblock, but typically, one will be located at the beginning of block group #1, and one in the last block group in the file system. This feature is essentially a more extreme version of sparse_super and is designed to allow a much larger percentage of the disk to have contiguous blocks available for data files.</p>
</dd>
<dt><strong>stable_inodes</strong></dt>
<dd><p><br/>
Marks the file system's inode numbers and UUID as stable. <a href='/8/resize2fs'>resize2fs</a>(8) will not allow shrinking a file system with this feature, nor will <a href='/8/tune2fs'>tune2fs</a>(8) allow changing its UUID. This feature allows the use of specialized encryption settings that make use of the inode numbers and UUID. Note that the <strong>encrypt</strong> feature still needs to be enabled separately. <strong>stable_inodes</strong> is a "compat" feature, so old kernels will allow it.</p>
</dd>
<dt><strong>uninit_bg</strong></dt>
<dd><p><br/>
This ext4 file system feature indicates that the block group descriptors will be protected using checksums, making it safe for <a href='/8/mke2fs'>mke2fs</a>(8) to create a file system without initializing all of the block groups. The kernel will keep a high watermark of unused inodes, and initialize inode tables and blocks lazily. This feature speeds up the time to check the file system using <a href='/8/e2fsck'>e2fsck</a>(8), and it also speeds up the time required for <a href='/8/mke2fs'>mke2fs</a>(8) to create the file system.</p>
</dd>
<dt><strong>verity</strong></dt>
<dd><p><br/>
Enables support for verity protected files. Verity files are readonly, and their data is transparently verified against a Merkle tree hidden past the end of the file. Using the Merkle tree's root hash, a verity file can be efficiently authenticated, independent of the file's size.</p>
<p>This feature is most useful for authenticating important read-only files on read-write file systems. If the file system itself is read-only, then using dm-verity to authenticate the entire block device may provide much better security.</p>
</dd>
</dl>
</div></div></div><h1 id='mount-options'><a href='#mount-options'>MOUNT OPTIONS</a></h1><div data-for='mount-options' data-hide><div class='section' data-for='mount-options'><div data-more>
<p>This section describes mount options which are specific to ext2, ext3, and ext4. Other generic mount options may be used as well; see <a href='/8/mount'>mount</a>(8) for details.</p>
</div></div></div><h1 id='mount-options-for-ext2'><a href='#mount-options-for-ext2'>MOUNT OPTIONS FOR EXT2</a></h1><div data-for='mount-options-for-ext2' data-hide><div class='section' data-for='mount-options-for-ext2'><div data-more>
<p>The `ext2' file system is the standard Linux file system. Since Linux 2.5.46, for most mount options the default is determined by the file system superblock. Set them with <a href='/8/tune2fs'>tune2fs</a>(8).</p>
<dl>
<dt><strong>acl</strong>|<strong>noacl</strong></dt>
<dd><p>Support POSIX Access Control Lists (or not). See the <a href='/5/acl'>acl</a>(5) manual page.</p>
</dd>
<dt><strong>bsddf</strong>|<strong>minixdf</strong></dt>
<dd><p>Set the behavior for the <code>statfs</code> system call. The <strong>minixdf</strong> behavior is to return in the <code>f_blocks</code> field the total number of blocks of the file system, while the <strong>bsddf</strong> behavior (which is the default) is to subtract the overhead blocks used by the ext2 file system and not available for file storage. Thus</p>
</dd>
</dl>
<p>% mount /k -o minixdf; df /k; umount /k</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: left;">File System</td>
<td style="text-align: left;">1024-blocks</td>
<td style="text-align: right;">Used</td>
<td style="text-align: left;">Available</td>
<td style="text-align: left;">Capacity</td>
<td style="text-align: left;">Mounted on</td>
</tr>
<tr class="even">
<td style="text-align: left;">/dev/sda6</td>
<td style="text-align: left;">2630655</td>
<td style="text-align: right;">86954</td>
<td style="text-align: left;">2412169</td>
<td style="text-align: left;">3%</td>
<td style="text-align: left;">/k</td>
</tr>
</tbody>
</table>
<p>% mount /k -o bsddf; df /k; umount /k</p>
<table>
<tbody>
<tr class="odd">
<td style="text-align: left;">File System</td>
<td style="text-align: left;">1024-blocks</td>
<td style="text-align: right;">Used</td>
<td style="text-align: left;">Available</td>
<td style="text-align: left;">Capacity</td>
<td style="text-align: left;">Mounted on</td>
</tr>
<tr class="even">
<td style="text-align: left;">/dev/sda6</td>
<td style="text-align: left;">2543714</td>
<td style="text-align: right;">13</td>
<td style="text-align: left;">2412169</td>
<td style="text-align: left;">0%</td>
<td style="text-align: left;">/k</td>
</tr>
</tbody>
</table>
<p>(Note that this example shows that one can add command line options to the options given in <code>/etc/fstab</code>.)</p>
<dl>
<dt><strong>check=none</strong> or <strong>nocheck</strong></dt>
<dd><p>No checking is done at mount time. This is the default. This is fast. It is wise to invoke <a href='/8/e2fsck'>e2fsck</a>(8) every now and then, e.g. at boot time. The non-default behavior is unsupported (check=normal and check=strict options have been removed). Note that these mount options don't have to be supported if ext4 kernel driver is used for ext2 and ext3 file systems.</p>
</dd>
<dt><strong>debug</strong></dt>
<dd><p>Print debugging info upon each (re)mount.</p>
</dd>
<dt><strong>errors=</strong>{<strong>continue</strong>|<strong>remount-ro</strong>|<strong>panic</strong>}</dt>
<dd><p>Define the behavior when an error is encountered. (Either ignore errors and just mark the file system erroneous and continue, or remount the file system read-only, or panic and halt the system.) The default is set in the file system superblock, and can be changed using <a href='/8/tune2fs'>tune2fs</a>(8).</p>
</dd>
<dt><strong>grpid</strong>|<strong>bsdgroups</strong> and <strong>nogrpid</strong>|<strong>sysvgroups</strong></dt>
<dd><p>These options define what group id a newly created file gets. When <strong>grpid</strong> is set, it takes the group id of the directory in which it is created; otherwise (the default) it takes the fsgid of the current process, unless the directory has the setgid bit set, in which case it takes the gid from the parent directory, and also gets the setgid bit set if it is a directory itself.</p>
</dd>
<dt><strong>grpquota</strong>|<strong>noquota</strong>|<strong>quota</strong>|<strong>usrquota</strong></dt>
<dd><p>The usrquota (same as quota) mount option enables user quota support on the file system. grpquota enables group quotas support. You need the quota utilities to actually enable and manage the quota system.</p>
</dd>
<dt><strong>nouid32</strong></dt>
<dd><p>Disables 32-bit UIDs and GIDs. This is for interoperability with older kernels which only store and expect 16-bit values.</p>
</dd>
<dt><strong>oldalloc</strong> or <strong>orlov</strong></dt>
<dd><p>Use old allocator or Orlov allocator for new inodes. Orlov is default.</p>
</dd>
<dt><strong>resgid=</strong><code>n</code> and <strong>resuid=</strong><code>n</code></dt>
<dd><p>The ext2 file system reserves a certain percentage of the available space (by default 5%, see <a href='/8/mke2fs'>mke2fs</a>(8) and <a href='/8/tune2fs'>tune2fs</a>(8)). These options determine who can use the reserved blocks. (Roughly: whoever has the specified uid, or belongs to the specified group.)</p>
</dd>
<dt><strong>sb=</strong><code>n</code></dt>
<dd><p>Instead of using the normal superblock, use an alternative superblock specified by <code>n</code>. This option is normally used when the primary superblock has been corrupted. The location of backup superblocks is dependent on the file system's blocksize, the number of blocks per group, and features such as <strong>sparse_super</strong>.</p>
<p>Additional backup superblocks can be determined by using the <strong>mke2fs</strong> program using the <strong>-n</strong> option to print out where the superblocks exist, supposing <strong>mke2fs</strong> is supplied with arguments that are consistent with the file system's layout (e.g. blocksize, blocks per group, <strong>sparse_super</strong>, etc.).</p>
<p>The block number here uses 1 k units. Thus, if you want to use logical block 32768 on a file system with 4 k blocks, use "sb=131072".</p>
</dd>
<dt><strong>user_xattr</strong>|<strong>nouser_xattr</strong></dt>
<dd><p>Support "user." extended attributes (or not).</p>
</dd>
</dl>
</div></div></div><h1 id='mount-options-for-ext3'><a href='#mount-options-for-ext3'>MOUNT OPTIONS FOR EXT3</a></h1><div data-for='mount-options-for-ext3' data-hide><div class='section' data-for='mount-options-for-ext3'><div data-more>
<p>The ext3 file system is a version of the ext2 file system which has been enhanced with journaling. It supports the same options as ext2 as well as the following additions:</p>
<dl>
<dt><strong>journal_dev=devnum</strong>/<strong>journal_path=path</strong></dt>
<dd><p>When the external journal device's major/minor numbers have changed, these options allow the user to specify the new journal location. The journal device is identified either through its new major/minor numbers encoded in devnum, or via a path to the device.</p>
</dd>
<dt><strong>norecovery</strong>/<strong>noload</strong></dt>
<dd><p>Don't load the journal on mounting. Note that if the file system was not unmounted cleanly, skipping the journal replay will lead to the file system containing inconsistencies that can lead to any number of problems.</p>
</dd>
<dt><strong>data=</strong>{<strong>journal</strong>|<strong>ordered</strong>|<strong>writeback</strong>}</dt>
<dd><p>Specifies the journaling mode for file data. Metadata is always journaled. To use modes other than <strong>ordered</strong> on the root file system, pass the mode to the kernel as boot parameter, e.g. <code>rootflags=data=journal</code>.</p>
<dl>
<dt><strong>journal</strong></dt>
<dd><p>All data is committed into the journal prior to being written into the main file system.</p>
</dd>
<dt><strong>ordered</strong></dt>
<dd><p>This is the default mode. All data is forced directly out to the main file system prior to its metadata being committed to the journal.</p>
</dd>
<dt><strong>writeback</strong></dt>
<dd><p>Data ordering is not preserved – data may be written into the main file system after its metadata has been committed to the journal. This is rumoured to be the highest-throughput option. It guarantees internal file system integrity, however it can allow old data to appear in files after a crash and journal recovery.</p>
</dd>
</dl>
</dd>
<dt><strong>data_err=ignore</strong></dt>
<dd><p>Just print an error message if an error occurs in a file data buffer in ordered mode.</p>
</dd>
<dt><strong>data_err=abort</strong></dt>
<dd><p>Abort the journal if an error occurs in a file data buffer in ordered mode.</p>
</dd>
<dt><strong>barrier=0</strong> / <strong>barrier=1</strong>"</dt>
<dd><p>This disables / enables the use of write barriers in the jbd code. barrier=0 disables, barrier=1 enables (default). This also requires an IO stack which can support barriers, and if jbd gets an error on a barrier write, it will disable barriers again with a warning. Write barriers enforce proper on-disk ordering of journal commits, making volatile disk write caches safe to use, at some performance penalty. If your disks are battery-backed in one way or another, disabling barriers may safely improve performance.</p>
</dd>
<dt><strong>commit=</strong><code>nrsec</code></dt>
<dd><p>Start a journal commit every <code>nrsec</code> seconds. The default value is 5 seconds. Zero means default.</p>
</dd>
<dt><strong>user_xattr</strong></dt>
<dd><p>Enable Extended User Attributes. See the <a href='/5/attr'>attr</a>(5) manual page.</p>
</dd>
<dt><strong>jqfmt=</strong>{<strong>vfsold</strong>|<strong>vfsv0</strong>|<strong>vfsv1</strong>}</dt>
<dd><p>Apart from the old quota system (as in ext2, jqfmt=vfsold aka version 1 quota) ext3 also supports journaled quotas (version 2 quota). jqfmt=vfsv0 or jqfmt=vfsv1 enables journaled quotas. Journaled quotas have the advantage that even after a crash no quota check is required. When the <strong>quota</strong> file system feature is enabled, journaled quotas are used automatically, and this mount option is ignored.</p>
</dd>
<dt><strong>usrjquota=aquota.user</strong>|<strong>grpjquota=aquota.group</strong></dt>
<dd><p>For journaled quotas (jqfmt=vfsv0 or jqfmt=vfsv1), the mount options usrjquota=aquota.user and grpjquota=aquota.group are required to tell the quota system which quota database files to use. When the <strong>quota</strong> file system feature is enabled, journaled quotas are used automatically, and this mount option is ignored.</p>
</dd>
</dl>
</div></div></div><h1 id='mount-options-for-ext4'><a href='#mount-options-for-ext4'>MOUNT OPTIONS FOR EXT4</a></h1><div data-for='mount-options-for-ext4' data-hide><div class='section' data-for='mount-options-for-ext4'><div data-more>
<p>The ext4 file system is an advanced level of the ext3 file system which incorporates scalability and reliability enhancements for supporting large file system.</p>
<p>The options <strong>journal_dev, journal_path, norecovery, noload, data, commit, orlov,</strong> <strong>oldalloc, [no]user_xattr, [no]acl, bsddf, minixdf, debug, errors,</strong> <strong>data_err, grpid, bsdgroups, nogrpid, sysvgroups, resgid, resuid, sb,</strong> <strong>quota, noquota, nouid32, grpquota, usrquota, usrjquota, grpjquota,</strong> <strong>and jqfmt are backwardly compatible with ext3 or ext2.</strong></p>
<dl>
<dt><strong>journal_checksum | nojournal_checksum</strong></dt>
<dd><p>The journal_checksum option enables checksumming of the journal transactions. This will allow the recovery code in e2fsck and the kernel to detect corruption in the kernel. It is a compatible change and will be ignored by older kernels.</p>
</dd>
<dt><strong>journal_async_commit</strong></dt>
<dd><p>Commit block can be written to disk without waiting for descriptor blocks. If enabled older kernels cannot mount the device. This will enable 'journal_checksum' internally.</p>
</dd>
<dt><strong>barrier=0</strong> / <strong>barrier=1</strong> / <strong>barrier</strong> / <strong>nobarrier</strong></dt>
<dd><p>These mount options have the same effect as in ext3. The mount options "barrier" and "nobarrier" are added for consistency with other ext4 mount options.</p>
</dd>
</dl>
<p>The ext4 file system enables write barriers by default.</p>
<dl>
<dt><strong>inode_readahead_blks=</strong><code>n</code></dt>
<dd><p>This tuning parameter controls the maximum number of inode table blocks that ext4's inode table readahead algorithm will pre-read into the buffer cache. The value must be a power of 2. The default value is 32 blocks.</p>
</dd>
<dt><strong>stripe=</strong><code>n</code></dt>
<dd><p>Number of file system blocks that mballoc will try to use for allocation size and alignment. For RAID5/6 systems this should be the number of data disks * RAID chunk size in file system blocks.</p>
</dd>
<dt><strong>delalloc</strong></dt>
<dd><p>Deferring block allocation until write-out time.</p>
</dd>
<dt><strong>nodelalloc</strong></dt>
<dd><p>Disable delayed allocation. Blocks are allocated when data is copied from user to page cache.</p>
</dd>
<dt><strong>max_batch_time=</strong><code>usec</code></dt>
<dd><p>Maximum amount of time ext4 should wait for additional file system operations to be batch together with a synchronous write operation. Since a synchronous write operation is going to force a commit and then a wait for the I/O complete, it doesn't cost much, and can be a huge throughput win, we wait for a small amount of time to see if any other transactions can piggyback on the synchronous write. The algorithm used is designed to automatically tune for the speed of the disk, by measuring the amount of time (on average) that it takes to finish committing a transaction. Call this time the "commit time". If the time that the transaction has been running is less than the commit time, ext4 will try sleeping for the commit time to see if other operations will join the transaction. The commit time is capped by the max_batch_time, which defaults to 15000 µs (15 ms). This optimization can be turned off entirely by setting max_batch_time to 0.</p>
</dd>
<dt><strong>min_batch_time=</strong><code>usec</code></dt>
<dd><p>This parameter sets the commit time (as described above) to be at least min_batch_time. It defaults to zero microseconds. Increasing this parameter may improve the throughput of multi-threaded, synchronous workloads on very fast disks, at the cost of increasing latency.</p>
</dd>
<dt><strong>journal_ioprio=</strong><code>prio</code></dt>
<dd><p>The I/O priority (from 0 to 7, where 0 is the highest priority) which should be used for I/O operations submitted by kjournald2 during a commit operation. This defaults to 3, which is a slightly higher priority than the default I/O priority.</p>
</dd>
<dt><strong>abort</strong></dt>
<dd><p>Simulate the effects of calling ext4_abort() for debugging purposes. This is normally used while remounting a file system which is already mounted.</p>
</dd>
<dt><strong>auto_da_alloc</strong>|<strong>noauto_da_alloc</strong></dt>
<dd><p>Many broken applications don't use fsync() when replacing existing files via patterns such as</p>
</dd>
</dl>
<p>fd = open("foo.new")/write(fd,...)/close(fd)/ rename("foo.new", "foo")</p>
<p>or worse yet</p>
<p>fd = open("foo", O_TRUNC)/write(fd,...)/close(fd).</p>
<p>If auto_da_alloc is enabled, ext4 will detect the replace-via-rename and replace-via-truncate patterns and force that any delayed allocation blocks are allocated such that at the next journal commit, in the default data=ordered mode, the data blocks of the new file are forced to disk before the rename() operation is committed. This provides roughly the same level of guarantees as ext3, and avoids the "zero-length" problem that can happen when a system crashes before the delayed allocation blocks are forced to disk.</p>
<dl>
<dt><strong>noinit_itable</strong></dt>
<dd><p>Do not initialize any uninitialized inode table blocks in the background. This feature may be used by installation CD's so that the install process can complete as quickly as possible; the inode table initialization process would then be deferred until the next time the file system is mounted.</p>
</dd>
<dt><strong>init_itable=n</strong></dt>
<dd><p>The lazy itable init code will wait n times the number of milliseconds it took to zero out the previous block group's inode table. This minimizes the impact on system performance while the file system's inode table is being initialized.</p>
</dd>
<dt><strong>discard</strong>/<strong>nodiscard</strong></dt>
<dd><p>Controls whether ext4 should issue discard/TRIM commands to the underlying block device when blocks are freed. This is useful for SSD devices and sparse/thinly-provisioned LUNs, but it is off by default until sufficient testing has been done.</p>
</dd>
<dt><strong>block_validity</strong>/<strong>noblock_validity</strong></dt>
<dd><p>This option enables/disables the in-kernel facility for tracking file system metadata blocks within internal data structures. This allows multi- block allocator and other routines to quickly locate extents which might overlap with file system metadata blocks. This option is intended for debugging purposes and since it negatively affects the performance, it is off by default.</p>
</dd>
<dt><strong>dioread_lock</strong>/<strong>dioread_nolock</strong></dt>
<dd><p>Controls whether or not ext4 should use the DIO read locking. If the dioread_nolock option is specified ext4 will allocate uninitialized extent before buffer write and convert the extent to initialized after IO completes. This approach allows ext4 code to avoid using inode mutex, which improves scalability on high speed storages. However this does not work with data journaling and dioread_nolock option will be ignored with kernel warning. Note that dioread_nolock code path is only used for extent-based files. Because of the restrictions this options comprises it is off by default (e.g. dioread_lock).</p>
</dd>
<dt><strong>max_dir_size_kb=n</strong></dt>
<dd><p>This limits the size of the directories so that any attempt to expand them beyond the specified limit in kilobytes will cause an ENOSPC error. This is useful in memory-constrained environments, where a very large directory can cause severe performance problems or even provoke the Out Of Memory killer. (For example, if there is only 512 MB memory available, a 176 MB directory may seriously cramp the system's style.)</p>
</dd>
<dt><strong>i_version</strong></dt>
<dd><p>Enable 64-bit inode version support. This option is off by default.</p>
</dd>
<dt><strong>nombcache</strong></dt>
<dd><p>This option disables use of mbcache for extended attribute deduplication. On systems where extended attributes are rarely or never shared between files, use of mbcache for deduplication adds unnecessary computational overhead.</p>
</dd>
<dt><strong>prjquota</strong></dt>
<dd><p>The prjquota mount option enables project quota support on the file system. You need the quota utilities to actually enable and manage the quota system. This mount option requires the <strong>project</strong> file system feature.</p>
</dd>
</dl>
</div></div></div><h1 id='file-attributes'><a href='#file-attributes'>FILE ATTRIBUTES</a></h1><div data-for='file-attributes' data-hide><div class='section' data-for='file-attributes'><div data-more>
<p>The ext2, ext3, and ext4 file systems support setting the following file attributes on Linux systems using the <a href='/1/chattr'>chattr</a>(1) utility:</p>
<p><strong>a</strong> - append only</p>
<p><strong>A</strong> - no atime updates</p>
<p><strong>d</strong> - no dump</p>
<p><strong>D</strong> - synchronous directory updates</p>
<p><strong>i</strong> - immutable</p>
<p><strong>S</strong> - synchronous updates</p>
<p><strong>u</strong> - undeletable</p>
<p>In addition, the ext3 and ext4 file systems support the following flag:</p>
<p><strong>j</strong> - data journaling</p>
<p>Finally, the ext4 file system also supports the following flag:</p>
<p><strong>e</strong> - extents format</p>
<p>For descriptions of these attribute flags, please refer to the <a href='/1/chattr'>chattr</a>(1) man page.</p>
</div></div></div><h1 id='kernel-support'><a href='#kernel-support'>KERNEL SUPPORT</a></h1><div data-for='kernel-support' data-hide><div class='section' data-for='kernel-support'><div data-more>
<p>This section lists the file system driver (e.g., ext2, ext3, ext4) and upstream kernel version where a particular file system feature was supported. Note that in some cases the feature was present in earlier kernel versions, but there were known, serious bugs. In other cases the feature may still be considered in an experimental state. Finally, note that some distributions may have backported features into older kernels; in particular the kernel versions in certain "enterprise distributions" can be extremely misleading.</p>
<ul>
<li><p>ext2, 2.2.0</p></li>
<li><p>ext2, 2.2.0</p></li>
<li><p>ext2, 2.2.0</p></li>
<li><p>ext3, 2.4.15</p></li>
<li><p>ext2/ext3, 2.6.0</p></li>
<li><p>ext3, 2.6.0</p></li>
<li><p>ext3, 2.6.10 (online resizing)</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 2.6.28</p></li>
<li><p>ext4, 3.0</p></li>
<li><p>ext4, 3.2</p></li>
<li><p>ext4, 3.6</p></li>
<li><p>ext4, 3.8</p></li>
<li><p>ext4, 3.16</p></li>
<li><p>ext4, 3.18</p></li>
<li><p>ext4, 4.1</p></li>
<li><p>ext4, 4.4</p></li>
<li><p>ext4, 4.5</p></li>
<li><p>ext4, 4.13</p></li>
<li><p>ext4, 4.13</p></li>
<li><p>ext4, 5.2</p></li>
<li><p>ext4, 5.4</p></li>
<li><p>ext4, 5.5</p></li>
</ul>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/8/mke2fs'>mke2fs</a>(8), <a href='/5/mke2fs.conf'>mke2fs.conf</a>(5), <a href='/8/e2fsck'>e2fsck</a>(8), <a href='/8/dumpe2fs'>dumpe2fs</a>(8), <a href='/8/tune2fs'>tune2fs</a>(8), <a href='/8/debugfs'>debugfs</a>(8), <a href='/8/mount'>mount</a>(8), <a href='/1/chattr'>chattr</a>(1)</p></div></div>


        </div>

    </body>

</html>