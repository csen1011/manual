<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>fuse - Filesystem in Userspace (FUSE) device</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;linux/fuse.h&gt;</a></code></pre>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>This device is the primary interface between the FUSE filesystem driver and a user-space process wishing to provide the filesystem (referred to in the rest of this manual page as the <code>filesystem daemon</code>). This manual page is intended for those interested in understanding the kernel interface itself. Those implementing a FUSE filesystem may wish to make use of a user-space library such as <code>libfuse</code> that abstracts away the low-level interface.</p>
<p>At its core, FUSE is a simple client-server protocol, in which the Linux kernel is the client and the daemon is the server. After obtaining a file descriptor for this device, the daemon may <a href='/2/read'>read</a>(2) requests from that file descriptor and is expected to <a href='/2/write'>write</a>(2) back its replies. It is important to note that a file descriptor is associated with a unique FUSE filesystem. In particular, opening a second copy of this device, will not allow access to resources created through the first file descriptor (and vice versa). Every message that is read by the daemon begins with a header described by the following structure:</p>
<pre><code>struct fuse_in_header {
    uint32_t len;       /* Total length of the data,
                           including this header */
    uint32_t opcode;    /* The kind of operation (see below) */
    uint64_t unique;    /* A unique identifier for this request */
    uint64_t nodeid;    /* ID of the filesystem object
                           being operated on */
    uint32_t uid;       /* UID of the requesting process */
    uint32_t gid;       /* GID of the requesting process */
    uint32_t pid;       /* PID of the requesting process */
    uint32_t padding;
};</code></pre>
<p>The header is followed by a variable-length data portion (which may be empty) specific to the requested operation (the requested operation is indicated by <code>opcode</code>).</p>
<p>The daemon should then process the request and if applicable send a reply (almost all operations require a reply; if they do not, this is documented below), by performing a <a href='/2/write'>write</a>(2) to the file descriptor. All replies must start with the following header:</p>
<pre><code>struct fuse_out_header {
    uint32_t len;       /* Total length of data written to
                           the file descriptor */
    int32_t  error;     /* Any error that occurred (0 if none) */
    uint64_t unique;    /* The value from the
                           corresponding request */
};</code></pre>
<p>This header is also followed by (potentially empty) variable-sized data depending on the executed request. However, if the reply is an error reply (i.e., <code>error</code> is set), then no further payload data should be sent, independent of the request. This section should contain documentation for each of the messages in the protocol. This manual page is currently incomplete, so not all messages are documented. For each message, first the struct sent by the kernel is given, followed by a description of the semantics of the message.</p>
<dl>
<dt><strong>FUSE_INIT</strong></dt>
<dd><pre><code>struct fuse_init_in {
    uint32_t major;
    uint32_t minor;
    uint32_t max_readahead; /* Since protocol v7.6 */
    uint32_t flags;         /* Since protocol v7.6 */
};</code></pre>
<p>This is the first request sent by the kernel to the daemon. It is used to negotiate the protocol version and other filesystem parameters. Note that the protocol version may affect the layout of any structure in the protocol (including this structure). The daemon must thus remember the negotiated version and flags for each session. As of the writing of this man page, the highest supported kernel protocol version is <code>7.26</code>.</p>
<p>Users should be aware that the descriptions in this manual page may be incomplete or incorrect for older or more recent protocol versions.</p>
<p>The reply for this request has the following format:</p>
<pre><code>struct fuse_init_out {
    uint32_t major;
    uint32_t minor;
    uint32_t max_readahead;   /* Since v7.6 */
    uint32_t flags;           /* Since v7.6; some flags bits
                                 were introduced later */
    uint16_t max_background;  /* Since v7.13 */
    uint16_t congestion_threshold;  /* Since v7.13 */
    uint32_t max_write;       /* Since v7.5 */
    uint32_t time_gran;       /* Since v7.6 */
    uint32_t unused[9];
};</code></pre>
<p>If the major version supported by the kernel is larger than that supported by the daemon, the reply shall consist of only <code>uint32_t major</code> (following the usual header), indicating the largest major version supported by the daemon. The kernel will then issue a new <strong>FUSE_INIT</strong> request conforming to the older version. In the reverse case, the daemon should quietly fall back to the kernel's major version.</p>
<p>The negotiated minor version is considered to be the minimum of the minor versions provided by the daemon and the kernel and both parties should use the protocol corresponding to said minor version.</p>
</dd>
<dt><strong>FUSE_GETATTR</strong></dt>
<dd><pre><code>struct fuse_getattr_in {
    uint32_t getattr_flags;
    uint32_t dummy;
    uint64_t fh;      /* Set only if
                         (getattr_flags &amp; FUSE_GETATTR_FH)
};</code></pre>
<p>The requested operation is to compute the attributes to be returned by <a href='/2/stat'>stat</a>(2) and similar operations for the given filesystem object. The object for which the attributes should be computed is indicated either by <code>header-&gt;nodeid</code> or, if the <strong>FUSE_GETATTR_FH</strong> flag is set, by the file handle <code>fh</code>. The latter case of operation is analogous to <a href='/2/fstat'>fstat</a>(2).</p>
<p>For performance reasons, these attributes may be cached in the kernel for a specified duration of time. While the cache timeout has not been exceeded, the attributes will be served from the cache and will not cause additional <strong>FUSE_GETATTR</strong> requests.</p>
<p>The computed attributes and the requested cache timeout should then be returned in the following structure:</p>
<pre><code>struct fuse_attr_out {
    /* Attribute cache duration (seconds + nanoseconds) */
    uint64_t attr_valid;
    uint32_t attr_valid_nsec;
    uint32_t dummy;
    struct fuse_attr {
        uint64_t ino;
        uint64_t size;
        uint64_t blocks;
        uint64_t atime;
        uint64_t mtime;
        uint64_t ctime;
        uint32_t atimensec;
        uint32_t mtimensec;
        uint32_t ctimensec;
        uint32_t mode;
        uint32_t nlink;
        uint32_t uid;
        uint32_t gid;
        uint32_t rdev;
        uint32_t blksize;
        uint32_t padding;
    } attr;
};</code></pre>
</dd>
<dt><strong>FUSE_ACCESS</strong></dt>
<dd><pre><code>struct fuse_access_in {
    uint32_t mask;
    uint32_t padding;
};</code></pre>
<p>If the <code>default_permissions</code> mount options is not used, this request may be used for permissions checking. No reply data is expected, but errors may be indicated as usual by setting the <code>error</code> field in the reply header (in particular, access denied errors may be indicated by returning <strong>-EACCES</strong>).</p>
</dd>
<dt><strong>FUSE_OPEN</strong> and <strong>FUSE_OPENDIR</strong></dt>
<dd>
</dd>
</dl>
<pre><code>struct fuse_open_in {
    uint32_t flags;     /* The flags that were passed
                           to the open(2) */
    uint32_t unused;
};</code></pre>
<blockquote>
<p>The requested operation is to open the node indicated by <code>header-&gt;nodeid</code>. The exact semantics of what this means will depend on the filesystem being implemented. However, at the very least the filesystem should validate that the requested <code>flags</code> are valid for the indicated resource and then send a reply with the following format:</p>
<pre><code>struct fuse_open_out {
    uint64_t fh;
    uint32_t open_flags;
    uint32_t padding;
};</code></pre>
<p>The <code>fh</code> field is an opaque identifier that the kernel will use to refer to this resource The <code>open_flags</code> field is a bit mask of any number of the flags that indicate properties of this file handle to the kernel:</p>
</blockquote>
<blockquote>
<dl>
<dt><strong>FOPEN_DIRECT_IO</strong></dt>
<dd><p>Bypass page cache for this open file.</p>
</dd>
<dt><strong>FOPEN_KEEP_CACHE</strong></dt>
<dd><p>Don't invalidate the data cache on open.</p>
</dd>
<dt><strong>FOPEN_NONSEEKABLE</strong></dt>
<dd><p>The file is not seekable.</p>
</dd>
</dl>
</blockquote>
<dl>
<dt><strong>FUSE_READ</strong> and <strong>FUSE_READDIR</strong></dt>
<dd><pre><code>struct fuse_read_in {
    uint64_t fh;
    uint64_t offset;
    uint32_t size;
    uint32_t read_flags;
    uint64_t lock_owner;
    uint32_t flags;
    uint32_t padding;
};</code></pre>
<p>The requested action is to read up to <code>size</code> bytes of the file or directory, starting at <code>offset</code>. The bytes should be returned directly following the usual reply header.</p>
</dd>
<dt><strong>FUSE_INTERRUPT</strong></dt>
<dd>
</dd>
</dl>
<pre><code>struct fuse_interrupt_in {
    uint64_t unique;
};</code></pre>
<blockquote>
<p>The requested action is to cancel the pending operation indicated by <code>unique</code>. This request requires no response. However, receipt of this message does not by itself cancel the indicated operation. The kernel will still expect a reply to said operation (e.g., an <code>EINTR</code> error or a short read). At most one <strong>FUSE_INTERRUPT</strong> request will be issued for a given operation. After issuing said operation, the kernel will wait uninterruptibly for completion of the indicated request.</p>
</blockquote>
<dl>
<dt><strong>FUSE_LOOKUP</strong></dt>
<dd><p>Directly following the header is a filename to be looked up in the directory indicated by <code>header-&gt;nodeid</code>. The expected reply is of the form:</p>
<pre><code>struct fuse_entry_out {
    uint64_t nodeid;            /* Inode ID */
    uint64_t generation;        /* Inode generation */
    uint64_t entry_valid;
    uint64_t attr_valid;
    uint32_t entry_valid_nsec;
    uint32_t attr_valid_nsec;
    struct fuse_attr attr;
};</code></pre>
<p>The combination of <code>nodeid</code> and <code>generation</code> must be unique for the filesystem's lifetime.</p>
<p>The interpretation of timeouts and <code>attr</code> is as for <strong>FUSE_GETATTR</strong>.</p>
</dd>
<dt><strong>FUSE_FLUSH</strong></dt>
<dd>
</dd>
</dl>
<pre><code>struct fuse_flush_in {
    uint64_t fh;
    uint32_t unused;
    uint32_t padding;
    uint64_t lock_owner;
};</code></pre>
<blockquote>
<p>The requested action is to flush any pending changes to the indicated file handle. No reply data is expected. However, an empty reply message still needs to be issued once the flush operation is complete.</p>
</blockquote>
<dl>
<dt><strong>FUSE_RELEASE</strong> and <strong>FUSE_RELEASEDIR</strong></dt>
<dd>
</dd>
</dl>
<pre><code>struct fuse_release_in {
    uint64_t fh;
    uint32_t flags;
    uint32_t release_flags;
    uint64_t lock_owner;
};</code></pre>
<blockquote>
<p>These are the converse of <strong>FUSE_OPEN</strong> and <strong>FUSE_OPENDIR</strong> respectively. The daemon may now free any resources associated with the file handle <code>fh</code> as the kernel will no longer refer to it. There is no reply data associated with this request, but a reply still needs to be issued once the request has been completely processed.</p>
</blockquote>
<dl>
<dt><strong>FUSE_STATFS</strong></dt>
<dd><p>This operation implements <a href='/2/statfs'>statfs</a>(2) for this filesystem. There is no input data associated with this request. The expected reply data has the following structure:</p>
<pre><code>struct fuse_kstatfs {
    uint64_t blocks;
    uint64_t bfree;
    uint64_t bavail;
    uint64_t files;
    uint64_t ffree;
    uint32_t bsize;
    uint32_t namelen;
    uint32_t frsize;
    uint32_t padding;
    uint32_t spare[6];
};

struct fuse_statfs_out {
    struct fuse_kstatfs st;
};</code></pre>
<p>For the interpretation of these fields, see <a href='/2/statfs'>statfs</a>(2).</p>
</dd>
</dl>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<dl>
<dt><strong>E2BIG</strong></dt>
<dd><p>Returned from <a href='/2/read'>read</a>(2) operations when the kernel's request is too large for the provided buffer and the request was <strong>FUSE_SETXATTR</strong>.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>Returned from <a href='/2/write'>write</a>(2) if validation of the reply failed. Not all mistakes in replies will be caught by this validation. However, basic mistakes, such as short replies or an incorrect <code>unique</code> value, are detected.</p>
</dd>
<dt><strong>EIO</strong></dt>
<dd><p>Returned from <a href='/2/read'>read</a>(2) operations when the kernel's request is too large for the provided buffer.</p>
<p><code>Note</code>: There are various ways in which incorrect use of these interfaces can cause operations on the provided filesystem's files and directories to fail with <strong>EIO</strong>. Among the possible incorrect uses are:</p>
<ul>
<li><p>changing <code>mode &amp; S_IFMT</code> for an inode that has previously been reported to the kernel; or</p></li>
<li><p>giving replies to the kernel that are shorter than what the kernel expected.</p></li>
</ul>
</dd>
<dt><strong>ENODEV</strong></dt>
<dd><p>Returned from <a href='/2/read'>read</a>(2) and <a href='/2/write'>write</a>(2) if the FUSE filesystem was unmounted.</p>
</dd>
<dt><strong>EPERM</strong></dt>
<dd><p>Returned from operations on a <code>/dev/fuse</code> file descriptor that has not been mounted.</p>
</dd>
</dl>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p>The FUSE filesystem is Linux-specific.</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>The following messages are not yet documented in this manual page:</p>
<pre><code>FUSE_BATCH_FORGET
FUSE_BMAP
FUSE_CREATE
FUSE_DESTROY
FUSE_FALLOCATE
FUSE_FORGET
FUSE_FSYNC
FUSE_FSYNCDIR
FUSE_GETLK
FUSE_GETXATTR
FUSE_IOCTL
FUSE_LINK
FUSE_LISTXATTR
FUSE_LSEEK
FUSE_MKDIR
FUSE_MKNOD
FUSE_NOTIFY_REPLY
FUSE_POLL
FUSE_READDIRPLUS
FUSE_READLINK
FUSE_REMOVEXATTR
FUSE_RENAME
FUSE_RENAME2
FUSE_RMDIR
FUSE_SETATTR
FUSE_SETLK
FUSE_SETLKW
FUSE_SYMLINK
FUSE_UNLINK
FUSE_WRITE</code></pre>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/1/fusermount'>fusermount</a>(1), <a href='/8/mount.fuse'>mount.fuse</a>(8)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>