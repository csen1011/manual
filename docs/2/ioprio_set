<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>ioprio_get, ioprio_set - get/set I/O scheduling class and priority</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code>int ioprio_get(int which, int who);
int ioprio_set(int which, int who, int ioprio);</code></pre>
<p><code>Note</code>: There are no glibc wrappers for these system calls; see NOTES.</p>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The <a href='ioprio_get'>ioprio_get</a>() and <a href='ioprio_set'>ioprio_set</a>() system calls get and set the I/O scheduling class and priority of one or more threads.</p>
<p>The <code>which</code> and <code>who</code> arguments identify the thread(s) on which the system calls operate. The <code>which</code> argument determines how <code>who</code> is interpreted, and has one of the following values:</p>
<dl>
<dt><strong>IOPRIO_WHO_PROCESS</strong></dt>
<dd><p><code>who</code> is a process ID or thread ID identifying a single process or thread. If <code>who</code> is 0, then operate on the calling thread.</p>
</dd>
<dt><strong>IOPRIO_WHO_PGRP</strong></dt>
<dd><p><code>who</code> is a process group ID identifying all the members of a process group. If <code>who</code> is 0, then operate on the process group of which the caller is a member.</p>
</dd>
<dt><strong>IOPRIO_WHO_USER</strong></dt>
<dd><p><code>who</code> is a user ID identifying all of the processes that have a matching real UID.</p>
</dd>
</dl>
<p>If <code>which</code> is specified as <strong>IOPRIO_WHO_PGRP</strong> or <strong>IOPRIO_WHO_USER</strong> when calling <a href='ioprio_get'>ioprio_get</a>(), and more than one process matches <code>who</code>, then the returned priority will be the highest one found among all of the matching processes. One priority is said to be higher than another one if it belongs to a higher priority class (<strong>IOPRIO_CLASS_RT</strong> is the highest priority class; <strong>IOPRIO_CLASS_IDLE</strong> is the lowest) or if it belongs to the same priority class as the other process but has a higher priority level (a lower priority number means a higher priority level).</p>
<p>The <code>ioprio</code> argument given to <a href='ioprio_set'>ioprio_set</a>() is a bit mask that specifies both the scheduling class and the priority to be assigned to the target process(es). The following macros are used for assembling and dissecting <code>ioprio</code> values:</p>
<dl>
<dt><strong><a href='IOPRIO_PRIO_VALUE'>IOPRIO_PRIO_VALUE</a>(</strong><code>class</code><strong>, </strong><code>data</code><strong>)</strong></dt>
<dd><p>Given a scheduling <code>class</code> and priority (<code>data</code>), this macro combines the two values to produce an <code>ioprio</code> value, which is returned as the result of the macro.</p>
</dd>
<dt><strong><a href='IOPRIO_PRIO_CLASS'>IOPRIO_PRIO_CLASS</a>(</strong><code>mask</code><strong>)</strong></dt>
<dd><p>Given <code>mask</code> (an <code>ioprio</code> value), this macro returns its I/O class component, that is, one of the values <strong>IOPRIO_CLASS_RT</strong>, <strong>IOPRIO_CLASS_BE</strong>, or <strong>IOPRIO_CLASS_IDLE</strong>.</p>
</dd>
<dt><strong><a href='IOPRIO_PRIO_DATA'>IOPRIO_PRIO_DATA</a>(</strong><code>mask</code><strong>)</strong></dt>
<dd><p>Given <code>mask</code> (an <code>ioprio</code> value), this macro returns its priority (<code>data</code>) component.</p>
</dd>
</dl>
<p>See the NOTES section for more information on scheduling classes and priorities, as well as the meaning of specifying <code>ioprio</code> as 0.</p>
<p>I/O priorities are supported for reads and for synchronous (<strong>O_DIRECT</strong>, <strong>O_SYNC</strong>) writes. I/O priorities are not supported for asynchronous writes because they are issued outside the context of the program dirtying the memory, and thus program-specific priorities do not apply.</p>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>On success, <a href='ioprio_get'>ioprio_get</a>() returns the <code>ioprio</code> value of the process with highest I/O priority of any of the processes that match the criteria specified in <code>which</code> and <code>who</code>. On error, -1 is returned, and <code>errno</code> is set to indicate the error.</p>
<p>On success, <a href='ioprio_set'>ioprio_set</a>() returns 0. On error, -1 is returned, and <code>errno</code> is set to indicate the error.</p>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<dl>
<dt><strong>EINVAL</strong></dt>
<dd><p>Invalid value for <code>which</code> or <code>ioprio</code>. Refer to the NOTES section for available scheduler classes and priority levels for <code>ioprio</code>.</p>
</dd>
<dt><strong>EPERM</strong></dt>
<dd><p>The calling process does not have the privilege needed to assign this <code>ioprio</code> to the specified process(es). See the NOTES section for more information on required privileges for <a href='ioprio_set'>ioprio_set</a>().</p>
</dd>
<dt><strong>ESRCH</strong></dt>
<dd><p>No process(es) could be found that matched the specification in <code>which</code> and <code>who</code>.</p>
</dd>
</dl>
</div></div></div><h1 id='versions'><a href='#versions'>VERSIONS</a></h1><div data-for='versions' data-hide><div class='section' data-for='versions'><div data-more>
<p>These system calls have been available on Linux since kernel 2.6.13.</p>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p>These system calls are Linux-specific.</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>Glibc does not provide a wrapper for these system calls; call them using <a href='/2/syscall'>syscall</a>(2).</p>
<p>Two or more processes or threads can share an I/O context. This will be the case when <a href='/2/clone'>clone</a>(2) was called with the <strong>CLONE_IO</strong> flag. However, by default, the distinct threads of a process will <strong>not</strong> share the same I/O context. This means that if you want to change the I/O priority of all threads in a process, you may need to call <a href='ioprio_set'>ioprio_set</a>() on each of the threads. The thread ID that you would need for this operation is the one that is returned by <a href='/2/gettid'>gettid</a>(2) or <a href='/2/clone'>clone</a>(2).</p>
<p>These system calls have an effect only when used in conjunction with an I/O scheduler that supports I/O priorities. As at kernel 2.6.17 the only such scheduler is the Completely Fair Queuing (CFQ) I/O scheduler.</p>
<p>If no I/O scheduler has been set for a thread, then by default the I/O priority will follow the CPU nice value (<a href='/2/setpriority'>setpriority</a>(2)). In Linux kernels before version 2.6.24, once an I/O priority had been set using <a href='ioprio_set'>ioprio_set</a>(), there was no way to reset the I/O scheduling behavior to the default. Since Linux 2.6.24, specifying <code>ioprio</code> as 0 can be used to reset to the default I/O scheduling behavior.</p>
<h2>Selecting an I/O scheduler</h2>
<p>I/O schedulers are selected on a per-device basis via the special file <code>/sys/block/&lt;device&gt;/queue/scheduler</code>.</p>
<p>One can view the current I/O scheduler via the <code>/sys</code> filesystem. For example, the following command displays a list of all schedulers currently loaded in the kernel:</p>
<pre><code>$ cat /sys/block/sda/queue/scheduler
noop anticipatory deadline [cfq]</code></pre>
<p>The scheduler surrounded by brackets is the one actually in use for the device (<code>sda</code> in the example). Setting another scheduler is done by writing the name of the new scheduler to this file. For example, the following command will set the scheduler for the <code>sda</code> device to <code>cfq</code>:</p>
<pre><code>$ su
Password:
# echo cfq &gt; /sys/block/sda/queue/scheduler</code></pre>
<p>Since version 3 (also known as CFQ Time Sliced), CFQ implements I/O nice levels similar to those of CPU scheduling. These nice levels are grouped into three scheduling classes, each one containing one or more priority levels:</p>
<dl>
<dt><strong>IOPRIO_CLASS_RT</strong> (1)</dt>
<dd><p>This is the real-time I/O class. This scheduling class is given higher priority than any other class: processes from this class are given first access to the disk every time. Thus, this I/O class needs to be used with some care: one I/O real-time process can starve the entire system. Within the real-time class, there are 8 levels of class data (priority) that determine exactly how much time this process needs the disk for on each service. The highest real-time priority level is 0; the lowest is 7. In the future, this might change to be more directly mappable to performance, by passing in a desired data rate instead.</p>
</dd>
<dt><strong>IOPRIO_CLASS_BE</strong> (2)</dt>
<dd><p>This is the best-effort scheduling class, which is the default for any process that hasn't set a specific I/O priority. The class data (priority) determines how much I/O bandwidth the process will get. Best-effort priority levels are analogous to CPU nice values (see <a href='/2/getpriority'>getpriority</a>(2)). The priority level determines a priority relative to other processes in the best-effort scheduling class. Priority levels range from 0 (highest) to 7 (lowest).</p>
</dd>
<dt><strong>IOPRIO_CLASS_IDLE</strong> (3)</dt>
<dd><p>This is the idle scheduling class. Processes running at this level get I/O time only when no one else needs the disk. The idle class has no class data. Attention is required when assigning this priority class to a process, since it may become starved if higher priority processes are constantly accessing the disk.</p>
</dd>
</dl>
<p>Refer to the kernel source file <code>Documentation/block/ioprio.txt</code> for more information on the CFQ I/O Scheduler and an example program.</p>
<h2>Required permissions to set I/O priorities</h2>
<p>Permission to change a process's priority is granted or denied based on two criteria:</p>
<dl>
<dt><strong>Process ownership</strong></dt>
<dd><p>An unprivileged process may set the I/O priority only for a process whose real UID matches the real or effective UID of the calling process. A process which has the <strong>CAP_SYS_NICE</strong> capability can change the priority of any process.</p>
</dd>
<dt><strong>What is the desired priority</strong></dt>
<dd><p>Attempts to set very high priorities (<strong>IOPRIO_CLASS_RT</strong>) require the <strong>CAP_SYS_ADMIN</strong> capability. Kernel versions up to 2.6.24 also required <strong>CAP_SYS_ADMIN</strong> to set a very low priority (<strong>IOPRIO_CLASS_IDLE</strong>), but since Linux 2.6.25, this is no longer required.</p>
</dd>
</dl>
<p>A call to <a href='ioprio_set'>ioprio_set</a>() must follow both rules, or the call will fail with the error <strong>EPERM</strong>.</p>
</div></div></div><h1 id='bugs'><a href='#bugs'>BUGS</a></h1><div data-for='bugs' data-hide><div class='section' data-for='bugs'><div data-more>
<p>Glibc does not yet provide a suitable header file defining the function prototypes and macros described on this page. Suitable definitions can be found in <code>linux/ioprio.h</code>.</p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/1/ionice'>ionice</a>(1), <a href='/2/getpriority'>getpriority</a>(2), <a href='/2/open'>open</a>(2), <a href='/7/capabilities'>capabilities</a>(7), <a href='/7/cgroups'>cgroups</a>(7)</p>
<p><code>Documentation/block/ioprio.txt</code> in the Linux kernel source tree</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>