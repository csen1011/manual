<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p><a data-bs-content='This is the man page for &lt;code&gt;dup&lt;/code&gt; and 2 related functions.' data-bs-toggle='popover' tabindex='0'>dup</a>, dup2, dup3 - duplicate a file descriptor</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;unistd.h&gt;</a>

int dup(int oldfd);
int dup2(int oldfd, int newfd);

#define _GNU_SOURCE /* See feature_test_macros(7) */
<a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;fcntl.h&gt;</a> /* Obtain O_* constant definitions */
<a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;unistd.h&gt;</a>

int dup3(int oldfd, int newfd, int flags);</code></pre>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The <a href='dup'>dup</a>() system call creates a copy of the file descriptor <code>oldfd</code>, using the lowest-numbered unused file descriptor for the new descriptor.</p>
<p>After a successful return, the old and new file descriptors may be used interchangeably. They refer to the same open file description (see <a href='/2/open'>open</a>(2)) and thus share file offset and file status flags; for example, if the file offset is modified by using <a href='/2/lseek'>lseek</a>(2) on one of the file descriptors, the offset is also changed for the other.</p>
<p>The two file descriptors do not share file descriptor flags (the close-on-exec flag). The close-on-exec flag (<strong>FD_CLOEXEC</strong>; see <a href='/2/fcntl'>fcntl</a>(2)) for the duplicate descriptor is off. The <a href='dup2'>dup2</a>() system call performs the same task as <a href='dup'>dup</a>(), but instead of using the lowest-numbered unused file descriptor, it uses the file descriptor number specified in <code>newfd</code>. If the file descriptor <code>newfd</code> was previously open, it is silently closed before being reused.</p>
<p>The steps of closing and reusing the file descriptor <code>newfd</code> are performed <code>atomically</code>. This is important, because trying to implement equivalent functionality using <a href='/2/close'>close</a>(2) and <a href='dup'>dup</a>() would be subject to race conditions, whereby <code>newfd</code> might be reused between the two steps. Such reuse could happen because the main program is interrupted by a signal handler that allocates a file descriptor, or because a parallel thread allocates a file descriptor.</p>
<p>Note the following points:</p>
<ul>
<li><p>If <code>oldfd</code> is not a valid file descriptor, then the call fails, and <code>newfd</code> is not closed.</p></li>
<li><p>If <code>oldfd</code> is a valid file descriptor, and <code>newfd</code> has the same value as <code>oldfd</code>, then <a href='dup2'>dup2</a>() does nothing, and returns <code>newfd</code>. <a href='dup3'>dup3</a>() is the same as <a href='dup2'>dup2</a>(), except that:</p></li>
<li><p>The caller can force the close-on-exec flag to be set for the new file descriptor by specifying <strong>O_CLOEXEC</strong> in <code>flags</code>. See the description of the same flag in <a href='/2/open'>open</a>(2) for reasons why this may be useful.</p></li>
<li><p>If <code>oldfd</code> equals <code>newfd</code>, then <a href='dup3'>dup3</a>() fails with the error <strong>EINVAL</strong>.</p></li>
</ul>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>On success, these system calls return the new file descriptor. On error, -1 is returned, and <code>errno</code> is set appropriately.</p>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<dl>
<dt><strong>EBADF</strong></dt>
<dd><p><code>oldfd</code> isn't an open file descriptor.</p>
</dd>
<dt><strong>EBADF</strong></dt>
<dd><p><code>newfd</code> is out of the allowed range for file descriptors (see the discussion of <strong>RLIMIT_NOFILE</strong> in <a href='/2/getrlimit'>getrlimit</a>(2)).</p>
</dd>
<dt><strong>EBUSY</strong></dt>
<dd><p>(Linux only) This may be returned by <a href='dup2'>dup2</a>() or <a href='dup3'>dup3</a>() during a race condition with <a href='/2/open'>open</a>(2) and <a href='dup'>dup</a>().</p>
</dd>
<dt><strong>EINTR</strong></dt>
<dd><p>The <a href='dup2'>dup2</a>() or <a href='dup3'>dup3</a>() call was interrupted by a signal; see <a href='/7/signal'>signal</a>(7).</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>(<a href='dup3'>dup3</a>()) <code>flags</code> contain an invalid value.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>(<a href='dup3'>dup3</a>()) <code>oldfd</code> was equal to <code>newfd</code>.</p>
</dd>
<dt><strong>EMFILE</strong></dt>
<dd><p>The per-process limit on the number of open file descriptors has been reached (see the discussion of <strong>RLIMIT_NOFILE</strong> in <a href='/2/getrlimit'>getrlimit</a>(2)).</p>
</dd>
</dl>
</div></div></div><h1 id='versions'><a href='#versions'>VERSIONS</a></h1><div data-for='versions' data-hide><div class='section' data-for='versions'><div data-more>
<p><a href='dup3'>dup3</a>() was added to Linux in version 2.6.27; glibc support is available starting with version 2.9.</p>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p><a href='dup'>dup</a>(), <a href='dup2'>dup2</a>(): POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.</p>
<p><a href='dup3'>dup3</a>() is Linux-specific.</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>The error returned by <a href='dup2'>dup2</a>() is different from that returned by <strong><a href='fcntl'>fcntl</a>(</strong>..., <strong>F_DUPFD</strong>, ...<strong>)</strong> when <code>newfd</code> is out of range. On some systems, <a href='dup2'>dup2</a>() also sometimes returns <strong>EINVAL</strong> like <strong>F_DUPFD</strong>.</p>
<p>If <code>newfd</code> was open, any errors that would have been reported at <a href='/2/close'>close</a>(2) time are lost. If this is of concern, then—unless the program is single-threaded and does not allocate file descriptors in signal handlers—the correct approach is <code>not</code> to close <code>newfd</code> before calling <a href='dup2'>dup2</a>(), because of the race condition described above. Instead, code something like the following could be used:</p>
<pre><code>/* Obtain a duplicate of 'newfd' that can subsequently
   be used to check for close() errors; an EBADF error
   means that 'newfd' was not open. */

tmpfd = dup(newfd);
if (tmpfd == -1 &amp;&amp; errno != EBADF) {
    /* Handle unexpected dup() error */
}

/* Atomically duplicate 'oldfd' on 'newfd' */

if (dup2(oldfd, newfd) == -1) {
    /* Handle dup2() error */
}

/* Now check for close() errors on the file originally
   referred to by 'newfd' */

if (tmpfd != -1) {
    if (close(tmpfd) == -1) {
        /* Handle errors from close */
    }
}</code></pre>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/2/close'>close</a>(2), <a href='/2/fcntl'>fcntl</a>(2), <a href='/2/open'>open</a>(2), <a href='/2/pidfd_getfd'>pidfd_getfd</a>(2)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>