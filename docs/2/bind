<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>bind - bind a name to a socket</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;sys/types.h&gt;</a> /* See <a href='#notes'>NOTES </a>*/
<a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;sys/socket.h&gt;</a>

int bind(int sockfd, const struct sockaddr *addr,
 socklen_t addrlen);</code></pre>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>When a socket is created with <a href='/2/socket'>socket</a>(2), it exists in a name space (address family) but has no address assigned to it. <a href='bind'>bind</a>() assigns the address specified by <code>addr</code> to the socket referred to by the file descriptor <code>sockfd</code>. <code>addrlen</code> specifies the size, in bytes, of the address structure pointed to by <code>addr</code>. Traditionally, this operation is called “assigning a name to a socket”.</p>
<p>It is normally necessary to assign a local address using <a href='bind'>bind</a>() before a <strong>SOCK_STREAM</strong> socket may receive connections (see <a href='/2/accept'>accept</a>(2)).</p>
<p>The rules used in name binding vary between address families. Consult the manual entries in Section 7 for detailed information. For <strong>AF_INET</strong>, see <a href='/7/ip'>ip</a>(7); for <strong>AF_INET6</strong>, see <a href='/7/ipv6'>ipv6</a>(7); for <strong>AF_UNIX</strong>, see <a href='/7/unix'>unix</a>(7); for <strong>AF_APPLETALK</strong>, see <a href='/7/ddp'>ddp</a>(7); for <strong>AF_PACKET</strong>, see <a href='/7/packet'>packet</a>(7); for <strong>AF_X25</strong>, see <a href='/7/x25'>x25</a>(7); and for <strong>AF_NETLINK</strong>, see <a href='/7/netlink'>netlink</a>(7).</p>
<p>The actual structure passed for the <code>addr</code> argument will depend on the address family. The <code>sockaddr</code> structure is defined as something like:</p>
<pre><code>struct sockaddr {
    sa_family_t sa_family;
    char        sa_data[14];
}</code></pre>
<p>The only purpose of this structure is to cast the structure pointer passed in <code>addr</code> in order to avoid compiler warnings. See <a href='#examples'>EXAMPLES </a>below.</p>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>On success, zero is returned. On error, -1 is returned, and <code>errno</code> is set appropriately.</p>
</div></div><h1 id='examples'><a href='#examples'>EXAMPLES</a></h1><div class='section' data-for='examples'><div data-more>
<p>An example of the use of <a href='bind'>bind</a>() with Internet domain sockets can be found in <a href='/3/getaddrinfo'>getaddrinfo</a>(3).</p>
<p>The following example shows how to bind a stream socket in the UNIX (<strong>AF_UNIX</strong>) domain, and accept connections:</p>
<pre><code>#include &lt;sys/socket.h&gt;
#include &lt;sys/un.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define MY_SOCK_PATH "/somepath"
#define LISTEN_BACKLOG 50

#define handle_error(msg) \
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>char *</a>argv[])
{
    int sfd, cfd;
    struct sockaddr_un my_addr, peer_addr;
    socklen_t peer_addr_size;

    sfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (sfd == -1)
        handle_error("socket");

    memset(&amp;my_addr, 0, sizeof(my_addr));
                        /* Clear structure */
    my_addr.sun_family = AF_UNIX;
    strncpy(my_addr.sun_path, MY_SOCK_PATH,
            sizeof(my_addr.sun_path) - 1);

    if (bind(sfd, (struct sockaddr *) &amp;my_addr,
            sizeof(my_addr)) == -1)
        handle_error("bind");

    if (listen(sfd, LISTEN_BACKLOG) == -1)
        handle_error("listen");

    /* Now we can accept incoming connections one
       at a time using accept(2) */

    peer_addr_size = sizeof(peer_addr);
    cfd = accept(sfd, (struct sockaddr *) &amp;peer_addr,
                 &amp;peer_addr_size);
    if (cfd == -1)
        handle_error("accept");

    /* Code to deal with incoming connection(s)... */

    /* When no longer required, the socket pathname, MY_SOCK_PATH
       should be deleted using unlink(2) or remove(3) */
}</code></pre>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<dl>
<dt><strong>EACCES</strong></dt>
<dd><p>The address is protected, and the user is not the superuser.</p>
</dd>
<dt><strong>EADDRINUSE</strong></dt>
<dd><p>The given address is already in use.</p>
</dd>
<dt><strong>EADDRINUSE</strong></dt>
<dd><p>(Internet domain sockets) The port number was specified as zero in the socket address structure, but, upon attempting to bind to an ephemeral port, it was determined that all port numbers in the ephemeral port range are currently in use. See the discussion of <code>/proc/sys/net/ipv4/ip_local_port_range</code> <a href='/7/ip'>ip</a>(7).</p>
</dd>
<dt><strong>EBADF</strong></dt>
<dd><p><code>sockfd</code> is not a valid file descriptor.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>The socket is already bound to an address.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p><code>addrlen</code> is wrong, or <code>addr</code> is not a valid address for this socket's domain.</p>
</dd>
<dt><strong>ENOTSOCK</strong></dt>
<dd><p>The file descriptor <code>sockfd</code> does not refer to a socket.</p>
</dd>
</dl>
<p>The following errors are specific to UNIX domain (<strong>AF_UNIX</strong>) sockets:</p>
<dl>
<dt><strong>EACCES</strong></dt>
<dd><p>Search permission is denied on a component of the path prefix. (See also <a href='/7/path_resolution'>path_resolution</a>(7).)</p>
</dd>
<dt><strong>EADDRNOTAVAIL</strong></dt>
<dd><p>A nonexistent interface was requested or the requested address was not local.</p>
</dd>
<dt><strong>EFAULT</strong></dt>
<dd><p><code>addr</code> points outside the user's accessible address space.</p>
</dd>
<dt><strong>ELOOP</strong></dt>
<dd><p>Too many symbolic links were encountered in resolving <code>addr</code>.</p>
</dd>
<dt><strong>ENAMETOOLONG</strong></dt>
<dd><p><code>addr</code> is too long.</p>
</dd>
<dt><strong>ENOENT</strong></dt>
<dd><p>A component in the directory prefix of the socket pathname does not exist.</p>
</dd>
<dt><strong>ENOMEM</strong></dt>
<dd><p>Insufficient kernel memory was available.</p>
</dd>
<dt><strong>ENOTDIR</strong></dt>
<dd><p>A component of the path prefix is not a directory.</p>
</dd>
<dt><strong>EROFS</strong></dt>
<dd><p>The socket inode would reside on a read-only filesystem.</p>
</dd>
</dl>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p>POSIX.1-2001, POSIX.1-2008, SVr4, 4.4BSD (<a href='bind'>bind</a>() first appeared in 4.2BSD).</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>POSIX.1 does not require the inclusion of <code>&lt;sys/types.h&gt;</code>, and this header file is not required on Linux. However, some historical (BSD) implementations required this header file, and portable applications are probably wise to include it.</p>
<p>For background on the <code>socklen_t</code> type, see <a href='/2/accept'>accept</a>(2).</p>
</div></div></div><h1 id='bugs'><a href='#bugs'>BUGS</a></h1><div data-for='bugs' data-hide><div class='section' data-for='bugs'><div data-more>
<p>The transparent proxy options are not described.</p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/2/accept'>accept</a>(2), <a href='/2/connect'>connect</a>(2), <a href='/2/getsockname'>getsockname</a>(2), <a href='/2/listen'>listen</a>(2), <a href='/2/socket'>socket</a>(2), <a href='/3/getaddrinfo'>getaddrinfo</a>(3), <a href='/3/getifaddrs'>getifaddrs</a>(3), <a href='/7/ip'>ip</a>(7), <a href='/7/ipv6'>ipv6</a>(7), <a href='/7/path_resolution'>path_resolution</a>(7), <a href='/7/socket'>socket</a>(7), <a href='/7/unix'>unix</a>(7)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>