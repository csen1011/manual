<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p><a data-bs-content='This is the man page for &lt;code&gt;accept&lt;/code&gt; and 1 related function.' data-bs-toggle='popover' tabindex='0'>accept</a>, accept4 - accept a connection on a socket</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;sys/types.h&gt;</a> /* See <a href='#notes'>NOTES </a>*/
<a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;sys/socket.h&gt;</a>

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

#define _GNU_SOURCE /* See feature_test_macros(7) */
<a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;sys/socket.h&gt;</a>

int accept4(int sockfd, struct sockaddr *addr,
 socklen_t *addrlen, int flags);</code></pre>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The <a href='accept'>accept</a>() system call is used with connection-based socket types (<strong>SOCK_STREAM</strong>, <strong>SOCK_SEQPACKET</strong>). It extracts the first connection request on the queue of pending connections for the listening socket, <code>sockfd</code>, creates a new connected socket, and returns a new file descriptor referring to that socket. The newly created socket is not in the listening state. The original socket <code>sockfd</code> is unaffected by this call.</p>
<p>The argument <code>sockfd</code> is a socket that has been created with <a href='/2/socket'>socket</a>(2), bound to a local address with <a href='/2/bind'>bind</a>(2), and is listening for connections after a <a href='/2/listen'>listen</a>(2).</p>
<p>The argument <code>addr</code> is a pointer to a <code>sockaddr</code> structure. This structure is filled in with the address of the peer socket, as known to the communications layer. The exact format of the address returned <code>addr</code> is determined by the socket's address family (see <a href='/2/socket'>socket</a>(2) and the respective protocol man pages). When <code>addr</code> is NULL, nothing is filled in; in this case, <code>addrlen</code> is not used, and should also be NULL.</p>
<p>The <code>addrlen</code> argument is a value-result argument: the caller must initialize it to contain the size (in bytes) of the structure pointed to by <code>addr</code>; on return it will contain the actual size of the peer address.</p>
<p>The returned address is truncated if the buffer provided is too small; in this case, <code>addrlen</code> will return a value greater than was supplied to the call.</p>
<p>If no pending connections are present on the queue, and the socket is not marked as nonblocking, <a href='accept'>accept</a>() blocks the caller until a connection is present. If the socket is marked nonblocking and no pending connections are present on the queue, <a href='accept'>accept</a>() fails with the error <strong>EAGAIN</strong> or <strong>EWOULDBLOCK</strong>.</p>
<p>In order to be notified of incoming connections on a socket, you can use <a href='/2/select'>select</a>(2), <a href='/2/poll'>poll</a>(2), or <a href='/7/epoll'>epoll</a>(7). A readable event will be delivered when a new connection is attempted and you may then call <a href='accept'>accept</a>() to get a socket for that connection. Alternatively, you can set the socket to deliver <strong>SIGIO</strong> when activity occurs on a socket; see <a href='/7/socket'>socket</a>(7) for details.</p>
<p>If <code>flags</code> is 0, then <a href='accept4'>accept4</a>() is the same as <a href='accept'>accept</a>(). The following values can be bitwise ORed in <code>flags</code> to obtain different behavior:</p>
<dl>
<dt><strong>SOCK_NONBLOCK</strong></dt>
<dd><p>Set the <strong>O_NONBLOCK</strong> file status flag on the open file description (see <a href='/2/open'>open</a>(2)) referred to by the new file descriptor. Using this flag saves extra calls to <a href='/2/fcntl'>fcntl</a>(2) to achieve the same result.</p>
</dd>
<dt><strong>SOCK_CLOEXEC</strong></dt>
<dd><p>Set the close-on-exec (<strong>FD_CLOEXEC</strong>) flag on the new file descriptor. See the description of the <strong>O_CLOEXEC</strong> flag in <a href='/2/open'>open</a>(2) for reasons why this may be useful.</p>
</dd>
</dl>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>On success, these system calls return a file descriptor for the accepted socket (a nonnegative integer). On error, -1 is returned, <code>errno</code> is set appropriately, and <code>addrlen</code> is left unchanged.</p>
<h2>Error handling</h2>
<p>Linux <a href='accept'>accept</a>() (and <a href='accept4'>accept4</a>()) passes already-pending network errors on the new socket as an error code from <a href='accept'>accept</a>(). This behavior differs from other BSD socket implementations. For reliable operation the application should detect the network errors defined for the protocol after <a href='accept'>accept</a>() and treat them like <strong>EAGAIN</strong> by retrying. In the case of TCP/IP, these are <strong>ENETDOWN</strong>, <strong>EPROTO</strong>, <strong>ENOPROTOOPT</strong>, <strong>EHOSTDOWN</strong>, <strong>ENONET</strong>, <strong>EHOSTUNREACH</strong>, <strong>EOPNOTSUPP</strong>, and <strong>ENETUNREACH</strong>.</p>
</div></div><h1 id='examples'><a href='#examples'>EXAMPLES</a></h1><div class='section' data-for='examples'><div data-more>
<p>See <a href='/2/bind'>bind</a>(2).</p>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<dl>
<dt><strong>EAGAIN</strong> or <strong>EWOULDBLOCK</strong></dt>
<dd><p>The socket is marked nonblocking and no connections are present to be accepted. POSIX.1-2001 and POSIX.1-2008 allow either error to be returned for this case, and do not require these constants to have the same value, so a portable application should check for both possibilities.</p>
</dd>
<dt><strong>EBADF</strong></dt>
<dd><p><code>sockfd</code> is not an open file descriptor.</p>
</dd>
<dt><strong>ECONNABORTED</strong></dt>
<dd><p>A connection has been aborted.</p>
</dd>
<dt><strong>EFAULT</strong></dt>
<dd><p>The <code>addr</code> argument is not in a writable part of the user address space.</p>
</dd>
<dt><strong>EINTR</strong></dt>
<dd><p>The system call was interrupted by a signal that was caught before a valid connection arrived; see <a href='/7/signal'>signal</a>(7).</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>Socket is not listening for connections, or <code>addrlen</code> is invalid (e.g., is negative).</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>(<a href='accept4'>accept4</a>()) invalid value in <code>flags</code>.</p>
</dd>
<dt><strong>EMFILE</strong></dt>
<dd><p>The per-process limit on the number of open file descriptors has been reached.</p>
</dd>
<dt><strong>ENFILE</strong></dt>
<dd><p>The system-wide limit on the total number of open files has been reached.</p>
</dd>
<dt><strong>ENOBUFS</strong>, <strong>ENOMEM</strong></dt>
<dd><p>Not enough free memory. This often means that the memory allocation is limited by the socket buffer limits, not by the system memory.</p>
</dd>
<dt><strong>ENOTSOCK</strong></dt>
<dd><p>The file descriptor <code>sockfd</code> does not refer to a socket.</p>
</dd>
<dt><strong>EOPNOTSUPP</strong></dt>
<dd><p>The referenced socket is not of type <strong>SOCK_STREAM</strong>.</p>
</dd>
<dt><strong>EPROTO</strong></dt>
<dd><p>Protocol error.</p>
</dd>
</dl>
<p>In addition, Linux <a href='accept'>accept</a>() may fail if:</p>
<dl>
<dt><strong>EPERM</strong></dt>
<dd><p>Firewall rules forbid connection.</p>
</dd>
</dl>
<p>In addition, network errors for the new socket and as defined for the protocol may be returned. Various Linux kernels can return other errors such as <strong>ENOSR</strong>, <strong>ESOCKTNOSUPPORT</strong>, <strong>EPROTONOSUPPORT</strong>, <strong>ETIMEDOUT</strong>. The value <strong>ERESTARTSYS</strong> may be seen during a trace.</p>
</div></div></div><h1 id='versions'><a href='#versions'>VERSIONS</a></h1><div data-for='versions' data-hide><div class='section' data-for='versions'><div data-more>
<p>The <a href='accept4'>accept4</a>() system call is available starting with Linux 2.6.28; support in glibc is available starting with version 2.10.</p>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p><a href='accept'>accept</a>(): POSIX.1-2001, POSIX.1-2008, SVr4, 4.4BSD (<a href='accept'>accept</a>() first appeared in 4.2BSD).</p>
<p><a href='accept4'>accept4</a>() is a nonstandard Linux extension.</p>
<p>On Linux, the new socket returned by <a href='accept'>accept</a>() does <code>not</code> inherit file status flags such as <strong>O_NONBLOCK</strong> and <strong>O_ASYNC</strong> from the listening socket. This behavior differs from the canonical BSD sockets implementation. Portable programs should not rely on inheritance or noninheritance of file status flags and always explicitly set all required flags on the socket returned from <a href='accept'>accept</a>().</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>POSIX.1-2001 does not require the inclusion of <code>&lt;sys/types.h&gt;</code>, and this header file is not required on Linux. However, some historical (BSD) implementations required this header file, and portable applications are probably wise to include it.</p>
<p>There may not always be a connection waiting after a <strong>SIGIO</strong> is delivered or <a href='/2/select'>select</a>(2), <a href='/2/poll'>poll</a>(2), or <a href='/7/epoll'>epoll</a>(7) return a readability event because the connection might have been removed by an asynchronous network error or another thread before <a href='accept'>accept</a>() is called. If this happens, then the call will block waiting for the next connection to arrive. To ensure that <a href='accept'>accept</a>() never blocks, the passed socket <code>sockfd</code> needs to have the <strong>O_NONBLOCK</strong> flag set (see <a href='/7/socket'>socket</a>(7)).</p>
<p>For certain protocols which require an explicit confirmation, such as DECnet, <a href='accept'>accept</a>() can be thought of as merely dequeuing the next connection request and not implying confirmation. Confirmation can be implied by a normal read or write on the new file descriptor, and rejection can be implied by closing the new socket. Currently, only DECnet has these semantics on Linux. In the original BSD sockets implementation (and on other older systems) the third argument of <a href='accept'>accept</a>() was declared as an <code>int *</code>. A POSIX.1g draft standard wanted to change it into a <code><a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a> *</code>C; later POSIX standards and glibc 2.x have <code>socklen_t * </code>.</p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/2/bind'>bind</a>(2), <a href='/2/connect'>connect</a>(2), <a href='/2/listen'>listen</a>(2), <a href='/2/select'>select</a>(2), <a href='/2/socket'>socket</a>(2), <a href='/7/socket'>socket</a>(7)</p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>