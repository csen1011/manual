<!DOCTYPE html>

<html lang="en">

    <head>

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width">

        <!-- https://getbootstrap.com/ -->
        <link crossorigin="anonymous" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" rel="stylesheet">
        <script crossorigin="anonymous" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>

        <!-- https://jquery.com/ -->
        <script crossorigin="anonymous" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

        <!-- https://fontawesome.com/ -->
        <link crossorigin="anonymous" href="https://use.fontawesome.com/releases/v5.13.0/css/all.css" integrity="sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" rel="stylesheet">

        <!-- https://www.ubuntu.com/ -->
        <link href="https://assets.ubuntu.com/v1/49a1a858-favicon-32x32.png" rel="icon" type="image/png">

        <link href="/static/rouge.css" rel="stylesheet">

        <script>

            

    $(function() {

        // Ensure all elements are styled the same
        $('pre').addClass('p-3');
        $('table').addClass('table');

        // Add toggles
        $('div.section').each(function(index, element) {

            // Prepare switch
            const $section = $(element);
            const id = 'switch-' + $section.attr('data-for');
            const $switch = $(
                '<div class="form-check form-switch mb-4">' +
                '<input id="' + id + '" class="form-check-input" type="checkbox">' +
                '<label class="form-check-label" for="' + id + '">less comfortable</label>' +
                '</div>'
            );

            // Find comfort levels
            const $less = $section.find('[data-less]');
            const $more = $section.find('[data-more]');

            // If a less-comfortable section exists, check it by default
            if ($less.length) {
                $switch.find('input').prop('checked', true);
            }

            // If only one comfort level exists, disable switch
            if (!$less.length || !$more.length) {
                $switch.find('input').prop('disabled', true);
            }

            // Listen for changes
            $switch.find('input').on('change', function() {
                if ($(this).is(':checked')) {
                    $less.removeClass('d-none');
                    $more.addClass('d-none');
                }
                else {
                    $less.addClass('d-none');
                    $more.removeClass('d-none');
                }
            }).trigger('change');

            // Add switch to DOM section has less-comfy level
            if ($section.find('[data-less]').length) {
                $section.prepend($switch);
            }
        });

        // Hide sections
        $('[data-hide]').each(function(index, element) {
            const $button = $('<button class="btn btn-outline-primary btn-sm" type="button">Show</button>');
            const id = $(element).attr('data-for');
            $(element).before($button);
            $button.on('click', function() {
                $(element).show();
                $(this).remove();
            });
            if (id) {
                $button.attr('data-for', id);
                $('#' + id).children('a').on('click', function() {
                    $button.trigger('click');
                });
            }
            $(element).hide();
        });

        // Show section if in hash
        $(window).on('hashchange', function() {
            const id = window.location.hash.slice(1);
            if (id) {
                $('button[data-for="' + id + '"]').trigger('click');
            }
        });
        $(window).trigger('hashchange');
    });



        </script>

        <script>

            $(function() {

                // Add borders to tables
                $('.table').addClass('table-bordered');

                // Enable popovers
                $('[data-bs-toggle="popover"]').each(function(index, element) {
                    new bootstrap.Popover(element, {
                        boundary: 'viewport',
                        html: true,
                        placement: 'bottom',
                        trigger: 'focus'
                    });
                });

                // Ensure all elements are styled the same
                $('h1').addClass('border-bottom fw-bold h2 mb-3 pb-2 pt-4');
                $('h2').addClass('fw-bold h3');

                // Ensure last heading can be anchored atop page
                $(window).resize(function() {
                    const top = $('h1').last().offset().top;
                    const margin = $(window).height() - ($('body').outerHeight() - top);
                    $('body').css('margin-bottom', Math.max(0, Math.ceil(margin)) + 'px');
                });
                $(window).trigger('resize');

                // Reveal body
                $('body').removeClass('invisible');
            });

        </script>

        <style>

            /* Style popovers */
            .popover {
                font-family: inherit;
                max-width: 100%;
            }

            /* Wrap long words (and URLs, whether linked or not), especially on mobile,
            but not in buttons and not in tables, which should instead scroll horizontally */
            * {
                word-break: break-word;
            }
            button, table * {
                word-break: normal;
            }

            /* Remove underlining */
            a {
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
            nav a:hover {
                text-decoration: none;
            }

            /* Match Gmail's yellow */
            a[data-bs-toggle=popover] {
                border-bottom: 2px solid rgb(252, 237, 193);
                box-shadow: inset 0 -2px 0 rgb(252, 237, 193);
                cursor: help;
            }
            a[data-bs-toggle=popover]:hover {
                background-color: rgb(252, 237, 193);
            }

            /* Match pre tags */
            code {
                color: inherit;
            }

            /* A la Jekyll theme */
            code, pre {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                padding: calc(.2rem - 3px) 0.2rem;
            }
            pre code {
                background-color: initial;
                border: initial;
                padding: initial;
            }

            /* Don't shrink these */
            code, pre {
                font-size: inherit;
            }

            /* Don't italicize */
            dl dt {
                font-style: normal;
            }

            /* Don't fill viewport */
            .table {
                width: inherit;
            }

        </style>

        <style>

            

    /* Match dl and p */
    button {
        margin-bottom: 1rem;
    }

    /* Ensure syntax-highlighted code scrolls on iOS, https://stackoverflow.com/a/49592093 */
    pre code {
        white-space: pre;
        word-wrap: normal;
    }
    pre code span {
        white-space: nowrap;
    }

    

        </style>

        <title>CS50 Manual Pages</title>

    </head>

    <body class="font-monospace invisible pb-5">

        <nav class="bg-dark navbar navbar-dark navbar-expand-xl px-4">
            <a class="navbar-brand" href="/"><i class="fas fa-list pe-3"></i>CS50 Manual Pages</a>
        </nav>

        <div class="container-fluid mt-2 px-4">
            

    <h1 id='name'><a href='#name'>NAME</a></h1><div class='section' data-for='name'><div data-more>
<p>kexec_load, kexec_file_load - load a new kernel for later execution</p>
</div></div><h1 id='synopsis'><a href='#synopsis'>SYNOPSIS</a></h1><div class='section' data-for='synopsis'><div data-more>
<pre><code><a data-bs-content='Be sure this line is atop your own code.' data-bs-toggle='popover' tabindex='0'>#include &lt;linux/kexec.h&gt;</a>

long kexec_load(unsigned long entry, unsigned long nr_segments,
 struct kexec_segment *segments, unsigned long flags);

long kexec_file_load(int kernel_fd, int initrd_fd,
 unsigned long cmdline_len, <a data-bs-content='Think of this as a &lt;code&gt;string&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>const char *</a>cmdline,
 unsigned long flags);</code></pre>
<p><code>Note</code>: There are no glibc wrappers for these system calls; see NOTES.</p>
</div></div><h1 id='description'><a href='#description'>DESCRIPTION</a></h1><div class='section' data-for='description'><div data-more>
<p>The <a href='kexec_load'>kexec_load</a>() system call loads a new kernel that can be executed later by <a href='/2/reboot'>reboot</a>(2).</p>
<p>The <code>flags</code> argument is a bit mask that controls the operation of the call. The following values can be specified in <code>flags</code>:</p>
<dl>
<dt><strong>KEXEC_ON_CRASH</strong> (since Linux 2.6.13)</dt>
<dd><p>Execute the new kernel automatically on a system crash. This "crash kernel" is loaded into an area of reserved memory that is determined at boot time using the <code>crashkernel</code> kernel command-line parameter. The location of this reserved memory is exported to user space via the <code>/proc/iomem</code> file, in an entry labeled "Crash kernel". A user-space application can parse this file and prepare a list of segments (see below) that specify this reserved memory as destination. If this flag is specified, the kernel checks that the target segments specified in <code>segments</code> fall within the reserved region.</p>
</dd>
<dt><strong>KEXEC_PRESERVE_CONTEXT</strong> (since Linux 2.6.27)</dt>
<dd><p>Preserve the system hardware and software states before executing the new kernel. This could be used for system suspend. This flag is available only if the kernel was configured with <strong>CONFIG_KEXEC_JUMP</strong>, and is effective only if <code>nr_segments</code> is greater than 0.</p>
</dd>
</dl>
<p>The high-order bits (corresponding to the mask 0xffff0000) of <code>flags</code> contain the architecture of the to-be-executed kernel. Specify (OR) the constant <strong>KEXEC_ARCH_DEFAULT</strong> to use the current architecture, or one of the following architecture constants <strong>KEXEC_ARCH_386</strong>, <strong>KEXEC_ARCH_68K</strong>, <strong>KEXEC_ARCH_X86_64</strong>, <strong>KEXEC_ARCH_PPC</strong>, <strong>KEXEC_ARCH_PPC64</strong>, <strong>KEXEC_ARCH_IA_64</strong>, <strong>KEXEC_ARCH_ARM</strong>, <strong>KEXEC_ARCH_S390</strong>, <strong>KEXEC_ARCH_SH</strong>, <strong>KEXEC_ARCH_MIPS</strong>, and <strong>KEXEC_ARCH_MIPS_LE</strong>. The architecture must be executable on the CPU of the system.</p>
<p>The <code>entry</code> argument is the physical entry address in the kernel image. The <code>nr_segments</code> argument is the number of segments pointed to by the <code>segments</code> pointer; the kernel imposes an (arbitrary) limit of 16 on the number of segments. The <code>segments</code> argument is an array of <code>kexec_segment</code> structures which define the kernel layout:</p>
<pre><code>struct kexec_segment {
    void   *buf;        /* Buffer in user space */
    <a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a>  bufsz;      /* Buffer length in user space */
    void   *mem;        /* Physical address of kernel */
    <a data-bs-content='Think of this as a &lt;code&gt;long&lt;/code&gt;.' data-bs-toggle='popover' tabindex='0'>size_t</a>  memsz;      /* Physical address length */
};</code></pre>
<p>The kernel image defined by <code>segments</code> is copied from the calling process into the kernel either in regular memory or in reserved memory (if <strong>KEXEC_ON_CRASH</strong> is set). The kernel first performs various sanity checks on the information passed in <code>segments</code>. If these checks pass, the kernel copies the segment data to kernel memory. Each segment specified in <code>segments</code> is copied as follows:</p>
<ul>
<li><p><code>buf</code> and <code>bufsz</code> identify a memory region in the caller's virtual address space that is the source of the copy. The value in <code>bufsz</code> may not exceed the value in the <code>memsz</code> field.</p></li>
<li><p><code>mem</code> and <code>memsz</code> specify a physical address range that is the target of the copy. The values specified in both fields must be multiples of the system page size.</p></li>
<li><p><code>bufsz</code> bytes are copied from the source buffer to the target kernel buffer. If <code>bufsz</code> is less than <code>memsz</code>, then the excess bytes in the kernel buffer are zeroed out.</p></li>
</ul>
<p>In case of a normal kexec (i.e., the <strong>KEXEC_ON_CRASH</strong> flag is not set), the segment data is loaded in any available memory and is moved to the final destination at kexec reboot time (e.g., when the <a href='/8/kexec'>kexec</a>(8) command is executed with the <code>-e</code> option).</p>
<p>In case of kexec on panic (i.e., the <strong>KEXEC_ON_CRASH</strong> flag is set), the segment data is loaded to reserved memory at the time of the call, and, after a crash, the kexec mechanism simply passes control to that kernel.</p>
<p>The <a href='kexec_load'>kexec_load</a>() system call is available only if the kernel was configured with <strong>CONFIG_KEXEC</strong>.</p>
<h2>kexec_file_load()</h2>
<p>The <a href='kexec_file_load'>kexec_file_load</a>() system call is similar to <a href='kexec_load'>kexec_load</a>(), but it takes a different set of arguments. It reads the kernel to be loaded from the file referred to by the file descriptor <code>kernel_fd</code>, and the initrd (initial RAM disk) to be loaded from file referred to by the file descriptor <code>initrd_fd</code>. The <code>cmdline</code> argument is a pointer to a buffer containing the command line for the new kernel. The <code>cmdline_len</code> argument specifies size of the buffer. The last byte in the buffer must be a null byte ('\0').</p>
<p>The <code>flags</code> argument is a bit mask which modifies the behavior of the call. The following values can be specified in <code>flags</code>:</p>
<dl>
<dt><strong>KEXEC_FILE_UNLOAD</strong></dt>
<dd><p>Unload the currently loaded kernel.</p>
</dd>
<dt><strong>KEXEC_FILE_ON_CRASH</strong></dt>
<dd><p>Load the new kernel in the memory region reserved for the crash kernel (as for <strong>KEXEC_ON_CRASH</strong>). This kernel is booted if the currently running kernel crashes.</p>
</dd>
<dt><strong>KEXEC_FILE_NO_INITRAMFS</strong></dt>
<dd><p>Loading initrd/initramfs is optional. Specify this flag if no initramfs is being loaded. If this flag is set, the value passed in <code>initrd_fd</code> is ignored.</p>
</dd>
</dl>
<p>The <a href='kexec_file_load'>kexec_file_load</a>() system call was added to provide support for systems where "kexec" loading should be restricted to only kernels that are signed. This system call is available only if the kernel was configured with <strong>CONFIG_KEXEC_FILE</strong>.</p>
</div></div><h1 id='return-value'><a href='#return-value'>RETURN VALUE</a></h1><div class='section' data-for='return-value'><div data-more>
<p>On success, these system calls returns 0. On error, -1 is returned and <code>errno</code> is set to indicate the error.</p>
</div></div><h1 id='errors'><a href='#errors'>ERRORS</a></h1><div data-for='errors' data-hide><div class='section' data-for='errors'><div data-more>
<dl>
<dt><strong>EADDRNOTAVAIL</strong></dt>
<dd><p>The <strong>KEXEC_ON_CRASH</strong> flags was specified, but the region specified by the <code>mem</code> and <code>memsz</code> fields of one of the <code>segments</code> entries lies outside the range of memory reserved for the crash kernel.</p>
</dd>
<dt><strong>EADDRNOTAVAIL</strong></dt>
<dd><p>The value in a <code>mem</code> or <code>memsz</code> field in one of the <code>segments</code> entries is not a multiple of the system page size.</p>
</dd>
<dt><strong>EBADF</strong></dt>
<dd><p><code>kernel_fd</code> or <code>initrd_fd</code> is not a valid file descriptor.</p>
</dd>
<dt><strong>EBUSY</strong></dt>
<dd><p>Another crash kernel is already being loaded or a crash kernel is already in use.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p><code>flags</code> is invalid.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>The value of a <code>bufsz</code> field in one of the <code>segments</code> entries exceeds the value in the corresponding <code>memsz</code> field.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p><code>nr_segments</code> exceeds <strong>KEXEC_SEGMENT_MAX</strong> (16).</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>Two or more of the kernel target buffers overlap.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>The value in <code>cmdline[cmdline_len-1]</code> is not '\0'.</p>
</dd>
<dt><strong>EINVAL</strong></dt>
<dd><p>The file referred to by <code>kernel_fd</code> or <code>initrd_fd</code> is empty (length zero).</p>
</dd>
<dt><strong>ENOEXEC</strong></dt>
<dd><p><code>kernel_fd</code> does not refer to an open file, or the kernel can't load this file. Currently, the file must be a bzImage and contain an x86 kernel that is loadable above 4 GiB in memory (see the kernel source file <code>Documentation/x86/boot.txt</code>).</p>
</dd>
<dt><strong>ENOMEM</strong></dt>
<dd><p>Could not allocate memory.</p>
</dd>
<dt><strong>EPERM</strong></dt>
<dd><p>The caller does not have the <strong>CAP_SYS_BOOT</strong> capability.</p>
</dd>
</dl>
</div></div></div><h1 id='versions'><a href='#versions'>VERSIONS</a></h1><div data-for='versions' data-hide><div class='section' data-for='versions'><div data-more>
<p>The <a href='kexec_load'>kexec_load</a>() system call first appeared in Linux 2.6.13. The <a href='kexec_file_load'>kexec_file_load</a>() system call first appeared in Linux 3.17.</p>
</div></div></div><h1 id='conforming-to'><a href='#conforming-to'>CONFORMING TO</a></h1><div data-for='conforming-to' data-hide><div class='section' data-for='conforming-to'><div data-more>
<p>These system calls are Linux-specific.</p>
</div></div></div><h1 id='notes'><a href='#notes'>NOTES</a></h1><div data-for='notes' data-hide><div class='section' data-for='notes'><div data-more>
<p>Currently, there is no glibc support for these system calls. Call them using <a href='/2/syscall'>syscall</a>(2).</p>
</div></div></div><h1 id='see-also'><a href='#see-also'>SEE ALSO</a></h1><div class='section' data-for='see-also'><div data-more>
<p><a href='/2/reboot'>reboot</a>(2), <a href='/2/syscall'>syscall</a>(2), <a href='/8/kexec'>kexec</a>(8)</p>
<p>The kernel source files <code>Documentation/kdump/kdump.txt</code> and <code>Documentation/admin-guide/kernel-parameters.txt</code></p>
</div></div><h1 id='colophon'><a href='#colophon'>COLOPHON</a></h1><div data-for='colophon' data-hide><div class='section' data-for='colophon'><div data-more>
<p>This page is part of release 5.10 of the Linux <code>man-pages</code> project. A description of the project, information about reporting bugs, and the latest version of this page, can be found at <a href="https://www.kernel.org/doc/man-pages/">https://www.kernel.org/doc/man-pages/</a>.</p></div></div></div>


        </div>

    </body>

</html>